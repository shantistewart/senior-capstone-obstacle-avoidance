
USART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080cc  080080cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080080cc  080080cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080cc  080080cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080080d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  24000074  08008148  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006e8  08008148  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebfa  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003846  00000000  00000000  0003ec9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  000424e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  00043538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038c8b  00000000  00000000  00044420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a51  00000000  00000000  0007d0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015b486  00000000  00000000  0008dafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a4  00000000  00000000  001e9000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ff4 	.word	0x08007ff4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08007ff4 	.word	0x08007ff4

080002d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d013      	beq.n	8000318 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00b      	beq.n	8000318 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000300:	e000      	b.n	8000304 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000302:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000304:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800030e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000318:	687b      	ldr	r3, [r7, #4]
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fcc5 	bl	8000cbc <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t CAM_RESET[]						=	{0x56, 0x0, 0x26, 0x0};
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0x60>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	613b      	str	r3, [r7, #16]
  uint8_t CAM_CAPTURE[]						=	{0x56, 0x0, 0x36, 0x1, 0x0};
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <main+0x64>)
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000342:	6018      	str	r0, [r3, #0]
 8000344:	3304      	adds	r3, #4
 8000346:	7019      	strb	r1, [r3, #0]
  uint8_t CAM_IMG_LENGTH[]					=	{0x56, 0x0, 0x34, 0x1, 0x0};
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <main+0x68>)
 800034a:	463b      	mov	r3, r7
 800034c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000350:	6018      	str	r0, [r3, #0]
 8000352:	3304      	adds	r3, #4
 8000354:	7019      	strb	r1, [r3, #0]

  //Camera_Setup(CAM_RESET);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f81f 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 f999 	bl	8000690 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800035e:	f000 f8d7 	bl	8000510 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000362:	f000 f8f3 	bl	800054c <MX_SPI1_Init>
  MX_USART1_Init();
 8000366:	f000 f947 	bl	80005f8 <MX_USART1_Init>
  MX_FATFS_Init();
 800036a:	f006 ffbd 	bl	80072e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	printf("I love debugging!\n");
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <main+0x6c>)
 8000374:	f007 fa32 	bl	80077dc <puts>
	HAL_Delay(500);
 8000378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037c:	f000 fd2c 	bl	8000dd8 <HAL_Delay>
	count++;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
	printf("I love debugging!\n");
 8000386:	e7f4      	b.n	8000372 <main+0x4a>
 8000388:	08008020 	.word	0x08008020
 800038c:	08008024 	.word	0x08008024
 8000390:	0800802c 	.word	0x0800802c
 8000394:	0800800c 	.word	0x0800800c

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0cc      	sub	sp, #304	; 0x130
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80003a2:	224c      	movs	r2, #76	; 0x4c
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f007 f9b4 	bl	8007714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80003b0:	2220      	movs	r2, #32
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f007 f9ad 	bl	8007714 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4618      	mov	r0, r3
 80003c0:	23bc      	movs	r3, #188	; 0xbc
 80003c2:	461a      	mov	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f007 f9a5 	bl	8007714 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ca:	2002      	movs	r0, #2
 80003cc:	f000 fff8 	bl	80013c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	4b4b      	ldr	r3, [pc, #300]	; (8000504 <SystemClock_Config+0x16c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a4a      	ldr	r2, [pc, #296]	; (8000504 <SystemClock_Config+0x16c>)
 80003dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b48      	ldr	r3, [pc, #288]	; (8000504 <SystemClock_Config+0x16c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	4b46      	ldr	r3, [pc, #280]	; (8000508 <SystemClock_Config+0x170>)
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	4a45      	ldr	r2, [pc, #276]	; (8000508 <SystemClock_Config+0x170>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003fa:	4b43      	ldr	r3, [pc, #268]	; (8000508 <SystemClock_Config+0x170>)
 80003fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fe:	f003 0201 	and.w	r2, r3, #1
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800040a:	bf00      	nop
 800040c:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <SystemClock_Config+0x16c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000418:	d1f8      	bne.n	800040c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000420:	2301      	movs	r3, #1
 8000422:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2320      	movs	r3, #32
 8000428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000432:	2300      	movs	r3, #0
 8000434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000438:	2304      	movs	r3, #4
 800043a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800043e:	233c      	movs	r3, #60	; 0x3c
 8000440:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800044a:	2302      	movs	r3, #2
 800044c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000450:	2302      	movs	r3, #2
 8000452:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000456:	230c      	movs	r3, #12
 8000458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800045c:	2300      	movs	r3, #0
 800045e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800046c:	4618      	mov	r0, r3
 800046e:	f000 ffdf 	bl	8001430 <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000478:	f000 f9a4 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	233f      	movs	r3, #63	; 0x3f
 800047e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800048e:	2308      	movs	r3, #8
 8000490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000494:	2340      	movs	r3, #64	; 0x40
 8000496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800049a:	2340      	movs	r3, #64	; 0x40
 800049c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004b2:	2104      	movs	r1, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 fb73 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80004c0:	f000 f980 	bl	80007c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI1
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <SystemClock_Config+0x174>)
 80004ca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	2200      	movs	r2, #0
 80004d2:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80004d4:	f107 0308 	add.w	r3, r7, #8
 80004d8:	2200      	movs	r2, #0
 80004da:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	2200      	movs	r2, #0
 80004e2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 feb7 	bl	800225c <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x160>
  {
    Error_Handler();
 80004f4:	f000 f966 	bl	80007c4 <Error_Handler>
  }
}
 80004f8:	bf00      	nop
 80004fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	58024800 	.word	0x58024800
 8000508:	58000400 	.word	0x58000400
 800050c:	00011001 	.word	0x00011001

08000510 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <MX_SDMMC1_SD_Init+0x38>)
 8000518:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <MX_SDMMC1_SD_Init+0x34>)
 8000534:	2204      	movs	r2, #4
 8000536:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	240000a8 	.word	0x240000a8
 8000548:	52007000 	.word	0x52007000

0800054c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000552:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <MX_SPI1_Init+0xa8>)
 8000554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000558:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800055c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000566:	2207      	movs	r2, #7
 8000568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <MX_SPI1_Init+0xa4>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000578:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800057c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000580:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI1_Init+0xa4>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_SPI1_Init+0xa4>)
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_SPI1_Init+0xa4>)
 800059a:	2200      	movs	r2, #0
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_SPI1_Init+0xa4>)
 80005de:	f005 f87b 	bl	80056d8 <HAL_SPI_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80005e8:	f000 f8ec 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	24000128 	.word	0x24000128
 80005f4:	40013000 	.word	0x40013000

080005f8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_USART1_Init+0x90>)
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_USART1_Init+0x94>)
 8000600:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_USART1_Init+0x90>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_USART1_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_USART1_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_USART1_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_USART1_Init+0x90>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_USART1_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_USART1_Init+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_USART1_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART1_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART1_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_USART1_Init+0x90>)
 8000642:	f005 f95c 	bl	80058fe <HAL_USART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 800064c:	f000 f8ba 	bl	80007c4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_USART1_Init+0x90>)
 8000654:	f005 ff92 	bl	800657c <HAL_USARTEx_SetTxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 800065e:	f000 f8b1 	bl	80007c4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <MX_USART1_Init+0x90>)
 8000666:	f005 ffc7 	bl	80065f8 <HAL_USARTEx_SetRxFifoThreshold>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 f8a8 	bl	80007c4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_USART1_Init+0x90>)
 8000676:	f005 ff48 	bl	800650a <HAL_USARTEx_DisableFifoMode>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 f8a0 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	24000218 	.word	0x24000218
 800068c:	40011000 	.word	0x40011000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a35      	ldr	r2, [pc, #212]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xf4>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xf4>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0xf8>)
 8000742:	f000 fe23 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000746:	2304      	movs	r3, #4
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <MX_GPIO_Init+0xf8>)
 800075e:	f000 fc4d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000762:	2308      	movs	r3, #8
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xf8>)
 8000776:	f000 fc41 	bl	8000ffc <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021400 	.word	0x58021400

0800078c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* out, int len) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e009      	b.n	80007b2 <_write+0x26>
		ITM_SendChar(out[i]);
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd96 	bl	80002d8 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbf1      	blt.n	800079e <_write+0x12>
	}
	return len;
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x30>)
 80007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x30>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x30>)
 80007ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	58024400 	.word	0x58024400

08000808 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <HAL_SD_MspInit+0xc8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d14d      	bne.n	80008c6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 800082c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000830:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 800083c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_SD_MspInit+0xcc>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000884:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000896:	230c      	movs	r3, #12
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_SD_MspInit+0xd0>)
 80008a2:	f000 fbab 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_SD_MspInit+0xd4>)
 80008c2:	f000 fb9b 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	52007000 	.word	0x52007000
 80008d4:	58024400 	.word	0x58024400
 80008d8:	58020800 	.word	0x58020800
 80008dc:	58020c00 	.word	0x58020c00

080008e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_SPI_MspInit+0x88>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12d      	bne.n	800095e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_SPI_MspInit+0x8c>)
 8000904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_SPI_MspInit+0x8c>)
 800090a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_SPI_MspInit+0x8c>)
 8000914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_SPI_MspInit+0x8c>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x8c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_SPI_MspInit+0x8c>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_SPI_MspInit+0x90>)
 800095a:	f000 fb4f 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40013000 	.word	0x40013000
 800096c:	58024400 	.word	0x58024400
 8000970:	58020000 	.word	0x58020000

08000974 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <HAL_USART_MspInit+0xc8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d14e      	bne.n	8000a34 <HAL_USART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 8000998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_USART_MspInit+0xcc>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a02:	2304      	movs	r3, #4
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <HAL_USART_MspInit+0xd0>)
 8000a0e:	f000 faf5 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a24:	2307      	movs	r3, #7
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <HAL_USART_MspInit+0xd4>)
 8000a30:	f000 fae4 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58020000 	.word	0x58020000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f97a 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e00a      	b.n	8000ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aba:	f3af 8000 	nop.w
 8000abe:	4601      	mov	r1, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf0      	blt.n	8000aba <_read+0x12>
	}

return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x50>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x16>
		heap_end = &end;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <_sbrk+0x50>)
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <_sbrk+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <_sbrk+0x50>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <_sbrk+0x50>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	466a      	mov	r2, sp
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d907      	bls.n	8000b86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b76:	f006 fda3 	bl	80076c0 <__errno>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	e006      	b.n	8000b94 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_sbrk+0x50>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <_sbrk+0x50>)
 8000b90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000090 	.word	0x24000090
 8000ba0:	240006e8 	.word	0x240006e8

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <SystemInit+0xac>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <SystemInit+0xac>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <SystemInit+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <SystemInit+0xb0>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <SystemInit+0xb0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <SystemInit+0xb0>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4921      	ldr	r1, [pc, #132]	; (8000c54 <SystemInit+0xb0>)
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <SystemInit+0xb4>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <SystemInit+0xb0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <SystemInit+0xb0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <SystemInit+0xb0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <SystemInit+0xb0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <SystemInit+0xb0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <SystemInit+0xb0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <SystemInit+0xb0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <SystemInit+0xb0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <SystemInit+0xb0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <SystemInit+0xb0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <SystemInit+0xb0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <SystemInit+0xb0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <SystemInit+0xb0>)
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <SystemInit+0xb0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <SystemInit+0xb8>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <SystemInit+0xbc>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c36:	d202      	bcs.n	8000c3e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <SystemInit+0xc0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SystemInit+0xac>)
 8000c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c44:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	58024400 	.word	0x58024400
 8000c58:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c5c:	5c001000 	.word	0x5c001000
 8000c60:	ffff0000 	.word	0xffff0000
 8000c64:	51008108 	.word	0x51008108

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	e003      	b.n	8000c78 <LoopCopyDataInit>

08000c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c76:	3104      	adds	r1, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c80:	d3f6      	bcc.n	8000c70 <CopyDataInit>
  ldr  r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c84:	e002      	b.n	8000c8c <LoopFillZerobss>

08000c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c88:	f842 3b04 	str.w	r3, [r2], #4

08000c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c90:	d3f9      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ff87 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f006 fd19 	bl	80076cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fb45 	bl	8000328 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ca4:	080080d4 	.word	0x080080d4
  ldr  r0, =_sdata
 8000ca8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000cac:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8000cb0:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8000cb4:	240006e8 	.word	0x240006e8

08000cb8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC3_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f969 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cc6:	f001 f90f 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8000cca:	4601      	mov	r1, r0
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_Init+0x60>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <HAL_Init+0x64>)
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_Init+0x68>)
 8000ce4:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_Init+0x68>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_Init+0x60>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	490b      	ldr	r1, [pc, #44]	; (8000d20 <HAL_Init+0x64>)
 8000cf4:	5ccb      	ldrb	r3, [r1, r3]
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x6c>)
 8000d00:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f812 	bl	8000d2c <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e002      	b.n	8000d18 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d12:	f7ff fd5f 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	08008044 	.word	0x08008044
 8000d24:	24000000 	.word	0x24000000
 8000d28:	24000004 	.word	0x24000004

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_InitTick+0x60>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e021      	b.n	8000d84 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_InitTick+0x64>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_InitTick+0x60>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f943 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f91b 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x68>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2400000c 	.word	0x2400000c
 8000d90:	24000000 	.word	0x24000000
 8000d94:	24000008 	.word	0x24000008

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2400000c 	.word	0x2400000c
 8000dbc:	24000278 	.word	0x24000278

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	24000278 	.word	0x24000278

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_Delay+0x40>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2400000c 	.word	0x2400000c

08000e1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetREVID+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0c1b      	lsrs	r3, r3, #16
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	5c001000 	.word	0x5c001000

08000e34 <__NVIC_SetPriorityGrouping>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	05fa0000 	.word	0x05fa0000

08000e7c <__NVIC_GetPriorityGrouping>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff5e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb2 	bl	8000f54 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800100a:	4b89      	ldr	r3, [pc, #548]	; (8001230 <HAL_GPIO_Init+0x234>)
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800100e:	e194      	b.n	800133a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8186 	beq.w	8001334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x3c>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b12      	cmp	r3, #18
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d00b      	beq.n	80010d4 <HAL_GPIO_Init+0xd8>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	2b11      	cmp	r3, #17
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80e0 	beq.w	8001334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x238>)
 8001176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800117a:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <HAL_GPIO_Init+0x238>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_GPIO_Init+0x238>)
 8001186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_GPIO_Init+0x23c>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_GPIO_Init+0x240>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d052      	beq.n	8001264 <HAL_GPIO_Init+0x268>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_GPIO_Init+0x244>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d031      	beq.n	800122a <HAL_GPIO_Init+0x22e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_GPIO_Init+0x248>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02b      	beq.n	8001226 <HAL_GPIO_Init+0x22a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_GPIO_Init+0x24c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d025      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_GPIO_Init+0x250>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01f      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x254>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_GPIO_Init+0x258>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x25c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_GPIO_Init+0x260>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x264>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x20e>
 8001206:	2309      	movs	r3, #9
 8001208:	e02d      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800120a:	230a      	movs	r3, #10
 800120c:	e02b      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800120e:	2308      	movs	r3, #8
 8001210:	e029      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 8001212:	2307      	movs	r3, #7
 8001214:	e027      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 8001216:	2306      	movs	r3, #6
 8001218:	e025      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800121a:	2305      	movs	r3, #5
 800121c:	e023      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800121e:	2304      	movs	r3, #4
 8001220:	e021      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 8001222:	2303      	movs	r3, #3
 8001224:	e01f      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 8001226:	2302      	movs	r3, #2
 8001228:	e01d      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800122a:	2301      	movs	r3, #1
 800122c:	e01b      	b.n	8001266 <HAL_GPIO_Init+0x26a>
 800122e:	bf00      	nop
 8001230:	58000080 	.word	0x58000080
 8001234:	58024400 	.word	0x58024400
 8001238:	58000400 	.word	0x58000400
 800123c:	58020000 	.word	0x58020000
 8001240:	58020400 	.word	0x58020400
 8001244:	58020800 	.word	0x58020800
 8001248:	58020c00 	.word	0x58020c00
 800124c:	58021000 	.word	0x58021000
 8001250:	58021400 	.word	0x58021400
 8001254:	58021800 	.word	0x58021800
 8001258:	58021c00 	.word	0x58021c00
 800125c:	58022000 	.word	0x58022000
 8001260:	58022400 	.word	0x58022400
 8001264:	2300      	movs	r3, #0
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001276:	4938      	ldr	r1, [pc, #224]	; (8001358 <HAL_GPIO_Init+0x35c>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f ae63 	bne.w	8001010 <HAL_GPIO_Init+0x14>
  }
}
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	58000400 	.word	0x58000400

0800135c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_PWREx_ConfigSupply+0x6c>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d008      	beq.n	80013e6 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_PWREx_ConfigSupply+0x6c>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e01d      	b.n	8001422 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_PWREx_ConfigSupply+0x6c>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 0207 	bic.w	r2, r3, #7
 80013ee:	490f      	ldr	r1, [pc, #60]	; (800142c <HAL_PWREx_ConfigSupply+0x6c>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f6:	f7ff fce3 	bl	8000dc0 <HAL_GetTick>
 80013fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80013fc:	e009      	b.n	8001412 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80013fe:	f7ff fcdf 	bl	8000dc0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800140c:	d901      	bls.n	8001412 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e007      	b.n	8001422 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_PWREx_ConfigSupply+0x6c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141e:	d1ee      	bne.n	80013fe <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	58024800 	.word	0x58024800

08001430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e3a4      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8087 	beq.w	800155e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001450:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800145a:	4b98      	ldr	r3, [pc, #608]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	2b10      	cmp	r3, #16
 8001464:	d007      	beq.n	8001476 <HAL_RCC_OscConfig+0x46>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2b18      	cmp	r3, #24
 800146a:	d110      	bne.n	800148e <HAL_RCC_OscConfig+0x5e>
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d10b      	bne.n	800148e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001476:	4b91      	ldr	r3, [pc, #580]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d06c      	beq.n	800155c <HAL_RCC_OscConfig+0x12c>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d168      	bne.n	800155c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e37e      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x76>
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e02e      	b.n	8001504 <HAL_RCC_OscConfig+0xd4>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a82      	ldr	r2, [pc, #520]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7f      	ldr	r2, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xd4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0xbc>
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a79      	ldr	r2, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b77      	ldr	r3, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a76      	ldr	r2, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xd4>
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a72      	ldr	r2, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b70      	ldr	r3, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6f      	ldr	r2, [pc, #444]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fc58 	bl	8000dc0 <HAL_GetTick>
 8001510:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fc54 	bl	8000dc0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e332      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001526:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xe4>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fc44 	bl	8000dc0 <HAL_GetTick>
 8001538:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fc40 	bl	8000dc0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e31e      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x10c>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80b0 	beq.w	80016cc <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001574:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_RCC_OscConfig+0x162>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b18      	cmp	r3, #24
 8001586:	d149      	bne.n	800161c <HAL_RCC_OscConfig+0x1ec>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d144      	bne.n	800161c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x17a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2f0      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015aa:	4b44      	ldr	r3, [pc, #272]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0219 	bic.w	r2, r3, #25
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4941      	ldr	r1, [pc, #260]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc00 	bl	8000dc0 <HAL_GetTick>
 80015c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fbfc 	bl	8000dc0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2da      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	f7ff fc1b 	bl	8000e1c <HAL_GetREVID>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d80a      	bhi.n	8001606 <HAL_RCC_OscConfig+0x1d6>
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	031b      	lsls	r3, r3, #12
 80015fe:	492f      	ldr	r1, [pc, #188]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001604:	e062      	b.n	80016cc <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	4929      	ldr	r1, [pc, #164]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161a:	e057      	b.n	80016cc <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d038      	beq.n	8001696 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0219 	bic.w	r2, r3, #25
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4922      	ldr	r1, [pc, #136]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fbc3 	bl	8000dc0 <HAL_GetTick>
 800163a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fbbf 	bl	8000dc0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e29d      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	f7ff fbde 	bl	8000e1c <HAL_GetREVID>
 8001660:	4602      	mov	r2, r0
 8001662:	f241 0303 	movw	r3, #4099	; 0x1003
 8001666:	429a      	cmp	r2, r3
 8001668:	d80a      	bhi.n	8001680 <HAL_RCC_OscConfig+0x250>
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	4910      	ldr	r1, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x29c>
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	490b      	ldr	r1, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e01a      	b.n	80016cc <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_RCC_OscConfig+0x28c>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb8d 	bl	8000dc0 <HAL_GetTick>
 80016a6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb89 	bl	8000dc0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d903      	bls.n	80016c0 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e267      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
 80016bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016c0:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 808f 	beq.w	80017f8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b9a      	ldr	r3, [pc, #616]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e2:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e4:	4b97      	ldr	r3, [pc, #604]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d007      	beq.n	8001700 <HAL_RCC_OscConfig+0x2d0>
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d12d      	bne.n	8001752 <HAL_RCC_OscConfig+0x322>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d128      	bne.n	8001752 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001700:	4b90      	ldr	r3, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x2e8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e239      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001718:	f7ff fb80 	bl	8000e1c <HAL_GetREVID>
 800171c:	4602      	mov	r2, r0
 800171e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001722:	429a      	cmp	r2, r3
 8001724:	d80a      	bhi.n	800173c <HAL_RCC_OscConfig+0x30c>
 8001726:	4b87      	ldr	r3, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	069b      	lsls	r3, r3, #26
 8001734:	4983      	ldr	r1, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800173a:	e05d      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	497e      	ldr	r1, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800174c:	4313      	orrs	r3, r2
 800174e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001750:	e052      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d035      	beq.n	80017c6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fb2b 	bl	8000dc0 <HAL_GetTick>
 800176a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800176e:	f7ff fb27 	bl	8000dc0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e205      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001780:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800178c:	f7ff fb46 	bl	8000e1c <HAL_GetREVID>
 8001790:	4602      	mov	r2, r0
 8001792:	f241 0303 	movw	r3, #4099	; 0x1003
 8001796:	429a      	cmp	r2, r3
 8001798:	d80a      	bhi.n	80017b0 <HAL_RCC_OscConfig+0x380>
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	069b      	lsls	r3, r3, #26
 80017a8:	4966      	ldr	r1, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
 80017ae:	e023      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c8>
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	4961      	ldr	r1, [pc, #388]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff faf5 	bl	8000dc0 <HAL_GetTick>
 80017d6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017da:	f7ff faf1 	bl	8000dc0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1cf      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017ec:	4b55      	ldr	r3, [pc, #340]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d036      	beq.n	8001872 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d019      	beq.n	8001840 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fad2 	bl	8000dc0 <HAL_GetTick>
 800181c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff face 	bl	8000dc0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1ac      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x3f0>
 800183e:	e018      	b.n	8001872 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fab8 	bl	8000dc0 <HAL_GetTick>
 8001850:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fab4 	bl	8000dc0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e192      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b00      	cmp	r3, #0
 800187c:	d036      	beq.n	80018ec <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2e      	ldr	r2, [pc, #184]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001892:	f7ff fa95 	bl	8000dc0 <HAL_GetTick>
 8001896:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800189a:	f7ff fa91 	bl	8000dc0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e16f      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x46a>
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80018c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa7b 	bl	8000dc0 <HAL_GetTick>
 80018ca:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018ce:	f7ff fa77 	bl	8000dc0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e155      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8086 	beq.w	8001a06 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_OscConfig+0x518>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x518>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001906:	f7ff fa5b 	bl	8000dc0 <HAL_GetTick>
 800190a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fa57 	bl	8000dc0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b64      	cmp	r3, #100	; 0x64
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e135      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x518>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10b      	bne.n	800194c <HAL_RCC_OscConfig+0x51c>
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a02      	ldr	r2, [pc, #8]	; (8001944 <HAL_RCC_OscConfig+0x514>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	e032      	b.n	80019a8 <HAL_RCC_OscConfig+0x578>
 8001942:	bf00      	nop
 8001944:	58024400 	.word	0x58024400
 8001948:	58024800 	.word	0x58024800
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x53e>
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a8e      	ldr	r2, [pc, #568]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a8b      	ldr	r2, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x578>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x560>
 8001976:	4b87      	ldr	r3, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a86      	ldr	r2, [pc, #536]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	; 0x70
 8001982:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a83      	ldr	r2, [pc, #524]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x578>
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff fa06 	bl	8000dc0 <HAL_GetTick>
 80019b4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff fa02 	bl	8000dc0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0de      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ce:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <HAL_RCC_OscConfig+0x588>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f9f0 	bl	8000dc0 <HAL_GetTick>
 80019e0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff f9ec 	bl	8000dc0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0c8      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80bd 	beq.w	8001b8a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a18:	2b18      	cmp	r3, #24
 8001a1a:	f000 80b4 	beq.w	8001b86 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	f040 8095 	bne.w	8001b52 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a59      	ldr	r2, [pc, #356]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f9c4 	bl	8000dc0 <HAL_GetTick>
 8001a38:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f9c0 	bl	8000dc0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e09e      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x768>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	4949      	ldr	r1, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	628b      	str	r3, [r1, #40]	; 0x28
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	3b01      	subs	r3, #1
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001aa4:	493b      	ldr	r1, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x76c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	4933      	ldr	r1, [pc, #204]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f023 020c 	bic.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	492f      	ldr	r1, [pc, #188]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f023 0202 	bic.w	r2, r3, #2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	492a      	ldr	r1, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f949 	bl	8000dc0 <HAL_GetTick>
 8001b2e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff f945 	bl	8000dc0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e023      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x702>
 8001b50:	e01b      	b.n	8001b8a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f92f 	bl	8000dc0 <HAL_GetTick>
 8001b62:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f92b 	bl	8000dc0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e009      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x764>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x736>
 8001b84:	e001      	b.n	8001b8a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400
 8001b98:	fffffc0c 	.word	0xfffffc0c
 8001b9c:	ffff0007 	.word	0xffff0007

08001ba0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e18d      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b8a      	ldr	r3, [pc, #552]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	4985      	ldr	r1, [pc, #532]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b83      	ldr	r3, [pc, #524]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e175      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d908      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c00:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	4975      	ldr	r1, [pc, #468]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d010      	beq.n	8001c40 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d908      	bls.n	8001c40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c2e:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	496a      	ldr	r1, [pc, #424]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d908      	bls.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c5c:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	495e      	ldr	r1, [pc, #376]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d908      	bls.n	8001c9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c8a:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4953      	ldr	r1, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d908      	bls.n	8001cca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4947      	ldr	r1, [pc, #284]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d055      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4940      	ldr	r1, [pc, #256]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d121      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0e7      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d115      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0db      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cf      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0c7      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4925      	ldr	r1, [pc, #148]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff f835 	bl	8000dc0 <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5a:	f7ff f831 	bl	8000dc0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0af      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d1eb      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d010      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d208      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_RCC_ClockConfig+0x244>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d214      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 020f 	bic.w	r2, r3, #15
 8001dc6:	4906      	ldr	r1, [pc, #24]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCC_ClockConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e077      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x330>
 8001de0:	52002000 	.word	0x52002000
 8001de4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d208      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	4931      	ldr	r1, [pc, #196]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d208      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4926      	ldr	r1, [pc, #152]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d010      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d208      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	491a      	ldr	r1, [pc, #104]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d010      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d208      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	490f      	ldr	r1, [pc, #60]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ea0:	f000 f822 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_ClockConfig+0x338>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x33c>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_RCC_ClockConfig+0x340>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_ClockConfig+0x344>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe ff31 	bl	8000d2c <HAL_InitTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001ece:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	08008044 	.word	0x08008044
 8001ee0:	24000000 	.word	0x24000000
 8001ee4:	24000008 	.word	0x24000008

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eee:	4baf      	ldr	r3, [pc, #700]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef6:	2b18      	cmp	r3, #24
 8001ef8:	f200 814e 	bhi.w	8002198 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f69 	.word	0x08001f69
 8001f08:	08002199 	.word	0x08002199
 8001f0c:	08002199 	.word	0x08002199
 8001f10:	08002199 	.word	0x08002199
 8001f14:	08002199 	.word	0x08002199
 8001f18:	08002199 	.word	0x08002199
 8001f1c:	08002199 	.word	0x08002199
 8001f20:	08002199 	.word	0x08002199
 8001f24:	08001f8f 	.word	0x08001f8f
 8001f28:	08002199 	.word	0x08002199
 8001f2c:	08002199 	.word	0x08002199
 8001f30:	08002199 	.word	0x08002199
 8001f34:	08002199 	.word	0x08002199
 8001f38:	08002199 	.word	0x08002199
 8001f3c:	08002199 	.word	0x08002199
 8001f40:	08002199 	.word	0x08002199
 8001f44:	08001f95 	.word	0x08001f95
 8001f48:	08002199 	.word	0x08002199
 8001f4c:	08002199 	.word	0x08002199
 8001f50:	08002199 	.word	0x08002199
 8001f54:	08002199 	.word	0x08002199
 8001f58:	08002199 	.word	0x08002199
 8001f5c:	08002199 	.word	0x08002199
 8001f60:	08002199 	.word	0x08002199
 8001f64:	08001f9b 	.word	0x08001f9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f68:	4b90      	ldr	r3, [pc, #576]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f74:	4b8d      	ldr	r3, [pc, #564]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	4a8c      	ldr	r2, [pc, #560]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f86:	e10a      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f88:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f8a:	61bb      	str	r3, [r7, #24]
    break;
 8001f8c:	e107      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001f90:	61bb      	str	r3, [r7, #24]
    break;
 8001f92:	e104      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001f96:	61bb      	str	r3, [r7, #24]
    break;
 8001f98:	e101      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f9a:	4b84      	ldr	r3, [pc, #528]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80da 	beq.w	8002192 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d05a      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x1b2>
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d302      	bcc.n	8001fee <HAL_RCC_GetSysClockFreq+0x106>
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d078      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x1f6>
 8001fec:	e099      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02d      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ffa:	4b6c      	ldr	r3, [pc, #432]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	08db      	lsrs	r3, r3, #3
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	4a6a      	ldr	r2, [pc, #424]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002024:	4b61      	ldr	r3, [pc, #388]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002034:	ed97 6a02 	vldr	s12, [r7, #8]
 8002038:	eddf 5a60 	vldr	s11, [pc, #384]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2d4>
 800203c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002054:	e087      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002060:	eddf 6a57 	vldr	s13, [pc, #348]	; 80021c0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002078:	ed97 6a02 	vldr	s12, [r7, #8]
 800207c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800208c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002098:	e065      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80021c4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80020a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2d4>
 80020c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020dc:	e043      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80021c8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80020ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002100:	ed97 6a02 	vldr	s12, [r7, #8]
 8002104:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800210c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002120:	e021      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80021c4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002144:	ed97 6a02 	vldr	s12, [r7, #8]
 8002148:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2d4>
 800214c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002164:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002170:	3301      	adds	r3, #1
 8002172:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800217e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218a:	ee17 3a90 	vmov	r3, s15
 800218e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002190:	e005      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
    break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800219a:	61bb      	str	r3, [r7, #24]
    break;
 800219c:	bf00      	nop
  }

  return sysclockfreq;
 800219e:	69bb      	ldr	r3, [r7, #24]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3724      	adds	r7, #36	; 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	58024400 	.word	0x58024400
 80021b0:	03d09000 	.word	0x03d09000
 80021b4:	003d0900 	.word	0x003d0900
 80021b8:	017d7840 	.word	0x017d7840
 80021bc:	46000000 	.word	0x46000000
 80021c0:	4c742400 	.word	0x4c742400
 80021c4:	4a742400 	.word	0x4a742400
 80021c8:	4bbebc20 	.word	0x4bbebc20

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021d0:	f001 fd4e 	bl	8003c70 <HAL_RCCEx_GetD1SysClockFreq>
 80021d4:	4601      	mov	r1, r0
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_RCC_GetHCLKFreq+0x30>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_RCC_GetHCLKFreq+0x34>)
 80021ec:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_RCC_GetHCLKFreq+0x34>)
 80021f0:	681b      	ldr	r3, [r3, #0]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	58024400 	.word	0x58024400
 80021fc:	08008044 	.word	0x08008044
 8002200:	24000004 	.word	0x24000004

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002208:	f7ff ffe0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 800220c:	4601      	mov	r1, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	58024400 	.word	0x58024400
 800222c:	08008044 	.word	0x08008044

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002234:	f7ff ffca 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002238:	4601      	mov	r1, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58024400 	.word	0x58024400
 8002258:	08008044 	.word	0x08008044

0800225c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002268:	2300      	movs	r3, #0
 800226a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03d      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002280:	d013      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002286:	d802      	bhi.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800228c:	e01f      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800228e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002292:	d013      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002298:	d01c      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800229a:	e018      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800229c:	4baf      	ldr	r3, [pc, #700]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4aae      	ldr	r2, [pc, #696]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022a8:	e015      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2102      	movs	r1, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fcf9 	bl	8003ca8 <RCCEx_PLL2_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022ba:	e00c      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3324      	adds	r3, #36	; 0x24
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fda2 	bl	8003e0c <RCCEx_PLL3_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022cc:	e003      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
      break;
 80022d2:	e000      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022dc:	4b9f      	ldr	r3, [pc, #636]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e8:	499c      	ldr	r1, [pc, #624]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	650b      	str	r3, [r1, #80]	; 0x50
 80022ee:	e001      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03d      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	2b04      	cmp	r3, #4
 8002306:	d826      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002325 	.word	0x08002325
 8002314:	08002333 	.word	0x08002333
 8002318:	08002345 	.word	0x08002345
 800231c:	0800235d 	.word	0x0800235d
 8002320:	0800235d 	.word	0x0800235d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002324:	4b8d      	ldr	r3, [pc, #564]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	4a8c      	ldr	r2, [pc, #560]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800232a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002330:	e015      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fcb5 	bl	8003ca8 <RCCEx_PLL2_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002342:	e00c      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3324      	adds	r3, #36	; 0x24
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f001 fd5e 	bl	8003e0c <RCCEx_PLL3_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002354:	e003      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
      break;
 800235a:	e000      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800235c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002364:	4b7d      	ldr	r3, [pc, #500]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	f023 0207 	bic.w	r2, r3, #7
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	497a      	ldr	r1, [pc, #488]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002372:	4313      	orrs	r3, r2
 8002374:	650b      	str	r3, [r1, #80]	; 0x50
 8002376:	e001      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d03e      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d01c      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d804      	bhi.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d00d      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800239c:	e01e      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800239e:	2bc0      	cmp	r3, #192	; 0xc0
 80023a0:	d01f      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a6:	d01e      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80023a8:	e018      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	4a6b      	ldr	r2, [pc, #428]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023b6:	e017      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 fc72 	bl	8003ca8 <RCCEx_PLL2_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023c8:	e00e      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3324      	adds	r3, #36	; 0x24
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fd1b 	bl	8003e0c <RCCEx_PLL3_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023da:	e005      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	75fb      	strb	r3, [r7, #23]
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80023e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4958      	ldr	r1, [pc, #352]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	650b      	str	r3, [r1, #80]	; 0x50
 8002400:	e001      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d044      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241c:	d01f      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002422:	d805      	bhi.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242c:	d00e      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800242e:	e01f      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002430:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002434:	d01f      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800243a:	d01e      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800243c:	e018      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	4a46      	ldr	r2, [pc, #280]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800244a:	e017      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fc28 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800245c:	e00e      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3324      	adds	r3, #36	; 0x24
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fcd1 	bl	8003e0c <RCCEx_PLL3_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800246e:	e005      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	75fb      	strb	r3, [r7, #23]
      break;
 8002474:	e002      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800247a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002482:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002490:	4932      	ldr	r1, [pc, #200]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002492:	4313      	orrs	r3, r2
 8002494:	658b      	str	r3, [r1, #88]	; 0x58
 8002496:	e001      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d044      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024b2:	d01f      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80024b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024b8:	d805      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80024be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c2:	d00e      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80024c4:	e01f      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80024c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024ca:	d01f      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80024cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d0:	d01e      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80024d2:	e018      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a20      	ldr	r2, [pc, #128]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024e0:	e017      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fbdd 	bl	8003ca8 <RCCEx_PLL2_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80024f2:	e00e      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fc86 	bl	8003e0c <RCCEx_PLL3_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002504:	e005      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002526:	490d      	ldr	r1, [pc, #52]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002528:	4313      	orrs	r3, r2
 800252a:	658b      	str	r3, [r1, #88]	; 0x58
 800252c:	e001      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d035      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	2b10      	cmp	r3, #16
 8002544:	d00c      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002546:	2b10      	cmp	r3, #16
 8002548:	d802      	bhi.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01b      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800254e:	e017      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d00c      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002554:	2b30      	cmp	r3, #48	; 0x30
 8002556:	d018      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002558:	e012      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800255a:	bf00      	nop
 800255c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002560:	4baf      	ldr	r3, [pc, #700]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	4aae      	ldr	r2, [pc, #696]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800256c:	e00e      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	2102      	movs	r1, #2
 8002574:	4618      	mov	r0, r3
 8002576:	f001 fb97 	bl	8003ca8 <RCCEx_PLL2_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800257e:	e005      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	75fb      	strb	r3, [r7, #23]
      break;
 8002584:	e002      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800258a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002592:	4ba3      	ldr	r3, [pc, #652]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	49a0      	ldr	r1, [pc, #640]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025a4:	e001      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d042      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025be:	d01f      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d805      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	d00e      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x392>
 80025d0:	e01f      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80025d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025d6:	d01f      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80025d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025dc:	d01e      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80025de:	e018      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e0:	4b8f      	ldr	r3, [pc, #572]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4a8e      	ldr	r2, [pc, #568]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025ec:	e017      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fb57 	bl	8003ca8 <RCCEx_PLL2_Config>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025fe:	e00e      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3324      	adds	r3, #36	; 0x24
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f001 fc00 	bl	8003e0c <RCCEx_PLL3_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002610:	e005      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
      break;
 8002616:	e002      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002618:	bf00      	nop
 800261a:	e000      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800261c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002628:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	497b      	ldr	r1, [pc, #492]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	650b      	str	r3, [r1, #80]	; 0x50
 8002636:	e001      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d042      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002650:	d01b      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002656:	d805      	bhi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d022      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002662:	e01b      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002664:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002668:	d01d      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800266a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266e:	d01c      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002674:	d01b      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002676:	e011      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fb12 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002688:	e012      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3324      	adds	r3, #36	; 0x24
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fbbb 	bl	8003e0c <RCCEx_PLL3_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800269a:	e009      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
      break;
 80026a0:	e006      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80026a2:	bf00      	nop
 80026a4:	e004      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80026ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	4957      	ldr	r1, [pc, #348]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	650b      	str	r3, [r1, #80]	; 0x50
 80026c8:	e001      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d044      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e4:	d01b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80026e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ea:	d805      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80026f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80026f6:	e01b      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fc:	d01d      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d01c      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002708:	d01b      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800270a:	e011      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fac8 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800271c:	e012      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3324      	adds	r3, #36	; 0x24
 8002722:	2101      	movs	r1, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fb71 	bl	8003e0c <RCCEx_PLL3_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800272e:	e009      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	75fb      	strb	r3, [r7, #23]
      break;
 8002734:	e006      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002736:	bf00      	nop
 8002738:	e004      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002758:	4931      	ldr	r1, [pc, #196]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	658b      	str	r3, [r1, #88]	; 0x58
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02d      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002778:	d005      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800277a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800277e:	d009      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002784:	e00f      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	4a25      	ldr	r2, [pc, #148]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002792:	e00c      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fa84 	bl	8003ca8 <RCCEx_PLL2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027a4:	e003      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
      break;
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80027ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c0:	4917      	ldr	r1, [pc, #92]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	650b      	str	r3, [r1, #80]	; 0x50
 80027c6:	e001      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d035      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d81b      	bhi.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80027e0:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	08002825 	.word	0x08002825
 80027ec:	080027f9 	.word	0x080027f9
 80027f0:	08002807 	.word	0x08002807
 80027f4:	08002825 	.word	0x08002825
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002804:	e00f      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	2102      	movs	r1, #2
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fa4b 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002816:	e006      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
      break;
 800281c:	e003      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800281e:	bf00      	nop
 8002820:	58024400 	.word	0x58024400
      break;
 8002824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800282c:	4bba      	ldr	r3, [pc, #744]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	f023 0203 	bic.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	49b7      	ldr	r1, [pc, #732]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800283e:	e001      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8086 	beq.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002852:	4bb2      	ldr	r3, [pc, #712]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4ab1      	ldr	r2, [pc, #708]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285e:	f7fe faaf 	bl	8000dc0 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002864:	e009      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe faab 	bl	8000dc0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	; 0x64
 8002872:	d902      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	75fb      	strb	r3, [r7, #23]
        break;
 8002878:	e005      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287a:	4ba8      	ldr	r3, [pc, #672]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ef      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d166      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800288c:	4ba2      	ldr	r3, [pc, #648]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800288e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002896:	4053      	eors	r3, r2
 8002898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a0:	4b9d      	ldr	r3, [pc, #628]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028aa:	4b9b      	ldr	r3, [pc, #620]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a9a      	ldr	r2, [pc, #616]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b6:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a97      	ldr	r2, [pc, #604]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80028c2:	4a95      	ldr	r2, [pc, #596]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d115      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fa74 	bl	8000dc0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028da:	e00b      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe fa70 	bl	8000dc0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d902      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	75fb      	strb	r3, [r7, #23]
            break;
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d126      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800290c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002914:	d10d      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002916:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002924:	0919      	lsrs	r1, r3, #4
 8002926:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002928:	400b      	ands	r3, r1
 800292a:	497b      	ldr	r1, [pc, #492]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800292c:	4313      	orrs	r3, r2
 800292e:	610b      	str	r3, [r1, #16]
 8002930:	e005      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002932:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	4a78      	ldr	r2, [pc, #480]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002938:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800293c:	6113      	str	r3, [r2, #16]
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	4972      	ldr	r1, [pc, #456]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	670b      	str	r3, [r1, #112]	; 0x70
 8002952:	e004      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	75bb      	strb	r3, [r7, #22]
 8002958:	e001      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d07d      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296e:	2b28      	cmp	r3, #40	; 0x28
 8002970:	d866      	bhi.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002a47 	.word	0x08002a47
 800297c:	08002a41 	.word	0x08002a41
 8002980:	08002a41 	.word	0x08002a41
 8002984:	08002a41 	.word	0x08002a41
 8002988:	08002a41 	.word	0x08002a41
 800298c:	08002a41 	.word	0x08002a41
 8002990:	08002a41 	.word	0x08002a41
 8002994:	08002a41 	.word	0x08002a41
 8002998:	08002a1d 	.word	0x08002a1d
 800299c:	08002a41 	.word	0x08002a41
 80029a0:	08002a41 	.word	0x08002a41
 80029a4:	08002a41 	.word	0x08002a41
 80029a8:	08002a41 	.word	0x08002a41
 80029ac:	08002a41 	.word	0x08002a41
 80029b0:	08002a41 	.word	0x08002a41
 80029b4:	08002a41 	.word	0x08002a41
 80029b8:	08002a2f 	.word	0x08002a2f
 80029bc:	08002a41 	.word	0x08002a41
 80029c0:	08002a41 	.word	0x08002a41
 80029c4:	08002a41 	.word	0x08002a41
 80029c8:	08002a41 	.word	0x08002a41
 80029cc:	08002a41 	.word	0x08002a41
 80029d0:	08002a41 	.word	0x08002a41
 80029d4:	08002a41 	.word	0x08002a41
 80029d8:	08002a47 	.word	0x08002a47
 80029dc:	08002a41 	.word	0x08002a41
 80029e0:	08002a41 	.word	0x08002a41
 80029e4:	08002a41 	.word	0x08002a41
 80029e8:	08002a41 	.word	0x08002a41
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	08002a41 	.word	0x08002a41
 80029f4:	08002a41 	.word	0x08002a41
 80029f8:	08002a47 	.word	0x08002a47
 80029fc:	08002a41 	.word	0x08002a41
 8002a00:	08002a41 	.word	0x08002a41
 8002a04:	08002a41 	.word	0x08002a41
 8002a08:	08002a41 	.word	0x08002a41
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002a41 	.word	0x08002a41
 8002a14:	08002a41 	.word	0x08002a41
 8002a18:	08002a47 	.word	0x08002a47
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f940 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3324      	adds	r3, #36	; 0x24
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f9e9 	bl	8003e0c <RCCEx_PLL3_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e003      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	75fb      	strb	r3, [r7, #23]
      break;
 8002a44:	e000      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a4e:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5a:	492f      	ldr	r1, [pc, #188]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	654b      	str	r3, [r1, #84]	; 0x54
 8002a60:	e001      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d037      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d820      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002ac3 	.word	0x08002ac3
 8002a84:	08002a99 	.word	0x08002a99
 8002a88:	08002aab 	.word	0x08002aab
 8002a8c:	08002ac3 	.word	0x08002ac3
 8002a90:	08002ac3 	.word	0x08002ac3
 8002a94:	08002ac3 	.word	0x08002ac3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 f902 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002aa8:	e00c      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3324      	adds	r3, #36	; 0x24
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f9ab 	bl	8003e0c <RCCEx_PLL3_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002aba:	e003      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	4910      	ldr	r1, [pc, #64]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	654b      	str	r3, [r1, #84]	; 0x54
 8002adc:	e001      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d827      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b4f 	.word	0x08002b4f
 8002b04:	08002b25 	.word	0x08002b25
 8002b08:	08002b37 	.word	0x08002b37
 8002b0c:	08002b4f 	.word	0x08002b4f
 8002b10:	08002b4f 	.word	0x08002b4f
 8002b14:	08002b4f 	.word	0x08002b4f
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	58024800 	.word	0x58024800
 8002b20:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f8bc 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b34:	e00c      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3324      	adds	r3, #36	; 0x24
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f965 	bl	8003e0c <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b56:	4bb3      	ldr	r3, [pc, #716]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	49af      	ldr	r1, [pc, #700]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	658b      	str	r3, [r1, #88]	; 0x58
 8002b6a:	e001      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d044      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b86:	d01b      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8c:	d805      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d022      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002b98:	e01b      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d01c      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002baa:	d01b      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002bac:	e011      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f877 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002bbe:	e012      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f920 	bl	8003e0c <RCCEx_PLL3_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002bd0:	e009      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd6:	e006      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e004      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e002      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bec:	4b8d      	ldr	r3, [pc, #564]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	498a      	ldr	r1, [pc, #552]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8002c00:	e001      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d01b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c22:	d805      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d022      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002c2e:	e01b      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d01d      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002c36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c3a:	d01c      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c40:	d01b      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002c42:	e011      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f82c 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002c54:	e012      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3324      	adds	r3, #36	; 0x24
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 f8d5 	bl	8003e0c <RCCEx_PLL3_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002c66:	e009      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6c:	e006      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e004      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c82:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c90:	4964      	ldr	r1, [pc, #400]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	658b      	str	r3, [r1, #88]	; 0x58
 8002c96:	e001      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d044      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb2:	d01b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb8:	d805      	bhi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d022      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d01d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002ccc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002cd0:	d01c      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002cd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002cd6:	d01b      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002cd8:	e011      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 ffe1 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002cea:	e012      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3324      	adds	r3, #36	; 0x24
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f88a 	bl	8003e0c <RCCEx_PLL3_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002cfc:	e009      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
      break;
 8002d02:	e006      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002d04:	bf00      	nop
 8002d06:	e004      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002d08:	bf00      	nop
 8002d0a:	e002      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d18:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d26:	493f      	ldr	r1, [pc, #252]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	658b      	str	r3, [r1, #88]	; 0x58
 8002d2c:	e001      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01b      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3324      	adds	r3, #36	; 0x24
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f85b 	bl	8003e0c <RCCEx_PLL3_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75bb      	strb	r3, [r7, #22]
 8002d60:	e009      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d70:	492c      	ldr	r1, [pc, #176]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8c:	d10b      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 f839 	bl	8003e0c <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00c      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75bb      	strb	r3, [r7, #22]
 8002da4:	e009      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db4:	491b      	ldr	r1, [pc, #108]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d032      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d00d      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8002dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd6:	d016      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ff60 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002dec:	e00c      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3324      	adds	r3, #36	; 0x24
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f809 	bl	8003e0c <RCCEx_PLL3_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002dfe:	e003      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
      break;
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8002e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e1c:	4901      	ldr	r1, [pc, #4]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	658b      	str	r3, [r1, #88]	; 0x58
 8002e22:	e003      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02f      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e42:	d00c      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e48:	d015      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e4e:	d10f      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e50:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	4a78      	ldr	r2, [pc, #480]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3324      	adds	r3, #36	; 0x24
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 ffd1 	bl	8003e0c <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8c:	496a      	ldr	r1, [pc, #424]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	654b      	str	r3, [r1, #84]	; 0x54
 8002e92:	e001      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d029      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d007      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 feed 	bl	8003ca8 <RCCEx_PLL2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002ee0:	4b55      	ldr	r3, [pc, #340]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	4952      	ldr	r1, [pc, #328]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ef2:	e001      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff7e 	bl	8003e0c <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02f      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	d802      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d00f      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f46:	d00e      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002f56:	e007      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f5c:	e004      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7a:	492f      	ldr	r1, [pc, #188]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002f80:	e001      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4926      	ldr	r1, [pc, #152]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fbe:	491e      	ldr	r1, [pc, #120]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	4916      	ldr	r1, [pc, #88]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ff4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ff8:	6113      	str	r3, [r2, #16]
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da08      	bge.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	4906      	ldr	r1, [pc, #24]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003024:	7dbb      	ldrb	r3, [r7, #22]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	58024400 	.word	0x58024400

0800303c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b090      	sub	sp, #64	; 0x40
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d150      	bne.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800304c:	4ba1      	ldr	r3, [pc, #644]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2b04      	cmp	r3, #4
 800305a:	d844      	bhi.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003079 	.word	0x08003079
 8003068:	08003089 	.word	0x08003089
 800306c:	08003099 	.word	0x08003099
 8003070:	080030e1 	.word	0x080030e1
 8003074:	080030a9 	.word	0x080030a9
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fcab 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003086:	e200      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003088:	f107 0318 	add.w	r3, r7, #24
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fa0b 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003096:	e1f8      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fb4f 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030a6:	e1f0      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80030a8:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80030b8:	4b87      	ldr	r3, [pc, #540]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80030bc:	e1e5      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c4:	d102      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030ca:	e1de      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d2:	d102      	bne.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80030d4:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030d8:	e1d7      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030de:	e1d4      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80030e0:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030e4:	e1d1      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030ea:	bf00      	nop
 80030ec:	e1cd      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d14f      	bne.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80030f6:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d01c      	beq.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d804      	bhi.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d00e      	beq.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8003112:	e03c      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8003114:	2bc0      	cmp	r3, #192	; 0xc0
 8003116:	d037      	beq.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d018      	beq.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800311e:	e036      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fc57 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800312e:	e1ac      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f9b7 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800313e:	e1a4      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fafb 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800314e:	e19c      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003150:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003158:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003160:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003164:	e191      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316c:	d102      	bne.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003172:	e18a      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317a:	d102      	bne.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800317c:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003180:	e183      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003186:	e180      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003188:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800318c:	e17d      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003192:	bf00      	nop
 8003194:	e179      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319c:	d153      	bne.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800319e:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d01f      	beq.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b4:	d805      	bhi.n	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80031ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031be:	d00f      	beq.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80031c0:	e03d      	b.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80031c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031c6:	d037      	beq.n	8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80031c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031cc:	d018      	beq.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80031ce:	e036      	b.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80031d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fbff 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031de:	e154      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80031e0:	f107 0318 	add.w	r3, r7, #24
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f95f 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031ee:	e14c      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 faa3 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031fe:	e144      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003208:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003214:	e139      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321c:	d102      	bne.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003222:	e132      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322a:	d102      	bne.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003230:	e12b      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003236:	e128      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800323c:	e125      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003242:	bf00      	nop
 8003244:	e121      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d15d      	bne.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800324e:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003256:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800325e:	d01f      	beq.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003264:	d805      	bhi.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800326a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800326e:	d00f      	beq.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8003270:	e047      	b.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8003272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003276:	d041      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8003278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327c:	d018      	beq.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800327e:	e040      	b.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fba7 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800328e:	e0fc      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003290:	f107 0318 	add.w	r3, r7, #24
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f907 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800329e:	e0f4      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa4b 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032ae:	e0ec      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80032b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80032c4:	e0e1      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80032ce:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032d2:	e0da      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80032d4:	58024400 	.word	0x58024400
 80032d8:	03d09000 	.word	0x03d09000
 80032dc:	003d0900 	.word	0x003d0900
 80032e0:	017d7840 	.word	0x017d7840
 80032e4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80032e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ee:	d102      	bne.n	80032f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032f4:	e0c9      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032fa:	e0c6      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003300:	e0c3      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003306:	bf00      	nop
 8003308:	e0bf      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	d153      	bne.n	80033ba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003312:	4b62      	ldr	r3, [pc, #392]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d01f      	beq.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d805      	bhi.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d00f      	beq.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003334:	e03d      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8003336:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800333a:	d037      	beq.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003340:	d018      	beq.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003342:	e036      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fb45 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003352:	e09a      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003354:	f107 0318 	add.w	r3, r7, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f8a5 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003362:	e092      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f9e9 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003372:	e08a      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003374:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800337c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003388:	e07f      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003390:	d102      	bne.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8003392:	4b44      	ldr	r3, [pc, #272]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003396:	e078      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339e:	d102      	bne.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80033a0:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033a4:	e071      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033aa:	e06e      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033b0:	e06b      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033b6:	bf00      	nop
 80033b8:	e067      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c0:	d13d      	bne.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d00c      	beq.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80033d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d8:	d011      	beq.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d12b      	bne.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033de:	f107 0318 	add.w	r3, r7, #24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f860 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033ec:	e04d      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f9a4 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033fc:	e045      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003406:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003412:	e03a      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341a:	d102      	bne.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003420:	e033      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003428:	d102      	bne.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800342e:	e02c      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003434:	e029      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800343a:	bf00      	nop
 800343c:	e025      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d11f      	bne.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fab8 	bl	80039d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800346c:	e00d      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800346e:	f107 0318 	add.w	r3, r7, #24
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f818 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800347c:	e005      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003482:	bf00      	nop
 8003484:	e001      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800348c:	4618      	mov	r0, r3
 800348e:	3740      	adds	r7, #64	; 0x40
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	017d7840 	.word	0x017d7840
 8003498:	00bb8000 	.word	0x00bb8000
 800349c:	58024400 	.word	0x58024400
 80034a0:	03d09000 	.word	0x03d09000
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b0:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80034ba:	4b9b      	ldr	r3, [pc, #620]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	0b1b      	lsrs	r3, r3, #12
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80034c6:	4b98      	ldr	r3, [pc, #608]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034d0:	4b95      	ldr	r3, [pc, #596]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 810a 	beq.w	8003708 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d05a      	beq.n	80035b0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d302      	bcc.n	8003504 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d078      	beq.n	80035f4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003502:	e099      	b.n	8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003504:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02d      	beq.n	800356c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003510:	4b85      	ldr	r3, [pc, #532]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	4a84      	ldr	r2, [pc, #528]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a03 	vldr	s12, [r7, #12]
 800354e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800356a:	e087      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003592:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ae:	e065      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035f2:	e043      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	ed97 6a03 	vldr	s12, [r7, #12]
 800361a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003636:	e021      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a03 	vldr	s12, [r7, #12]
 800365e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800367a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003696:	edd7 6a07 	vldr	s13, [r7, #28]
 800369a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a2:	ee17 2a90 	vmov	r2, s15
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 2a90 	vmov	r2, s15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	0e1b      	lsrs	r3, r3, #24
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fe:	ee17 2a90 	vmov	r2, s15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003706:	e008      	b.n	800371a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
 800372c:	03d09000 	.word	0x03d09000
 8003730:	46000000 	.word	0x46000000
 8003734:	4c742400 	.word	0x4c742400
 8003738:	4a742400 	.word	0x4a742400
 800373c:	4bbebc20 	.word	0x4bbebc20

08003740 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003748:	4b9d      	ldr	r3, [pc, #628]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003752:	4b9b      	ldr	r3, [pc, #620]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	0d1b      	lsrs	r3, r3, #20
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800375e:	4b98      	ldr	r3, [pc, #608]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003768:	4b95      	ldr	r3, [pc, #596]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003780:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 810a 	beq.w	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d05a      	beq.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003792:	2b01      	cmp	r3, #1
 8003794:	d302      	bcc.n	800379c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003796:	2b02      	cmp	r3, #2
 8003798:	d078      	beq.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800379a:	e099      	b.n	80038d0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800379c:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02d      	beq.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a8:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	4a84      	ldr	r2, [pc, #528]	; (80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b7b      	ldr	r3, [pc, #492]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003802:	e087      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039cc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003846:	e065      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388a:	e043      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b48      	ldr	r3, [pc, #288]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ce:	e021      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003912:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	0a5b      	lsrs	r3, r3, #9
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800392e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393a:	ee17 2a90 	vmov	r2, s15
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800395c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003968:	ee17 2a90 	vmov	r2, s15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	0e1b      	lsrs	r3, r3, #24
 8003976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398a:	edd7 6a07 	vldr	s13, [r7, #28]
 800398e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003996:	ee17 2a90 	vmov	r2, s15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800399e:	e008      	b.n	80039b2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
}
 80039b2:	bf00      	nop
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	03d09000 	.word	0x03d09000
 80039c8:	46000000 	.word	0x46000000
 80039cc:	4c742400 	.word	0x4c742400
 80039d0:	4a742400 	.word	0x4a742400
 80039d4:	4bbebc20 	.word	0x4bbebc20

080039d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e0:	4b9d      	ldr	r3, [pc, #628]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80039ea:	4b9b      	ldr	r3, [pc, #620]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80039f6:	4b98      	ldr	r3, [pc, #608]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a00:	4b95      	ldr	r3, [pc, #596]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 810a 	beq.w	8003c38 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d05a      	beq.n	8003ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d302      	bcc.n	8003a34 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d078      	beq.n	8003b24 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003a32:	e099      	b.n	8003b68 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02d      	beq.n	8003a9c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a40:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a84      	ldr	r2, [pc, #528]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a9a:	e087      	b.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ade:	e065      	b.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b22:	e043      	b.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b66:	e021      	b.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003baa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd2:	ee17 2a90 	vmov	r2, s15
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c00:	ee17 2a90 	vmov	r2, s15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2e:	ee17 2a90 	vmov	r2, s15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	; 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	03d09000 	.word	0x03d09000
 8003c60:	46000000 	.word	0x46000000
 8003c64:	4c742400 	.word	0x4c742400
 8003c68:	4a742400 	.word	0x4a742400
 8003c6c:	4bbebc20 	.word	0x4bbebc20

08003c70 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c74:	f7fe f938 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003c78:	4601      	mov	r1, r0
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	fa21 f303 	lsr.w	r3, r1, r3
 8003c90:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003c92:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	08008044 	.word	0x08008044
 8003ca4:	24000000 	.word	0x24000000

08003ca8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cb6:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d101      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e099      	b.n	8003dfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd2:	f7fd f875 	bl	8000dc0 <HAL_GetTick>
 8003cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cda:	f7fd f871 	bl	8000dc0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e086      	b.n	8003dfa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cec:	4b45      	ldr	r3, [pc, #276]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cf8:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	031b      	lsls	r3, r3, #12
 8003d06:	493f      	ldr	r1, [pc, #252]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	025b      	lsls	r3, r3, #9
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d3c:	4931      	ldr	r1, [pc, #196]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d42:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	492d      	ldr	r1, [pc, #180]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f023 0220 	bic.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4928      	ldr	r1, [pc, #160]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <RCCEx_PLL2_Config+0x160>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	69d2      	ldr	r2, [r2, #28]
 8003d7e:	00d2      	lsls	r2, r2, #3
 8003d80:	4920      	ldr	r1, [pc, #128]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da4:	e00f      	b.n	8003dc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003db8:	e005      	b.n	8003dc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fc fff5 	bl	8000dc0 <HAL_GetTick>
 8003dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003dda:	f7fc fff1 	bl	8000dc0 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	58024400 	.word	0x58024400
 8003e08:	ffff0007 	.word	0xffff0007

08003e0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e1a:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d101      	bne.n	8003e2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e099      	b.n	8003f5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e2a:	4b4f      	ldr	r3, [pc, #316]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4e      	ldr	r2, [pc, #312]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fc ffc3 	bl	8000dc0 <HAL_GetTick>
 8003e3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e3c:	e008      	b.n	8003e50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e3e:	f7fc ffbf 	bl	8000dc0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e086      	b.n	8003f5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	051b      	lsls	r3, r3, #20
 8003e6a:	493f      	ldr	r1, [pc, #252]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	025b      	lsls	r3, r3, #9
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ea0:	4931      	ldr	r1, [pc, #196]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	492d      	ldr	r1, [pc, #180]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4928      	ldr	r1, [pc, #160]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <RCCEx_PLL3_Config+0x160>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	69d2      	ldr	r2, [r2, #28]
 8003ee2:	00d2      	lsls	r2, r2, #3
 8003ee4:	4920      	ldr	r1, [pc, #128]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003efc:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f08:	e00f      	b.n	8003f2a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d106      	bne.n	8003f1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f1c:	e005      	b.n	8003f2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f36:	f7fc ff43 	bl	8000dc0 <HAL_GetTick>
 8003f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f3c:	e008      	b.n	8003f50 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f3e:	f7fc ff3f 	bl	8000dc0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e006      	b.n	8003f5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <RCCEx_PLL3_Config+0x15c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	ffff0007 	.word	0xffff0007

08003f70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07c      	b.n	800407c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fc fc30 	bl	8000808 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f867 	bl	8004084 <HAL_SD_InitCard>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e05d      	b.n	800407c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fde8 	bl	8004b9c <HAL_SD_GetCardStatus>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e052      	b.n	800407c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8003fd6:	7e3b      	ldrb	r3, [r7, #24]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003fdc:	7e7b      	ldrb	r3, [r7, #25]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d10a      	bne.n	8004000 <HAL_SD_Init+0x90>
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_SD_Init+0x86>
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ffe:	e00b      	b.n	8004018 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d104      	bne.n	8004012 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004010:	e002      	b.n	8004018 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fe80 	bl	8004d24 <HAL_SD_ConfigWideBusOperation>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e026      	b.n	800407c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800402e:	f7fc fec7 	bl	8000dc0 <HAL_GetTick>
 8004032:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004034:	e011      	b.n	800405a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8004036:	f7fc fec3 	bl	8000dc0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d109      	bne.n	800405a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e010      	b.n	800407c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fef2 	bl	8004e44 <HAL_SD_GetCardState>
 8004060:	4603      	mov	r3, r0
 8004062:	2b04      	cmp	r3, #4
 8004064:	d1e7      	bne.n	8004036 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b090      	sub	sp, #64	; 0x40
 8004088:	af04      	add	r7, sp, #16
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800409c:	23fa      	movs	r3, #250	; 0xfa
 800409e:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d107      	bne.n	80040b8 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0210 	orr.w	r2, r2, #16
 80040b6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681d      	ldr	r5, [r3, #0]
 80040bc:	466c      	mov	r4, sp
 80040be:	f107 0318 	add.w	r3, r7, #24
 80040c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040ca:	f107 030c 	add.w	r3, r7, #12
 80040ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d0:	4628      	mov	r0, r5
 80040d2:	f002 fb33 	bl	800673c <SDMMC_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80040dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e04d      	b.n	8004184 <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fb6d 	bl	80067cc <SDMMC_PowerState_ON>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80040f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e03f      	b.n	8004184 <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8004104:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004108:	f7fe ff98 	bl	800303c <HAL_RCCEx_GetPeriphCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_SD_InitCard+0x108>)
 8004110:	fba3 2302 	umull	r2, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_SD_InitCard+0x10c>)
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	3301      	adds	r3, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fe55 	bl	8000dd8 <HAL_Delay>
 800412e:	e002      	b.n	8004136 <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8004130:	2002      	movs	r0, #2
 8004132:	f7fc fe51 	bl	8000dd8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ff62 	bl	8005000 <SD_PowerON>
 800413c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e013      	b.n	8004184 <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fe91 	bl	8004e84 <SD_InitCard>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bdb0      	pop	{r4, r5, r7, pc}
 800418c:	10624dd3 	.word	0x10624dd3
 8004190:	00012110 	.word	0x00012110

08004194 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b092      	sub	sp, #72	; 0x48
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80041a2:	f7fc fe0d 	bl	8000dc0 <HAL_GetTick>
 80041a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e185      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f040 8178 	bne.w	80044c4 <HAL_SD_ReadBlocks+0x330>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	441a      	add	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d907      	bls.n	80041f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e16c      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2203      	movs	r2, #3
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d002      	beq.n	8004216 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	025b      	lsls	r3, r3, #9
 8004214:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800421e:	4618      	mov	r0, r3
 8004220:	f002 fb6a 	bl	80068f8 <SDMMC_CmdBlockLength>
 8004224:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00f      	beq.n	800424c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a91      	ldr	r2, [pc, #580]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e142      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	025b      	lsls	r3, r3, #9
 8004256:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004258:	2390      	movs	r3, #144	; 0x90
 800425a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800425c:	2302      	movs	r3, #2
 800425e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f107 0214 	add.w	r2, r7, #20
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f002 fb14 	bl	80068a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004286:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d90a      	bls.n	80042a4 <HAL_SD_ReadBlocks+0x110>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800429a:	4618      	mov	r0, r3
 800429c:	f002 fb72 	bl	8006984 <SDMMC_CmdReadMultiBlock>
 80042a0:	6478      	str	r0, [r7, #68]	; 0x44
 80042a2:	e009      	b.n	80042b8 <HAL_SD_ReadBlocks+0x124>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b0:	4618      	mov	r0, r3
 80042b2:	f002 fb44 	bl	800693e <SDMMC_CmdReadSingleBlock>
 80042b6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d012      	beq.n	80042e4 <HAL_SD_ReadBlocks+0x150>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6d      	ldr	r2, [pc, #436]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0f6      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80042e8:	e058      	b.n	800439c <HAL_SD_ReadBlocks+0x208>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d033      	beq.n	8004360 <HAL_SD_ReadBlocks+0x1cc>
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	2b1f      	cmp	r3, #31
 80042fc:	d930      	bls.n	8004360 <HAL_SD_ReadBlocks+0x1cc>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80042fe:	2300      	movs	r3, #0
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	e027      	b.n	8004354 <HAL_SD_ReadBlocks+0x1c0>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fa41 	bl	8006790 <SDMMC_ReadFIFO>
 800430e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	b2da      	uxtb	r2, r3
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	3301      	adds	r3, #1
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	b2da      	uxtb	r2, r3
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	3301      	adds	r3, #1
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2da      	uxtb	r2, r3
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	3301      	adds	r3, #1
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	0e1b      	lsrs	r3, r3, #24
 8004342:	b2da      	uxtb	r2, r3
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	3301      	adds	r3, #1
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	3301      	adds	r3, #1
 8004352:	643b      	str	r3, [r7, #64]	; 0x40
 8004354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004356:	2b07      	cmp	r3, #7
 8004358:	d9d4      	bls.n	8004304 <HAL_SD_ReadBlocks+0x170>
        }
        dataremaining -= 32U;
 800435a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435c:	3b20      	subs	r3, #32
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004360:	f7fc fd2e 	bl	8000dc0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800436c:	429a      	cmp	r2, r3
 800436e:	d902      	bls.n	8004376 <HAL_SD_ReadBlocks+0x1e2>
 8004370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d112      	bne.n	800439c <HAL_SD_ReadBlocks+0x208>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e09a      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d09f      	beq.n	80042ea <HAL_SD_ReadBlocks+0x156>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b8:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d022      	beq.n	800440e <HAL_SD_ReadBlocks+0x27a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d91f      	bls.n	800440e <HAL_SD_ReadBlocks+0x27a>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d01b      	beq.n	800440e <HAL_SD_ReadBlocks+0x27a>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f002 fb3c 	bl	8006a58 <SDMMC_CmdStopTransfer>
 80043e0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80043e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <HAL_SD_ReadBlocks+0x27a>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e061      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	f043 0208 	orr.w	r2, r3, #8
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e047      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_SD_ReadBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <HAL_SD_ReadBlocks+0x2e4>)
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f043 0202 	orr.w	r2, r3, #2
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e02d      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
 8004476:	bf00      	nop
 8004478:	1fe00fff 	.word	0x1fe00fff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <HAL_SD_ReadBlocks+0x31c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <HAL_SD_ReadBlocks+0x348>)
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e010      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_SD_ReadBlocks+0x34c>)
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e006      	b.n	80044d2 <HAL_SD_ReadBlocks+0x33e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3748      	adds	r7, #72	; 0x48
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	1fe00fff 	.word	0x1fe00fff
 80044e0:	18000f3a 	.word	0x18000f3a

080044e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b092      	sub	sp, #72	; 0x48
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044f2:	f7fc fc65 	bl	8000dc0 <HAL_GetTick>
 80044f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e189      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	f040 817c 	bne.w	800481c <HAL_SD_WriteBlocks+0x338>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800452a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	441a      	add	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	429a      	cmp	r2, r3
 8004536:	d907      	bls.n	8004548 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e170      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2203      	movs	r2, #3
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800456e:	4618      	mov	r0, r3
 8004570:	f002 f9c2 	bl	80068f8 <SDMMC_CmdBlockLength>
 8004574:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a93      	ldr	r2, [pc, #588]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e146      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
 80045a0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	025b      	lsls	r3, r3, #9
 80045a6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80045a8:	2390      	movs	r3, #144	; 0x90
 80045aa:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f107 0218 	add.w	r2, r7, #24
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f002 f96c 	bl	80068a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d6:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d90a      	bls.n	80045f4 <HAL_SD_WriteBlocks+0x110>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ea:	4618      	mov	r0, r3
 80045ec:	f002 fa10 	bl	8006a10 <SDMMC_CmdWriteMultiBlock>
 80045f0:	6478      	str	r0, [r7, #68]	; 0x44
 80045f2:	e009      	b.n	8004608 <HAL_SD_WriteBlocks+0x124>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2210      	movs	r2, #16
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004600:	4618      	mov	r0, r3
 8004602:	f002 f9e2 	bl	80069ca <SDMMC_CmdWriteSingleBlock>
 8004606:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <HAL_SD_WriteBlocks+0x150>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6f      	ldr	r2, [pc, #444]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0fa      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004638:	e05c      	b.n	80046f4 <HAL_SD_WriteBlocks+0x210>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d037      	beq.n	80046b8 <HAL_SD_WriteBlocks+0x1d4>
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	2b1f      	cmp	r3, #31
 800464c:	d934      	bls.n	80046b8 <HAL_SD_WriteBlocks+0x1d4>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800464e:	2300      	movs	r3, #0
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
 8004652:	e02b      	b.n	80046ac <HAL_SD_WriteBlocks+0x1c8>
        {
          data = (uint32_t)(*tempbuff);
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	3301      	adds	r3, #1
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	3301      	adds	r3, #1
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	041a      	lsls	r2, r3, #16
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	3301      	adds	r3, #1
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	061a      	lsls	r2, r3, #24
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	3301      	adds	r3, #1
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f107 0214 	add.w	r2, r7, #20
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f002 f882 	bl	80067aa <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	3301      	adds	r3, #1
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d9d0      	bls.n	8004654 <HAL_SD_WriteBlocks+0x170>
        }
        dataremaining -= 32U;
 80046b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b4:	3b20      	subs	r3, #32
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80046b8:	f7fc fb82 	bl	8000dc0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <HAL_SD_WriteBlocks+0x1ea>
 80046c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d112      	bne.n	80046f4 <HAL_SD_WriteBlocks+0x210>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e09a      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fa:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d09b      	beq.n	800463a <HAL_SD_WriteBlocks+0x156>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004710:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <HAL_SD_WriteBlocks+0x282>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d91f      	bls.n	8004766 <HAL_SD_WriteBlocks+0x282>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	2b03      	cmp	r3, #3
 800472c:	d01b      	beq.n	8004766 <HAL_SD_WriteBlocks+0x282>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f002 f990 	bl	8006a58 <SDMMC_CmdStopTransfer>
 8004738:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800473a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_SD_WriteBlocks+0x282>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e061      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d012      	beq.n	800479a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f043 0208 	orr.w	r2, r3, #8
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e047      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_SD_WriteBlocks+0x2f0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_SD_WriteBlocks+0x2ec>)
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	f043 0202 	orr.w	r2, r3, #2
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e02d      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
 80047ce:	bf00      	nop
 80047d0:	1fe00fff 	.word	0x1fe00fff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d012      	beq.n	8004808 <HAL_SD_WriteBlocks+0x324>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <HAL_SD_WriteBlocks+0x350>)
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e010      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_SD_WriteBlocks+0x354>)
 800480e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e006      	b.n	800482a <HAL_SD_WriteBlocks+0x346>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3748      	adds	r7, #72	; 0x48
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	1fe00fff 	.word	0x1fe00fff
 8004838:	18000f3a 	.word	0x18000f3a

0800483c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	0f9b      	lsrs	r3, r3, #30
 8004864:	b2da      	uxtb	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486e:	0e9b      	lsrs	r3, r3, #26
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	b2da      	uxtb	r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	b2da      	uxtb	r2, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	b2da      	uxtb	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b4:	0d1b      	lsrs	r3, r3, #20
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d2:	0bdb      	lsrs	r3, r3, #15
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	0b9b      	lsrs	r3, r3, #14
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f6:	0b5b      	lsrs	r3, r3, #13
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004908:	0b1b      	lsrs	r3, r3, #12
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d163      	bne.n	80049ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004928:	009a      	lsls	r2, r3, #2
 800492a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800492e:	4013      	ands	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004934:	0f92      	lsrs	r2, r2, #30
 8004936:	431a      	orrs	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004940:	0edb      	lsrs	r3, r3, #27
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	b2da      	uxtb	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004952:	0e1b      	lsrs	r3, r3, #24
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	b2da      	uxtb	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004964:	0d5b      	lsrs	r3, r3, #21
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	b2da      	uxtb	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004976:	0c9b      	lsrs	r3, r3, #18
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	b2da      	uxtb	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004988:	0bdb      	lsrs	r3, r3, #15
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	b2da      	uxtb	r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	7e1b      	ldrb	r3, [r3, #24]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	3302      	adds	r3, #2
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80049b6:	fb02 f203 	mul.w	r2, r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	7a1b      	ldrb	r3, [r3, #8]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2201      	movs	r2, #1
 80049ca:	409a      	lsls	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049d8:	0a52      	lsrs	r2, r2, #9
 80049da:	fb02 f203 	mul.w	r2, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	659a      	str	r2, [r3, #88]	; 0x58
 80049ea:	e031      	b.n	8004a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d11d      	bne.n	8004a30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	029a      	lsls	r2, r3, #10
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a2e:	e00f      	b.n	8004a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a58      	ldr	r2, [pc, #352]	; (8004b98 <HAL_SD_GetCardCSD+0x344>)
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e09d      	b.n	8004b8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a54:	0b9b      	lsrs	r3, r3, #14
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a88:	0fdb      	lsrs	r3, r3, #31
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	0f5b      	lsrs	r3, r3, #29
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	0e9b      	lsrs	r3, r3, #26
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab8:	0d9b      	lsrs	r3, r3, #22
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aca:	0d5b      	lsrs	r3, r3, #21
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afa:	0bdb      	lsrs	r3, r3, #15
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0e:	0b9b      	lsrs	r3, r3, #14
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b22:	0b5b      	lsrs	r3, r3, #13
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b36:	0b1b      	lsrs	r3, r3, #12
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	1fe00fff 	.word	0x1fe00fff

08004b9c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b094      	sub	sp, #80	; 0x50
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb35 	bl	800521c <SD_SendSDStatus>
 8004bb2:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00f      	beq.n	8004bda <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a42      	ldr	r2, [pc, #264]	; (8004cc8 <HAL_SD_GetCardStatus+0x12c>)
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e071      	b.n	8004cbe <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	061a      	lsls	r2, r3, #24
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c20:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c2a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	0e1b      	lsrs	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	0d1b      	lsrs	r3, r3, #20
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3750      	adds	r7, #80	; 0x50
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	1fe00fff 	.word	0x1fe00fff

08004ccc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af04      	add	r7, sp, #16
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2203      	movs	r2, #3
 8004d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d02e      	beq.n	8004d9c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d106      	bne.n	8004d54 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
 8004d52:	e029      	b.n	8004da8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d5a:	d10a      	bne.n	8004d72 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fb55 	bl	800540c <SD_WideBus_Enable>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d70:	e01a      	b.n	8004da8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb92 	bl	80054a2 <SD_WideBus_Disable>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d8c:	e00c      	b.n	8004da8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
 8004d9a:	e005      	b.n	8004da8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <HAL_SD_ConfigWideBusOperation+0x11c>)
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e039      	b.n	8004e38 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d903      	bls.n	8004dea <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e012      	b.n	8004e10 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df2:	d103      	bne.n	8004dfc <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e009      	b.n	8004e10 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e04:	d102      	bne.n	8004e0c <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8004e06:	2302      	movs	r3, #2
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e001      	b.n	8004e10 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681d      	ldr	r5, [r3, #0]
 8004e14:	466c      	mov	r4, sp
 8004e16:	f107 0318 	add.w	r3, r7, #24
 8004e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f001 fc87 	bl	800673c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e40:	1fe00fff 	.word	0x1fe00fff

08004e44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fab0 	bl	80053bc <SD_SendStatus>
 8004e5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0a5b      	lsrs	r3, r3, #9
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004e7a:	693b      	ldr	r3, [r7, #16]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b091      	sub	sp, #68	; 0x44
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 fcaa 	bl	80067ee <SDMMC_GetPowerState>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ea0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ea4:	e0a8      	b.n	8004ff8 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d02e      	beq.n	8004f0c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fef0 	bl	8006c98 <SDMMC_CmdSendCID>
 8004eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <SD_InitCard+0x40>
    {
      return errorstate;
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	e099      	b.n	8004ff8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fcd5 	bl	800687a <SDMMC_GetResponse>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2104      	movs	r1, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fccc 	bl	800687a <SDMMC_GetResponse>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2108      	movs	r1, #8
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fcc3 	bl	800687a <SDMMC_GetResponse>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	210c      	movs	r1, #12
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fcba 	bl	800687a <SDMMC_GetResponse>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d00d      	beq.n	8004f30 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f107 020e 	add.w	r2, r7, #14
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fef9 	bl	8006d16 <SDMMC_CmdSetRelAdd>
 8004f24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <SD_InitCard+0xac>
    {
      return errorstate;
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	e063      	b.n	8004ff8 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d036      	beq.n	8004fa6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004f38:	89fb      	ldrh	r3, [r7, #14]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f001 fec2 	bl	8006cd6 <SDMMC_CmdSendCSD>
 8004f52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <SD_InitCard+0xda>
    {
      return errorstate;
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	e04c      	b.n	8004ff8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fc88 	bl	800687a <SDMMC_GetResponse>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2104      	movs	r1, #4
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 fc7f 	bl	800687a <SDMMC_GetResponse>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2108      	movs	r1, #8
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fc76 	bl	800687a <SDMMC_GetResponse>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	210c      	movs	r1, #12
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fc6d 	bl	800687a <SDMMC_GetResponse>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2104      	movs	r1, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fc64 	bl	800687a <SDMMC_GetResponse>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	0d1a      	lsrs	r2, r3, #20
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004fba:	f107 0310 	add.w	r3, r7, #16
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fc47 	bl	8004854 <HAL_SD_GetCardCSD>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fd0:	e012      	b.n	8004ff8 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6819      	ldr	r1, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	f001 fd6d 	bl	8006ac4 <SDMMC_CmdSelDesel>
 8004fea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <SD_InitCard+0x172>
  {
    return errorstate;
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff4:	e000      	b.n	8004ff8 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3744      	adds	r7, #68	; 0x44
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7fb fed4 	bl	8000dc0 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fd74 	bl	8006b0c <SDMMC_CmdGoIdleState>
 8005024:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <SD_PowerON+0x30>
  {
    return errorstate;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	e0ee      	b.n	800520e <SD_PowerON+0x20e>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fd87 	bl	8006b48 <SDMMC_CmdOperCond>
 800503a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f001 fd5d 	bl	8006b0c <SDMMC_CmdGoIdleState>
 8005052:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <SD_PowerON+0x64>
    {
      return errorstate;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	e0d7      	b.n	800520e <SD_PowerON+0x20e>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b01      	cmp	r3, #1
 800506a:	d137      	bne.n	80050dc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fd88 	bl	8006b88 <SDMMC_CmdAppCommand>
 8005078:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005084:	e0c3      	b.n	800520e <SD_PowerON+0x20e>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fd7b 	bl	8006b88 <SDMMC_CmdAppCommand>
 8005092:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <SD_PowerON+0x9e>
    {
      return errorstate;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	e0b7      	b.n	800520e <SD_PowerON+0x20e>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	495d      	ldr	r1, [pc, #372]	; (8005218 <SD_PowerON+0x218>)
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 fd92 	bl	8006bce <SDMMC_CmdAppOperCommand>
 80050aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050b6:	e0aa      	b.n	800520e <SD_PowerON+0x20e>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 fbdb 	bl	800687a <SDMMC_GetResponse>
 80050c4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	0fdb      	lsrs	r3, r3, #31
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <SD_PowerON+0xd2>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <SD_PowerON+0xd4>
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]

    count++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d802      	bhi.n	80050ec <SD_PowerON+0xec>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0cc      	beq.n	8005086 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d902      	bls.n	80050fc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80050f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050fa:	e088      	b.n	800520e <SD_PowerON+0x20e>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8082 	beq.w	800520c <SD_PowerON+0x20c>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d17a      	bne.n	800520c <SD_PowerON+0x20c>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d075      	beq.n	800520c <SD_PowerON+0x20c>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0208 	orr.w	r2, r2, #8
 8005136:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f001 fe51 	bl	8006de4 <SDMMC_CmdVoltageSwitch>
 8005142:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <SD_PowerON+0x164>
        {
          return errorstate;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	e05f      	b.n	800520e <SD_PowerON+0x20e>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800514e:	f7fb fe37 	bl	8000dc0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d102      	bne.n	8005164 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800515e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005162:	e054      	b.n	800520e <SD_PowerON+0x20e>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800516e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005172:	d1ec      	bne.n	800514e <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518c:	d002      	beq.n	8005194 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800518e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005192:	e03c      	b.n	800520e <SD_PowerON+0x20e>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005194:	2001      	movs	r0, #1
 8005196:	f7ff fb51 	bl	800483c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0204 	orr.w	r2, r2, #4
 80051a8:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80051aa:	e00a      	b.n	80051c2 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80051ac:	f7fb fe08 	bl	8000dc0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d102      	bne.n	80051c2 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80051bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051c0:	e025      	b.n	800520e <SD_PowerON+0x20e>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051d0:	d1ec      	bne.n	80051ac <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051da:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d102      	bne.n	80051f2 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80051ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051f0:	e00d      	b.n	800520e <SD_PowerON+0x20e>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2213      	movs	r2, #19
 80051f8:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	c1100000 	.word	0xc1100000

0800521c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005226:	f7fb fdcb 	bl	8000dc0 <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f001 fb1f 	bl	800687a <SDMMC_GetResponse>
 800523c:	4603      	mov	r3, r0
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005246:	d102      	bne.n	800524e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800524c:	e0b0      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2140      	movs	r1, #64	; 0x40
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fb4f 	bl	80068f8 <SDMMC_CmdBlockLength>
 800525a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	e0a0      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f001 fc84 	bl	8006b88 <SDMMC_CmdAppCommand>
 8005280:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	e08d      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800529a:	2340      	movs	r3, #64	; 0x40
 800529c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800529e:	2360      	movs	r3, #96	; 0x60
 80052a0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052a2:	2302      	movs	r3, #2
 80052a4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f107 0208 	add.w	r2, r7, #8
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 faf1 	bl	80068a0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fd6c 	bl	8006da0 <SDMMC_CmdStatusRegister>
 80052c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02b      	beq.n	8005328 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	e069      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d013      	beq.n	8005312 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80052ea:	2300      	movs	r3, #0
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	e00d      	b.n	800530c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fa4b 	bl	8006790 <SDMMC_ReadFIFO>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	601a      	str	r2, [r3, #0]
        pData++;
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	3304      	adds	r3, #4
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	3301      	adds	r3, #1
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b07      	cmp	r3, #7
 8005310:	d9ee      	bls.n	80052f0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005312:	f7fb fd55 	bl	8000dc0 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d102      	bne.n	8005328 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005326:	e043      	b.n	80053b0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0d2      	beq.n	80052dc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005344:	2308      	movs	r3, #8
 8005346:	e033      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005356:	2302      	movs	r3, #2
 8005358:	e02a      	b.n	80053b0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d017      	beq.n	8005398 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005368:	2320      	movs	r3, #32
 800536a:	e021      	b.n	80053b0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fa0d 	bl	8006790 <SDMMC_ReadFIFO>
 8005376:	4602      	mov	r2, r0
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	601a      	str	r2, [r3, #0]
    pData++;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	3304      	adds	r3, #4
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005382:	f7fb fd1d 	bl	8000dc0 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d102      	bne.n	8005398 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005392:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005396:	e00b      	b.n	80053b0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e2      	bne.n	800536c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a03      	ldr	r2, [pc, #12]	; (80053b8 <SD_SendSDStatus+0x19c>)
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	; 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	18000f3a 	.word	0x18000f3a

080053bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80053cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d0:	e018      	b.n	8005404 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	041b      	lsls	r3, r3, #16
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f001 fcbb 	bl	8006d5a <SDMMC_CmdSendStatus>
 80053e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	e009      	b.n	8005404 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fa3f 	bl	800687a <SDMMC_GetResponse>
 80053fc:	4602      	mov	r2, r0
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fa29 	bl	800687a <SDMMC_GetResponse>
 8005428:	4603      	mov	r3, r0
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005432:	d102      	bne.n	800543a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005438:	e02f      	b.n	800549a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f879 	bl	8005538 <SD_FindSCR>
 8005446:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	e023      	b.n	800549a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01c      	beq.n	8005496 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f001 fb8d 	bl	8006b88 <SDMMC_CmdAppCommand>
 800546e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	e00f      	b.n	800549a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f001 fbc4 	bl	8006c0e <SDMMC_CmdBusWidth>
 8005486:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	e003      	b.n	800549a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005492:	2300      	movs	r3, #0
 8005494:	e001      	b.n	800549a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005496:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f9de 	bl	800687a <SDMMC_GetResponse>
 80054be:	4603      	mov	r3, r0
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c8:	d102      	bne.n	80054d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054ce:	e02f      	b.n	8005530 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054d0:	f107 030c 	add.w	r3, r7, #12
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f82e 	bl	8005538 <SD_FindSCR>
 80054dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	e023      	b.n	8005530 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01c      	beq.n	800552c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f001 fb42 	bl	8006b88 <SDMMC_CmdAppCommand>
 8005504:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	e00f      	b.n	8005530 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fb79 	bl	8006c0e <SDMMC_CmdBusWidth>
 800551c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	e003      	b.n	8005530 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005528:	2300      	movs	r3, #0
 800552a:	e001      	b.n	8005530 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800552c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005542:	f7fb fc3d 	bl	8000dc0 <HAL_GetTick>
 8005546:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2108      	movs	r1, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f9ca 	bl	80068f8 <SDMMC_CmdBlockLength>
 8005564:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <SD_FindSCR+0x38>
  {
    return errorstate;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	e0ad      	b.n	80056cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f001 fb03 	bl	8006b88 <SDMMC_CmdAppCommand>
 8005582:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <SD_FindSCR+0x56>
  {
    return errorstate;
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	e09e      	b.n	80056cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005594:	2308      	movs	r3, #8
 8005596:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005598:	2330      	movs	r3, #48	; 0x30
 800559a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800559c:	2302      	movs	r3, #2
 800559e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f107 0210 	add.w	r2, r7, #16
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f974 	bl	80068a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fb49 	bl	8006c54 <SDMMC_CmdSendSCR>
 80055c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d027      	beq.n	800561a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	e07e      	b.n	80056cc <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <SD_FindSCR+0xcc>
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d110      	bne.n	8005604 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f8d2 	bl	8006790 <SDMMC_ReadFIFO>
 80055ec:	4603      	mov	r3, r0
 80055ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f8cb 	bl	8006790 <SDMMC_ReadFIFO>
 80055fa:	4603      	mov	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]
      index++;
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	3301      	adds	r3, #1
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005604:	f7fb fbdc 	bl	8000dc0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d102      	bne.n	800561a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005618:	e058      	b.n	80056cc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005620:	f240 532a 	movw	r3, #1322	; 0x52a
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0d1      	beq.n	80055ce <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005640:	2308      	movs	r3, #8
 8005642:	e043      	b.n	80056cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2202      	movs	r2, #2
 8005658:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800565a:	2302      	movs	r3, #2
 800565c:	e036      	b.n	80056cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2220      	movs	r2, #32
 8005672:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005674:	2320      	movs	r3, #32
 8005676:	e029      	b.n	80056cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <SD_FindSCR+0x19c>)
 800567e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	061a      	lsls	r2, r3, #24
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800568c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005696:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	601a      	str	r2, [r3, #0]
    scr++;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	3304      	adds	r3, #4
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	061a      	lsls	r2, r3, #24
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	0e1b      	lsrs	r3, r3, #24
 80056c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3738      	adds	r7, #56	; 0x38
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	18000f3a 	.word	0x18000f3a

080056d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0e2      	b.n	80058b4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a70      	ldr	r2, [pc, #448]	; (80058bc <HAL_SPI_Init+0x1e4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <HAL_SPI_Init+0x46>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a6f      	ldr	r2, [pc, #444]	; (80058c0 <HAL_SPI_Init+0x1e8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00a      	beq.n	800571e <HAL_SPI_Init+0x46>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a6d      	ldr	r2, [pc, #436]	; (80058c4 <HAL_SPI_Init+0x1ec>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d005      	beq.n	800571e <HAL_SPI_Init+0x46>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d901      	bls.n	800571e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0ca      	b.n	80058b4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f8d2 	bl	80058c8 <SPI_GetPacketSize>
 8005724:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a64      	ldr	r2, [pc, #400]	; (80058bc <HAL_SPI_Init+0x1e4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00c      	beq.n	800574a <HAL_SPI_Init+0x72>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a62      	ldr	r2, [pc, #392]	; (80058c0 <HAL_SPI_Init+0x1e8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_SPI_Init+0x72>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a61      	ldr	r2, [pc, #388]	; (80058c4 <HAL_SPI_Init+0x1ec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d002      	beq.n	800574a <HAL_SPI_Init+0x72>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b08      	cmp	r3, #8
 8005748:	d811      	bhi.n	800576e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800574e:	4a5b      	ldr	r2, [pc, #364]	; (80058bc <HAL_SPI_Init+0x1e4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a59      	ldr	r2, [pc, #356]	; (80058c0 <HAL_SPI_Init+0x1e8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_SPI_Init+0x90>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <HAL_SPI_Init+0x1ec>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d104      	bne.n	8005772 <HAL_SPI_Init+0x9a>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b10      	cmp	r3, #16
 800576c:	d901      	bls.n	8005772 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0a0      	b.n	80058b4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb f8aa 	bl	80008e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ac:	d110      	bne.n	80057d0 <HAL_SPI_Init+0xf8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b6:	d10b      	bne.n	80057d0 <HAL_SPI_Init+0xf8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	ea42 0103 	orr.w	r1, r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	ea42 0103 	orr.w	r1, r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800586e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40013000 	.word	0x40013000
 80058c0:	40003800 	.word	0x40003800
 80058c4:	40003c00 	.word	0x40003c00

080058c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3307      	adds	r3, #7
 80058e6:	08db      	lsrs	r3, r3, #3
 80058e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e03c      	b.n	800598a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fb f825 	bl	8000974 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f85c 	bl	8005a00 <USART_SetConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e01b      	b.n	800598a <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005960:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005970:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fd7e 	bl	8006484 <USART_CheckIdleState>
 8005988:	4603      	mov	r3, r0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	4613      	mov	r3, r2
 80059a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80059a2:	e018      	b.n	80059d6 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d014      	beq.n	80059d6 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fb fa08 	bl	8000dc0 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <USART_WaitOnFlagUntilTimeout+0x30>
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e00f      	b.n	80059f6 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d0d7      	beq.n	80059a4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4bcb      	ldr	r3, [pc, #812]	; (8005d5c <USART_SetConfig+0x35c>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a62:	4313      	orrs	r3, r2
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4bbc      	ldr	r3, [pc, #752]	; (8005d60 <USART_SetConfig+0x360>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a76:	430b      	orrs	r3, r1
 8005a78:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	f023 010f 	bic.w	r1, r3, #15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4ab3      	ldr	r2, [pc, #716]	; (8005d64 <USART_SetConfig+0x364>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d177      	bne.n	8005b8a <USART_SetConfig+0x18a>
 8005a9a:	4bb3      	ldr	r3, [pc, #716]	; (8005d68 <USART_SetConfig+0x368>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa2:	2b28      	cmp	r3, #40	; 0x28
 8005aa4:	d86c      	bhi.n	8005b80 <USART_SetConfig+0x180>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <USART_SetConfig+0xac>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005b51 	.word	0x08005b51
 8005ab0:	08005b81 	.word	0x08005b81
 8005ab4:	08005b81 	.word	0x08005b81
 8005ab8:	08005b81 	.word	0x08005b81
 8005abc:	08005b81 	.word	0x08005b81
 8005ac0:	08005b81 	.word	0x08005b81
 8005ac4:	08005b81 	.word	0x08005b81
 8005ac8:	08005b81 	.word	0x08005b81
 8005acc:	08005b59 	.word	0x08005b59
 8005ad0:	08005b81 	.word	0x08005b81
 8005ad4:	08005b81 	.word	0x08005b81
 8005ad8:	08005b81 	.word	0x08005b81
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005b81 	.word	0x08005b81
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b81 	.word	0x08005b81
 8005aec:	08005b61 	.word	0x08005b61
 8005af0:	08005b81 	.word	0x08005b81
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005b81 	.word	0x08005b81
 8005afc:	08005b81 	.word	0x08005b81
 8005b00:	08005b81 	.word	0x08005b81
 8005b04:	08005b81 	.word	0x08005b81
 8005b08:	08005b81 	.word	0x08005b81
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b81 	.word	0x08005b81
 8005b14:	08005b81 	.word	0x08005b81
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b81 	.word	0x08005b81
 8005b24:	08005b81 	.word	0x08005b81
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b81 	.word	0x08005b81
 8005b34:	08005b81 	.word	0x08005b81
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005b81 	.word	0x08005b81
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	08005b81 	.word	0x08005b81
 8005b48:	08005b81 	.word	0x08005b81
 8005b4c:	08005b79 	.word	0x08005b79
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b56:	e117      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b5e:	e113      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b66:	e10f      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b6e:	e10b      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b76:	e107      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b7e:	e103      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b86:	bf00      	nop
 8005b88:	e0fe      	b.n	8005d88 <USART_SetConfig+0x388>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a77      	ldr	r2, [pc, #476]	; (8005d6c <USART_SetConfig+0x36c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d132      	bne.n	8005bfa <USART_SetConfig+0x1fa>
 8005b94:	4b74      	ldr	r3, [pc, #464]	; (8005d68 <USART_SetConfig+0x368>)
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d827      	bhi.n	8005bf0 <USART_SetConfig+0x1f0>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <USART_SetConfig+0x1a8>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bc1 	.word	0x08005bc1
 8005bac:	08005bc9 	.word	0x08005bc9
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005be1 	.word	0x08005be1
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bc6:	e0df      	b.n	8005d88 <USART_SetConfig+0x388>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bce:	e0db      	b.n	8005d88 <USART_SetConfig+0x388>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bd6:	e0d7      	b.n	8005d88 <USART_SetConfig+0x388>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bde:	e0d3      	b.n	8005d88 <USART_SetConfig+0x388>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005be6:	e0cf      	b.n	8005d88 <USART_SetConfig+0x388>
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bee:	e0cb      	b.n	8005d88 <USART_SetConfig+0x388>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005bf6:	bf00      	nop
 8005bf8:	e0c6      	b.n	8005d88 <USART_SetConfig+0x388>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <USART_SetConfig+0x370>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d132      	bne.n	8005c6a <USART_SetConfig+0x26a>
 8005c04:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <USART_SetConfig+0x368>)
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b05      	cmp	r3, #5
 8005c0e:	d827      	bhi.n	8005c60 <USART_SetConfig+0x260>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USART_SetConfig+0x218>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c31 	.word	0x08005c31
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c36:	e0a7      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c3e:	e0a3      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c40:	2304      	movs	r3, #4
 8005c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c46:	e09f      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c4e:	e09b      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c56:	e097      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c5e:	e093      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c66:	bf00      	nop
 8005c68:	e08e      	b.n	8005d88 <USART_SetConfig+0x388>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a41      	ldr	r2, [pc, #260]	; (8005d74 <USART_SetConfig+0x374>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	f040 8086 	bne.w	8005d82 <USART_SetConfig+0x382>
 8005c76:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <USART_SetConfig+0x368>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7e:	2b28      	cmp	r3, #40	; 0x28
 8005c80:	d87a      	bhi.n	8005d78 <USART_SetConfig+0x378>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <USART_SetConfig+0x288>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d79 	.word	0x08005d79
 8005c90:	08005d79 	.word	0x08005d79
 8005c94:	08005d79 	.word	0x08005d79
 8005c98:	08005d79 	.word	0x08005d79
 8005c9c:	08005d79 	.word	0x08005d79
 8005ca0:	08005d79 	.word	0x08005d79
 8005ca4:	08005d79 	.word	0x08005d79
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d79 	.word	0x08005d79
 8005cb0:	08005d79 	.word	0x08005d79
 8005cb4:	08005d79 	.word	0x08005d79
 8005cb8:	08005d79 	.word	0x08005d79
 8005cbc:	08005d79 	.word	0x08005d79
 8005cc0:	08005d79 	.word	0x08005d79
 8005cc4:	08005d79 	.word	0x08005d79
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d79 	.word	0x08005d79
 8005cd0:	08005d79 	.word	0x08005d79
 8005cd4:	08005d79 	.word	0x08005d79
 8005cd8:	08005d79 	.word	0x08005d79
 8005cdc:	08005d79 	.word	0x08005d79
 8005ce0:	08005d79 	.word	0x08005d79
 8005ce4:	08005d79 	.word	0x08005d79
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d79 	.word	0x08005d79
 8005cf0:	08005d79 	.word	0x08005d79
 8005cf4:	08005d79 	.word	0x08005d79
 8005cf8:	08005d79 	.word	0x08005d79
 8005cfc:	08005d79 	.word	0x08005d79
 8005d00:	08005d79 	.word	0x08005d79
 8005d04:	08005d79 	.word	0x08005d79
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d79 	.word	0x08005d79
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005d79 	.word	0x08005d79
 8005d1c:	08005d79 	.word	0x08005d79
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d32:	e029      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d3a:	e025      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d42:	e021      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d4a:	e01d      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d52:	e019      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d54:	2320      	movs	r3, #32
 8005d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d5a:	e015      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d5c:	cfff69f3 	.word	0xcfff69f3
 8005d60:	ffffc0f6 	.word	0xffffc0f6
 8005d64:	40011000 	.word	0x40011000
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	40004400 	.word	0x40004400
 8005d70:	40004800 	.word	0x40004800
 8005d74:	40011400 	.word	0x40011400
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <USART_SetConfig+0x388>
 8005d82:	2340      	movs	r3, #64	; 0x40
 8005d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8005d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	f200 8345 	bhi.w	800641c <USART_SetConfig+0xa1c>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <USART_SetConfig+0x398>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005e1d 	.word	0x08005e1d
 8005d9c:	08005ed3 	.word	0x08005ed3
 8005da0:	08005f89 	.word	0x08005f89
 8005da4:	0800641d 	.word	0x0800641d
 8005da8:	08006043 	.word	0x08006043
 8005dac:	0800641d 	.word	0x0800641d
 8005db0:	0800641d 	.word	0x0800641d
 8005db4:	0800641d 	.word	0x0800641d
 8005db8:	080060fd 	.word	0x080060fd
 8005dbc:	0800641d 	.word	0x0800641d
 8005dc0:	0800641d 	.word	0x0800641d
 8005dc4:	0800641d 	.word	0x0800641d
 8005dc8:	0800641d 	.word	0x0800641d
 8005dcc:	0800641d 	.word	0x0800641d
 8005dd0:	0800641d 	.word	0x0800641d
 8005dd4:	0800641d 	.word	0x0800641d
 8005dd8:	0800626b 	.word	0x0800626b
 8005ddc:	0800641d 	.word	0x0800641d
 8005de0:	0800641d 	.word	0x0800641d
 8005de4:	0800641d 	.word	0x0800641d
 8005de8:	0800641d 	.word	0x0800641d
 8005dec:	0800641d 	.word	0x0800641d
 8005df0:	0800641d 	.word	0x0800641d
 8005df4:	0800641d 	.word	0x0800641d
 8005df8:	0800641d 	.word	0x0800641d
 8005dfc:	0800641d 	.word	0x0800641d
 8005e00:	0800641d 	.word	0x0800641d
 8005e04:	0800641d 	.word	0x0800641d
 8005e08:	0800641d 	.word	0x0800641d
 8005e0c:	0800641d 	.word	0x0800641d
 8005e10:	0800641d 	.word	0x0800641d
 8005e14:	0800641d 	.word	0x0800641d
 8005e18:	0800635d 	.word	0x0800635d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f7fc f9f2 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8005e20:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d044      	beq.n	8005eb4 <USART_SetConfig+0x4b4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d03e      	beq.n	8005eb0 <USART_SetConfig+0x4b0>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d038      	beq.n	8005eac <USART_SetConfig+0x4ac>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d032      	beq.n	8005ea8 <USART_SetConfig+0x4a8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d02c      	beq.n	8005ea4 <USART_SetConfig+0x4a4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d026      	beq.n	8005ea0 <USART_SetConfig+0x4a0>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d020      	beq.n	8005e9c <USART_SetConfig+0x49c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2b07      	cmp	r3, #7
 8005e60:	d01a      	beq.n	8005e98 <USART_SetConfig+0x498>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d014      	beq.n	8005e94 <USART_SetConfig+0x494>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d00e      	beq.n	8005e90 <USART_SetConfig+0x490>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2b0a      	cmp	r3, #10
 8005e78:	d008      	beq.n	8005e8c <USART_SetConfig+0x48c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b0b      	cmp	r3, #11
 8005e80:	d102      	bne.n	8005e88 <USART_SetConfig+0x488>
 8005e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e86:	e016      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e014      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	e012      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	e010      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e94:	2320      	movs	r3, #32
 8005e96:	e00e      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	e00c      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	e00a      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	e008      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	e006      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005ea8:	2306      	movs	r3, #6
 8005eaa:	e004      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005eac:	2304      	movs	r3, #4
 8005eae:	e002      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e000      	b.n	8005eb6 <USART_SetConfig+0x4b6>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	005a      	lsls	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ed0:	e2a8      	b.n	8006424 <USART_SetConfig+0xa24>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ed2:	f7fc f9ad 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8005ed6:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d044      	beq.n	8005f6a <USART_SetConfig+0x56a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d03e      	beq.n	8005f66 <USART_SetConfig+0x566>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d038      	beq.n	8005f62 <USART_SetConfig+0x562>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d032      	beq.n	8005f5e <USART_SetConfig+0x55e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d02c      	beq.n	8005f5a <USART_SetConfig+0x55a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d026      	beq.n	8005f56 <USART_SetConfig+0x556>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d020      	beq.n	8005f52 <USART_SetConfig+0x552>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	2b07      	cmp	r3, #7
 8005f16:	d01a      	beq.n	8005f4e <USART_SetConfig+0x54e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d014      	beq.n	8005f4a <USART_SetConfig+0x54a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d00e      	beq.n	8005f46 <USART_SetConfig+0x546>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2b0a      	cmp	r3, #10
 8005f2e:	d008      	beq.n	8005f42 <USART_SetConfig+0x542>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b0b      	cmp	r3, #11
 8005f36:	d102      	bne.n	8005f3e <USART_SetConfig+0x53e>
 8005f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f3c:	e016      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e014      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	e012      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	e010      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f4a:	2320      	movs	r3, #32
 8005f4c:	e00e      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f4e:	2310      	movs	r3, #16
 8005f50:	e00c      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f52:	230c      	movs	r3, #12
 8005f54:	e00a      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f56:	230a      	movs	r3, #10
 8005f58:	e008      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	e006      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f5e:	2306      	movs	r3, #6
 8005f60:	e004      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f62:	2304      	movs	r3, #4
 8005f64:	e002      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e000      	b.n	8005f6c <USART_SetConfig+0x56c>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	005a      	lsls	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	441a      	add	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f86:	e24d      	b.n	8006424 <USART_SetConfig+0xa24>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f88:	f107 0318 	add.w	r3, r7, #24
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fd fa8b 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d044      	beq.n	8006026 <USART_SetConfig+0x626>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d03e      	beq.n	8006022 <USART_SetConfig+0x622>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d038      	beq.n	800601e <USART_SetConfig+0x61e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d032      	beq.n	800601a <USART_SetConfig+0x61a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d02c      	beq.n	8006016 <USART_SetConfig+0x616>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d026      	beq.n	8006012 <USART_SetConfig+0x612>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d020      	beq.n	800600e <USART_SetConfig+0x60e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d01a      	beq.n	800600a <USART_SetConfig+0x60a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d014      	beq.n	8006006 <USART_SetConfig+0x606>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d00e      	beq.n	8006002 <USART_SetConfig+0x602>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b0a      	cmp	r3, #10
 8005fea:	d008      	beq.n	8005ffe <USART_SetConfig+0x5fe>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b0b      	cmp	r3, #11
 8005ff2:	d102      	bne.n	8005ffa <USART_SetConfig+0x5fa>
 8005ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ff8:	e016      	b.n	8006028 <USART_SetConfig+0x628>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e014      	b.n	8006028 <USART_SetConfig+0x628>
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	e012      	b.n	8006028 <USART_SetConfig+0x628>
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	e010      	b.n	8006028 <USART_SetConfig+0x628>
 8006006:	2320      	movs	r3, #32
 8006008:	e00e      	b.n	8006028 <USART_SetConfig+0x628>
 800600a:	2310      	movs	r3, #16
 800600c:	e00c      	b.n	8006028 <USART_SetConfig+0x628>
 800600e:	230c      	movs	r3, #12
 8006010:	e00a      	b.n	8006028 <USART_SetConfig+0x628>
 8006012:	230a      	movs	r3, #10
 8006014:	e008      	b.n	8006028 <USART_SetConfig+0x628>
 8006016:	2308      	movs	r3, #8
 8006018:	e006      	b.n	8006028 <USART_SetConfig+0x628>
 800601a:	2306      	movs	r3, #6
 800601c:	e004      	b.n	8006028 <USART_SetConfig+0x628>
 800601e:	2304      	movs	r3, #4
 8006020:	e002      	b.n	8006028 <USART_SetConfig+0x628>
 8006022:	2302      	movs	r3, #2
 8006024:	e000      	b.n	8006028 <USART_SetConfig+0x628>
 8006026:	2301      	movs	r3, #1
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	005a      	lsls	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006040:	e1f0      	b.n	8006424 <USART_SetConfig+0xa24>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	4618      	mov	r0, r3
 8006048:	f7fd fb7a 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d044      	beq.n	80060e0 <USART_SetConfig+0x6e0>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b01      	cmp	r3, #1
 800605c:	d03e      	beq.n	80060dc <USART_SetConfig+0x6dc>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b02      	cmp	r3, #2
 8006064:	d038      	beq.n	80060d8 <USART_SetConfig+0x6d8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b03      	cmp	r3, #3
 800606c:	d032      	beq.n	80060d4 <USART_SetConfig+0x6d4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b04      	cmp	r3, #4
 8006074:	d02c      	beq.n	80060d0 <USART_SetConfig+0x6d0>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b05      	cmp	r3, #5
 800607c:	d026      	beq.n	80060cc <USART_SetConfig+0x6cc>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b06      	cmp	r3, #6
 8006084:	d020      	beq.n	80060c8 <USART_SetConfig+0x6c8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b07      	cmp	r3, #7
 800608c:	d01a      	beq.n	80060c4 <USART_SetConfig+0x6c4>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b08      	cmp	r3, #8
 8006094:	d014      	beq.n	80060c0 <USART_SetConfig+0x6c0>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b09      	cmp	r3, #9
 800609c:	d00e      	beq.n	80060bc <USART_SetConfig+0x6bc>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	d008      	beq.n	80060b8 <USART_SetConfig+0x6b8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b0b      	cmp	r3, #11
 80060ac:	d102      	bne.n	80060b4 <USART_SetConfig+0x6b4>
 80060ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b2:	e016      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e014      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	e012      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	e010      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060c0:	2320      	movs	r3, #32
 80060c2:	e00e      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060c4:	2310      	movs	r3, #16
 80060c6:	e00c      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060c8:	230c      	movs	r3, #12
 80060ca:	e00a      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060cc:	230a      	movs	r3, #10
 80060ce:	e008      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060d0:	2308      	movs	r3, #8
 80060d2:	e006      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060d4:	2306      	movs	r3, #6
 80060d6:	e004      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060d8:	2304      	movs	r3, #4
 80060da:	e002      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060dc:	2302      	movs	r3, #2
 80060de:	e000      	b.n	80060e2 <USART_SetConfig+0x6e2>
 80060e0:	2301      	movs	r3, #1
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	005a      	lsls	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	441a      	add	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060fa:	e193      	b.n	8006424 <USART_SetConfig+0xa24>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fc:	4b85      	ldr	r3, [pc, #532]	; (8006314 <USART_SetConfig+0x914>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05d      	beq.n	80061c4 <USART_SetConfig+0x7c4>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006108:	4b82      	ldr	r3, [pc, #520]	; (8006314 <USART_SetConfig+0x914>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a81      	ldr	r2, [pc, #516]	; (8006318 <USART_SetConfig+0x918>)
 8006114:	40da      	lsrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d044      	beq.n	80061a8 <USART_SetConfig+0x7a8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	2b01      	cmp	r3, #1
 8006124:	d03e      	beq.n	80061a4 <USART_SetConfig+0x7a4>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b02      	cmp	r3, #2
 800612c:	d038      	beq.n	80061a0 <USART_SetConfig+0x7a0>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b03      	cmp	r3, #3
 8006134:	d032      	beq.n	800619c <USART_SetConfig+0x79c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b04      	cmp	r3, #4
 800613c:	d02c      	beq.n	8006198 <USART_SetConfig+0x798>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b05      	cmp	r3, #5
 8006144:	d026      	beq.n	8006194 <USART_SetConfig+0x794>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	2b06      	cmp	r3, #6
 800614c:	d020      	beq.n	8006190 <USART_SetConfig+0x790>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	2b07      	cmp	r3, #7
 8006154:	d01a      	beq.n	800618c <USART_SetConfig+0x78c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b08      	cmp	r3, #8
 800615c:	d014      	beq.n	8006188 <USART_SetConfig+0x788>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b09      	cmp	r3, #9
 8006164:	d00e      	beq.n	8006184 <USART_SetConfig+0x784>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b0a      	cmp	r3, #10
 800616c:	d008      	beq.n	8006180 <USART_SetConfig+0x780>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b0b      	cmp	r3, #11
 8006174:	d102      	bne.n	800617c <USART_SetConfig+0x77c>
 8006176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800617a:	e016      	b.n	80061aa <USART_SetConfig+0x7aa>
 800617c:	2301      	movs	r3, #1
 800617e:	e014      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	e012      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	e010      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006188:	2320      	movs	r3, #32
 800618a:	e00e      	b.n	80061aa <USART_SetConfig+0x7aa>
 800618c:	2310      	movs	r3, #16
 800618e:	e00c      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006190:	230c      	movs	r3, #12
 8006192:	e00a      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006194:	230a      	movs	r3, #10
 8006196:	e008      	b.n	80061aa <USART_SetConfig+0x7aa>
 8006198:	2308      	movs	r3, #8
 800619a:	e006      	b.n	80061aa <USART_SetConfig+0x7aa>
 800619c:	2306      	movs	r3, #6
 800619e:	e004      	b.n	80061aa <USART_SetConfig+0x7aa>
 80061a0:	2304      	movs	r3, #4
 80061a2:	e002      	b.n	80061aa <USART_SetConfig+0x7aa>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e000      	b.n	80061aa <USART_SetConfig+0x7aa>
 80061a8:	2301      	movs	r3, #1
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	005a      	lsls	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	441a      	add	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 80061c2:	e12f      	b.n	8006424 <USART_SetConfig+0xa24>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d043      	beq.n	8006254 <USART_SetConfig+0x854>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d03d      	beq.n	8006250 <USART_SetConfig+0x850>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d037      	beq.n	800624c <USART_SetConfig+0x84c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d031      	beq.n	8006248 <USART_SetConfig+0x848>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d02b      	beq.n	8006244 <USART_SetConfig+0x844>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d025      	beq.n	8006240 <USART_SetConfig+0x840>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d01f      	beq.n	800623c <USART_SetConfig+0x83c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2b07      	cmp	r3, #7
 8006202:	d019      	beq.n	8006238 <USART_SetConfig+0x838>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b08      	cmp	r3, #8
 800620a:	d013      	beq.n	8006234 <USART_SetConfig+0x834>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2b09      	cmp	r3, #9
 8006212:	d00d      	beq.n	8006230 <USART_SetConfig+0x830>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b0a      	cmp	r3, #10
 800621a:	d007      	beq.n	800622c <USART_SetConfig+0x82c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b0b      	cmp	r3, #11
 8006222:	d101      	bne.n	8006228 <USART_SetConfig+0x828>
 8006224:	4b3d      	ldr	r3, [pc, #244]	; (800631c <USART_SetConfig+0x91c>)
 8006226:	e016      	b.n	8006256 <USART_SetConfig+0x856>
 8006228:	4b3d      	ldr	r3, [pc, #244]	; (8006320 <USART_SetConfig+0x920>)
 800622a:	e014      	b.n	8006256 <USART_SetConfig+0x856>
 800622c:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <USART_SetConfig+0x924>)
 800622e:	e012      	b.n	8006256 <USART_SetConfig+0x856>
 8006230:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <USART_SetConfig+0x928>)
 8006232:	e010      	b.n	8006256 <USART_SetConfig+0x856>
 8006234:	4b3d      	ldr	r3, [pc, #244]	; (800632c <USART_SetConfig+0x92c>)
 8006236:	e00e      	b.n	8006256 <USART_SetConfig+0x856>
 8006238:	4b3d      	ldr	r3, [pc, #244]	; (8006330 <USART_SetConfig+0x930>)
 800623a:	e00c      	b.n	8006256 <USART_SetConfig+0x856>
 800623c:	4b3d      	ldr	r3, [pc, #244]	; (8006334 <USART_SetConfig+0x934>)
 800623e:	e00a      	b.n	8006256 <USART_SetConfig+0x856>
 8006240:	4b3d      	ldr	r3, [pc, #244]	; (8006338 <USART_SetConfig+0x938>)
 8006242:	e008      	b.n	8006256 <USART_SetConfig+0x856>
 8006244:	4b3d      	ldr	r3, [pc, #244]	; (800633c <USART_SetConfig+0x93c>)
 8006246:	e006      	b.n	8006256 <USART_SetConfig+0x856>
 8006248:	4b3d      	ldr	r3, [pc, #244]	; (8006340 <USART_SetConfig+0x940>)
 800624a:	e004      	b.n	8006256 <USART_SetConfig+0x856>
 800624c:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <USART_SetConfig+0x944>)
 800624e:	e002      	b.n	8006256 <USART_SetConfig+0x856>
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <USART_SetConfig+0x918>)
 8006252:	e000      	b.n	8006256 <USART_SetConfig+0x856>
 8006254:	4b32      	ldr	r3, [pc, #200]	; (8006320 <USART_SetConfig+0x920>)
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6852      	ldr	r2, [r2, #4]
 800625a:	0852      	lsrs	r2, r2, #1
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006268:	e0dc      	b.n	8006424 <USART_SetConfig+0xa24>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d045      	beq.n	80062fe <USART_SetConfig+0x8fe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b01      	cmp	r3, #1
 8006278:	d03f      	beq.n	80062fa <USART_SetConfig+0x8fa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b02      	cmp	r3, #2
 8006280:	d039      	beq.n	80062f6 <USART_SetConfig+0x8f6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b03      	cmp	r3, #3
 8006288:	d033      	beq.n	80062f2 <USART_SetConfig+0x8f2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b04      	cmp	r3, #4
 8006290:	d02d      	beq.n	80062ee <USART_SetConfig+0x8ee>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b05      	cmp	r3, #5
 8006298:	d027      	beq.n	80062ea <USART_SetConfig+0x8ea>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b06      	cmp	r3, #6
 80062a0:	d021      	beq.n	80062e6 <USART_SetConfig+0x8e6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d01b      	beq.n	80062e2 <USART_SetConfig+0x8e2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d015      	beq.n	80062de <USART_SetConfig+0x8de>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d00f      	beq.n	80062da <USART_SetConfig+0x8da>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b0a      	cmp	r3, #10
 80062c0:	d008      	beq.n	80062d4 <USART_SetConfig+0x8d4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	2b0b      	cmp	r3, #11
 80062c8:	d102      	bne.n	80062d0 <USART_SetConfig+0x8d0>
 80062ca:	f647 2312 	movw	r3, #31250	; 0x7a12
 80062ce:	e017      	b.n	8006300 <USART_SetConfig+0x900>
 80062d0:	4b17      	ldr	r3, [pc, #92]	; (8006330 <USART_SetConfig+0x930>)
 80062d2:	e015      	b.n	8006300 <USART_SetConfig+0x900>
 80062d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062d8:	e012      	b.n	8006300 <USART_SetConfig+0x900>
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <USART_SetConfig+0x948>)
 80062dc:	e010      	b.n	8006300 <USART_SetConfig+0x900>
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <USART_SetConfig+0x94c>)
 80062e0:	e00e      	b.n	8006300 <USART_SetConfig+0x900>
 80062e2:	4b0e      	ldr	r3, [pc, #56]	; (800631c <USART_SetConfig+0x91c>)
 80062e4:	e00c      	b.n	8006300 <USART_SetConfig+0x900>
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <USART_SetConfig+0x950>)
 80062e8:	e00a      	b.n	8006300 <USART_SetConfig+0x900>
 80062ea:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <USART_SetConfig+0x954>)
 80062ec:	e008      	b.n	8006300 <USART_SetConfig+0x900>
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <USART_SetConfig+0x924>)
 80062f0:	e006      	b.n	8006300 <USART_SetConfig+0x900>
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <USART_SetConfig+0x958>)
 80062f4:	e004      	b.n	8006300 <USART_SetConfig+0x900>
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <USART_SetConfig+0x928>)
 80062f8:	e002      	b.n	8006300 <USART_SetConfig+0x900>
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <USART_SetConfig+0x92c>)
 80062fc:	e000      	b.n	8006300 <USART_SetConfig+0x900>
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <USART_SetConfig+0x930>)
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6852      	ldr	r2, [r2, #4]
 8006304:	0852      	lsrs	r2, r2, #1
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006312:	e087      	b.n	8006424 <USART_SetConfig+0xa24>
 8006314:	58024400 	.word	0x58024400
 8006318:	03d09000 	.word	0x03d09000
 800631c:	0007a120 	.word	0x0007a120
 8006320:	07a12000 	.word	0x07a12000
 8006324:	000f4240 	.word	0x000f4240
 8006328:	001e8480 	.word	0x001e8480
 800632c:	003d0900 	.word	0x003d0900
 8006330:	007a1200 	.word	0x007a1200
 8006334:	00a2c2aa 	.word	0x00a2c2aa
 8006338:	00c35000 	.word	0x00c35000
 800633c:	00f42400 	.word	0x00f42400
 8006340:	01458554 	.word	0x01458554
 8006344:	01e84800 	.word	0x01e84800
 8006348:	0001e848 	.word	0x0001e848
 800634c:	0003d090 	.word	0x0003d090
 8006350:	000a2c2a 	.word	0x000a2c2a
 8006354:	000c3500 	.word	0x000c3500
 8006358:	00145854 	.word	0x00145854
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d04f      	beq.n	8006404 <USART_SetConfig+0xa04>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b01      	cmp	r3, #1
 800636a:	d048      	beq.n	80063fe <USART_SetConfig+0x9fe>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b02      	cmp	r3, #2
 8006372:	d041      	beq.n	80063f8 <USART_SetConfig+0x9f8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b03      	cmp	r3, #3
 800637a:	d03a      	beq.n	80063f2 <USART_SetConfig+0x9f2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b04      	cmp	r3, #4
 8006382:	d033      	beq.n	80063ec <USART_SetConfig+0x9ec>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b05      	cmp	r3, #5
 800638a:	d02c      	beq.n	80063e6 <USART_SetConfig+0x9e6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b06      	cmp	r3, #6
 8006392:	d025      	beq.n	80063e0 <USART_SetConfig+0x9e0>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b07      	cmp	r3, #7
 800639a:	d01e      	beq.n	80063da <USART_SetConfig+0x9da>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d017      	beq.n	80063d4 <USART_SetConfig+0x9d4>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d010      	beq.n	80063ce <USART_SetConfig+0x9ce>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b0a      	cmp	r3, #10
 80063b2:	d009      	beq.n	80063c8 <USART_SetConfig+0x9c8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b0b      	cmp	r3, #11
 80063ba:	d102      	bne.n	80063c2 <USART_SetConfig+0x9c2>
 80063bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c0:	e022      	b.n	8006408 <USART_SetConfig+0xa08>
 80063c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063c6:	e01f      	b.n	8006408 <USART_SetConfig+0xa08>
 80063c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063cc:	e01c      	b.n	8006408 <USART_SetConfig+0xa08>
 80063ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d2:	e019      	b.n	8006408 <USART_SetConfig+0xa08>
 80063d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d8:	e016      	b.n	8006408 <USART_SetConfig+0xa08>
 80063da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063de:	e013      	b.n	8006408 <USART_SetConfig+0xa08>
 80063e0:	f241 5354 	movw	r3, #5460	; 0x1554
 80063e4:	e010      	b.n	8006408 <USART_SetConfig+0xa08>
 80063e6:	f641 1398 	movw	r3, #6552	; 0x1998
 80063ea:	e00d      	b.n	8006408 <USART_SetConfig+0xa08>
 80063ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063f0:	e00a      	b.n	8006408 <USART_SetConfig+0xa08>
 80063f2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80063f6:	e007      	b.n	8006408 <USART_SetConfig+0xa08>
 80063f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063fc:	e004      	b.n	8006408 <USART_SetConfig+0xa08>
 80063fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006402:	e001      	b.n	8006408 <USART_SetConfig+0xa08>
 8006404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6852      	ldr	r2, [r2, #4]
 800640c:	0852      	lsrs	r2, r2, #1
 800640e:	441a      	add	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800641a:	e003      	b.n	8006424 <USART_SetConfig+0xa24>
    default:
      ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 8006422:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d916      	bls.n	8006458 <USART_SetConfig+0xa58>
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d212      	bcs.n	8006458 <USART_SetConfig+0xa58>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	b29b      	uxth	r3, r3
 8006436:	f023 030f 	bic.w	r3, r3, #15
 800643a:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	b29a      	uxth	r2, r3
 8006448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800644a:	4313      	orrs	r3, r2
 800644c:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e002      	b.n	800645e <USART_SetConfig+0xa5e>
  }
  else
  {
    ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8006476:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800647a:	4618      	mov	r0, r3
 800647c:	3738      	adds	r7, #56	; 0x38
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop

08006484 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006492:	f7fa fc95 	bl	8000dc0 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d10e      	bne.n	80064c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80064a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fa6c 	bl	8005992 <USART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e01e      	b.n	8006502 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d10e      	bne.n	80064f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80064d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fa56 	bl	8005992 <USART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e008      	b.n	8006502 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_USARTEx_DisableFifoMode+0x16>
 800651c:	2302      	movs	r3, #2
 800651e:	e027      	b.n	8006570 <HAL_USARTEx_DisableFifoMode+0x66>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800654e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006590:	2302      	movs	r3, #2
 8006592:	e02d      	b.n	80065f0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f84f 	bl	8006674 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e02d      	b.n	800666c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f811 	bl	8006674 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	; 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <USARTEx_SetNbDataToProcess+0xc0>)
 800667e:	f107 0314 	add.w	r3, r7, #20
 8006682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006686:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800668a:	4a2b      	ldr	r2, [pc, #172]	; (8006738 <USARTEx_SetNbDataToProcess+0xc4>)
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006694:	e883 0003 	stmia.w	r3, {r0, r1}

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <USARTEx_SetNbDataToProcess+0x3a>
  {
    husart->NbTxDataToProcess = 1U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	875a      	strh	r2, [r3, #58]	; 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066ac:	e03b      	b.n	8006726 <USARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ae:	2308      	movs	r3, #8
 80066b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066b2:	2308      	movs	r3, #8
 80066b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	0e5b      	lsrs	r3, r3, #25
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	0f5b      	lsrs	r3, r3, #29
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	773b      	strb	r3, [r7, #28]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80066d6:	7fbb      	ldrb	r3, [r7, #30]
 80066d8:	7f3a      	ldrb	r2, [r7, #28]
 80066da:	f107 0120 	add.w	r1, r7, #32
 80066de:	440a      	add	r2, r1
 80066e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066e4:	fb02 f303 	mul.w	r3, r2, r3
 80066e8:	7f3a      	ldrb	r2, [r7, #28]
 80066ea:	f107 0120 	add.w	r1, r7, #32
 80066ee:	440a      	add	r2, r1
 80066f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80066fe:	7ffb      	ldrb	r3, [r7, #31]
 8006700:	7f7a      	ldrb	r2, [r7, #29]
 8006702:	f107 0120 	add.w	r1, r7, #32
 8006706:	440a      	add	r2, r1
 8006708:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	7f7a      	ldrb	r2, [r7, #29]
 8006712:	f107 0120 	add.w	r1, r7, #32
 8006716:	440a      	add	r2, r1
 8006718:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800671c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8006726:	bf00      	nop
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	08008034 	.word	0x08008034
 8006738:	0800803c 	.word	0x0800803c

0800673c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800673c:	b084      	sub	sp, #16
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	f107 001c 	add.w	r0, r7, #28
 800674a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006752:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006754:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006756:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800675a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800675e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8006762:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <SDMMC_Init+0x50>)
 8006770:	4013      	ands	r3, r2
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	b004      	add	sp, #16
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	ffc02c00 	.word	0xffc02c00

08006790 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f043 0203 	orr.w	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0303 	and.w	r3, r3, #3
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800682a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006830:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006836:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <SDMMC_SendCommand+0x50>)
 8006844:	4013      	ands	r3, r2
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	fffee0c0 	.word	0xfffee0c0

08006860 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	b2db      	uxtb	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3314      	adds	r3, #20
 8006888:	461a      	mov	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	4413      	add	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80068cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80068d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0

}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006906:	2310      	movs	r3, #16
 8006908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800690a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800690e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006918:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ff73 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006926:	f241 3288 	movw	r2, #5000	; 0x1388
 800692a:	2110      	movs	r1, #16
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 faa5 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006934:	69fb      	ldr	r3, [r7, #28]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b088      	sub	sp, #32
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800694c:	2311      	movs	r3, #17
 800694e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800695a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800695e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ff50 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800696c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006970:	2111      	movs	r1, #17
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa82 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006978:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800697a:	69fb      	ldr	r3, [r7, #28]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006992:	2312      	movs	r3, #18
 8006994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800699a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069a6:	f107 0308 	add.w	r3, r7, #8
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff2d 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80069b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b6:	2112      	movs	r1, #18
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa5f 	bl	8006e7c <SDMMC_GetCmdResp1>
 80069be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069c0:	69fb      	ldr	r3, [r7, #28]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b088      	sub	sp, #32
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80069d8:	2318      	movs	r3, #24
 80069da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ff0a 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80069f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fc:	2118      	movs	r1, #24
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa3c 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a06:	69fb      	ldr	r3, [r7, #28]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006a1e:	2319      	movs	r3, #25
 8006a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff fee7 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	2119      	movs	r1, #25
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa19 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006a64:	230c      	movs	r3, #12
 8006a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a76:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a90:	f107 0308 	add.w	r3, r7, #8
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff feb8 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006a9c:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <SDMMC_CmdStopTransfer+0x68>)
 8006a9e:	210c      	movs	r1, #12
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9eb 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006aa6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]

  return errorstate;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	05f5e100 	.word	0x05f5e100

08006ac4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006ad4:	2307      	movs	r3, #7
 8006ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006adc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ae8:	f107 0310 	add.w	r3, r7, #16
 8006aec:	4619      	mov	r1, r3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff fe8c 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af8:	2107      	movs	r1, #7
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f9be 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3728      	adds	r7, #40	; 0x28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fe6b 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f976 	bl	8006e28 <SDMMC_GetCmdError>
 8006b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b50:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b56:	2308      	movs	r3, #8
 8006b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fe4b 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fb6a 	bl	8007250 <SDMMC_GetCmdResp7>
 8006b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006b96:	2337      	movs	r3, #55	; 0x37
 8006b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006baa:	f107 0308 	add.w	r3, r7, #8
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fe2b 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bba:	2137      	movs	r1, #55	; 0x37
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f95d 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b088      	sub	sp, #32
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006bdc:	2329      	movs	r3, #41	; 0x29
 8006bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fe08 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa75 	bl	80070ec <SDMMC_GetCmdResp3>
 8006c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c04:	69fb      	ldr	r3, [r7, #28]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006c1c:	2306      	movs	r3, #6
 8006c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fde8 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	2106      	movs	r1, #6
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f91a 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006c48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006c60:	2333      	movs	r3, #51	; 0x33
 8006c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c74:	f107 0308 	add.w	r3, r7, #8
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff fdc6 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c84:	2133      	movs	r1, #51	; 0x33
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8f8 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006ca8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fda4 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9c9 	bl	800705c <SDMMC_GetCmdResp2>
 8006cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006ce4:	2309      	movs	r3, #9
 8006ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cf8:	f107 0308 	add.w	r3, r7, #8
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fd84 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9a9 	bl	800705c <SDMMC_GetCmdResp2>
 8006d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b088      	sub	sp, #32
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006d24:	2303      	movs	r3, #3
 8006d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d38:	f107 0308 	add.w	r3, r7, #8
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fd64 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	2103      	movs	r1, #3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa0b 	bl	8007164 <SDMMC_GetCmdResp6>
 8006d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d50:	69fb      	ldr	r3, [r7, #28]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b088      	sub	sp, #32
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006d68:	230d      	movs	r3, #13
 8006d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d7c:	f107 0308 	add.w	r3, r7, #8
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fd42 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	210d      	movs	r1, #13
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f874 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d96:	69fb      	ldr	r3, [r7, #28]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006dac:	230d      	movs	r3, #13
 8006dae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dc0:	f107 0308 	add.w	r3, r7, #8
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fd20 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd0:	210d      	movs	r1, #13
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f852 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dda:	69fb      	ldr	r3, [r7, #28]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8006df0:	230b      	movs	r3, #11
 8006df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fcfe 	bl	800680c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	210b      	movs	r1, #11
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f830 	bl	8006e7c <SDMMC_GetCmdResp1>
 8006e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006e28:	b490      	push	{r4, r7}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <SDMMC_GetCmdError+0x48>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0f      	ldr	r2, [pc, #60]	; (8006e74 <SDMMC_GetCmdError+0x4c>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e40:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8006e44:	4623      	mov	r3, r4
 8006e46:	1e5c      	subs	r4, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e50:	e009      	b.n	8006e66 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f2      	beq.n	8006e44 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a05      	ldr	r2, [pc, #20]	; (8006e78 <SDMMC_GetCmdError+0x50>)
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc90      	pop	{r4, r7}
 8006e6e:	4770      	bx	lr
 8006e70:	24000000 	.word	0x24000000
 8006e74:	10624dd3 	.word	0x10624dd3
 8006e78:	002000c5 	.word	0x002000c5

08006e7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	460b      	mov	r3, r1
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e8a:	4b6f      	ldr	r3, [pc, #444]	; (8007048 <SDMMC_GetCmdResp1+0x1cc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6f      	ldr	r2, [pc, #444]	; (800704c <SDMMC_GetCmdResp1+0x1d0>)
 8006e90:	fba2 2303 	umull	r2, r3, r2, r3
 8006e94:	0a5b      	lsrs	r3, r3, #9
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	1e5c      	subs	r4, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea8:	e0c9      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4b67      	ldr	r3, [pc, #412]	; (8007050 <SDMMC_GetCmdResp1+0x1d4>)
 8006eb4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <SDMMC_GetCmdResp1+0x20>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1eb      	bne.n	8006e9c <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	e0b1      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a6      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a58      	ldr	r2, [pc, #352]	; (8007054 <SDMMC_GetCmdResp1+0x1d8>)
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fcb2 	bl	8006860 <SDMMC_GetCommandResponse>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d001      	beq.n	8006f0a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e099      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fcb4 	bl	800687a <SDMMC_GetResponse>
 8006f12:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4b50      	ldr	r3, [pc, #320]	; (8007058 <SDMMC_GetCmdResp1+0x1dc>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e08d      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da02      	bge.n	8006f2e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f2c:	e087      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f38:	2340      	movs	r3, #64	; 0x40
 8006f3a:	e080      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	e079      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f58:	e071      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f68:	e069      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f78:	e061      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f88:	e059      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f98:	e051      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fa8:	e049      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fb8:	e041      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc8:	e039      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fd8:	e031      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fe8:	e029      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ff8:	e021      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007004:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007008:	e019      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007014:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007018:	e011      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007028:	e009      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007034:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007038:	e001      	b.n	800703e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800703a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	bf00      	nop
 8007048:	24000000 	.word	0x24000000
 800704c:	10624dd3 	.word	0x10624dd3
 8007050:	00200045 	.word	0x00200045
 8007054:	002000c5 	.word	0x002000c5
 8007058:	fdffe008 	.word	0xfdffe008

0800705c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800705c:	b490      	push	{r4, r7}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <SDMMC_GetCmdResp2+0x84>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <SDMMC_GetCmdResp2+0x88>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	0a5b      	lsrs	r3, r3, #9
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007078:	4623      	mov	r3, r4
 800707a:	1e5c      	subs	r4, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007084:	e026      	b.n	80070d4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <SDMMC_GetCmdResp2+0x1c>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1eb      	bne.n	8007078 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2204      	movs	r2, #4
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070b2:	2304      	movs	r3, #4
 80070b4:	e00e      	b.n	80070d4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e003      	b.n	80070d4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a06      	ldr	r2, [pc, #24]	; (80070e8 <SDMMC_GetCmdResp2+0x8c>)
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc90      	pop	{r4, r7}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	24000000 	.word	0x24000000
 80070e4:	10624dd3 	.word	0x10624dd3
 80070e8:	002000c5 	.word	0x002000c5

080070ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80070ec:	b490      	push	{r4, r7}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070f4:	4b18      	ldr	r3, [pc, #96]	; (8007158 <SDMMC_GetCmdResp3+0x6c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <SDMMC_GetCmdResp3+0x70>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	0a5b      	lsrs	r3, r3, #9
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007108:	4623      	mov	r3, r4
 800710a:	1e5c      	subs	r4, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007114:	e01b      	b.n	800714e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <SDMMC_GetCmdResp3+0x1c>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1eb      	bne.n	8007108 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2204      	movs	r2, #4
 8007140:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007142:	2304      	movs	r3, #4
 8007144:	e003      	b.n	800714e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a05      	ldr	r2, [pc, #20]	; (8007160 <SDMMC_GetCmdResp3+0x74>)
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bc90      	pop	{r4, r7}
 8007156:	4770      	bx	lr
 8007158:	24000000 	.word	0x24000000
 800715c:	10624dd3 	.word	0x10624dd3
 8007160:	002000c5 	.word	0x002000c5

08007164 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	460b      	mov	r3, r1
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007172:	4b34      	ldr	r3, [pc, #208]	; (8007244 <SDMMC_GetCmdResp6+0xe0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a34      	ldr	r2, [pc, #208]	; (8007248 <SDMMC_GetCmdResp6+0xe4>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	0a5b      	lsrs	r3, r3, #9
 800717e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007182:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007186:	4623      	mov	r3, r4
 8007188:	1e5c      	subs	r4, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800718e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007192:	e052      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0f0      	beq.n	8007186 <SDMMC_GetCmdResp6+0x22>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1eb      	bne.n	8007186 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2204      	movs	r2, #4
 80071be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071c0:	2304      	movs	r3, #4
 80071c2:	e03a      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e02f      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fb40 	bl	8006860 <SDMMC_GetCommandResponse>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d001      	beq.n	80071ee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e025      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4a16      	ldr	r2, [pc, #88]	; (800724c <SDMMC_GetCmdResp6+0xe8>)
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80071f4:	2100      	movs	r1, #0
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fb3f 	bl	800687a <SDMMC_GetResponse>
 80071fc:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007212:	2300      	movs	r3, #0
 8007214:	e011      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007224:	e009      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007234:	e001      	b.n	800723a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	bd90      	pop	{r4, r7, pc}
 8007242:	bf00      	nop
 8007244:	24000000 	.word	0x24000000
 8007248:	10624dd3 	.word	0x10624dd3
 800724c:	002000c5 	.word	0x002000c5

08007250 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007250:	b490      	push	{r4, r7}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007258:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <SDMMC_GetCmdResp7+0x90>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a21      	ldr	r2, [pc, #132]	; (80072e4 <SDMMC_GetCmdResp7+0x94>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	0a5b      	lsrs	r3, r3, #9
 8007264:	f241 3288 	movw	r2, #5000	; 0x1388
 8007268:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800726c:	4623      	mov	r3, r4
 800726e:	1e5c      	subs	r4, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007278:	e02c      	b.n	80072d4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <SDMMC_GetCmdResp7+0x1c>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1eb      	bne.n	800726c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2204      	movs	r2, #4
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072a6:	2304      	movs	r3, #4
 80072a8:	e014      	b.n	80072d4 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072bc:	2301      	movs	r3, #1
 80072be:	e009      	b.n	80072d4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2240      	movs	r2, #64	; 0x40
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0

}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc90      	pop	{r4, r7}
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	24000000 	.word	0x24000000
 80072e4:	10624dd3 	.word	0x10624dd3

080072e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80072ec:	4904      	ldr	r1, [pc, #16]	; (8007300 <MX_FATFS_Init+0x18>)
 80072ee:	4805      	ldr	r0, [pc, #20]	; (8007304 <MX_FATFS_Init+0x1c>)
 80072f0:	f000 f9d6 	bl	80076a0 <FATFS_LinkDriver>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	4b03      	ldr	r3, [pc, #12]	; (8007308 <MX_FATFS_Init+0x20>)
 80072fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	24000280 	.word	0x24000280
 8007304:	08008054 	.word	0x08008054
 8007308:	2400027c 	.word	0x2400027c

0800730c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007316:	f000 f86b 	bl	80073f0 <BSP_SD_IsDetected>
 800731a:	4603      	mov	r3, r0
 800731c:	2b01      	cmp	r3, #1
 800731e:	d001      	beq.n	8007324 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007320:	2302      	movs	r3, #2
 8007322:	e005      	b.n	8007330 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007324:	4804      	ldr	r0, [pc, #16]	; (8007338 <BSP_SD_Init+0x2c>)
 8007326:	f7fc fe23 	bl	8003f70 <HAL_SD_Init>
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800732e:	79fb      	ldrb	r3, [r7, #7]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	240000a8 	.word	0x240000a8

0800733c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	4806      	ldr	r0, [pc, #24]	; (8007374 <BSP_SD_ReadBlocks+0x38>)
 800735a:	f7fc ff1b 	bl	8004194 <HAL_SD_ReadBlocks>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007368:	7dfb      	ldrb	r3, [r7, #23]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	240000a8 	.word	0x240000a8

08007378 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af02      	add	r7, sp, #8
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4806      	ldr	r0, [pc, #24]	; (80073b0 <BSP_SD_WriteBlocks+0x38>)
 8007396:	f7fd f8a5 	bl	80044e4 <HAL_SD_WriteBlocks>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	240000a8 	.word	0x240000a8

080073b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80073b8:	4805      	ldr	r0, [pc, #20]	; (80073d0 <BSP_SD_GetCardState+0x1c>)
 80073ba:	f7fd fd43 	bl	8004e44 <HAL_SD_GetCardState>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	240000a8 	.word	0x240000a8

080073d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4803      	ldr	r0, [pc, #12]	; (80073ec <BSP_SD_GetCardInfo+0x18>)
 80073e0:	f7fd fc74 	bl	8004ccc <HAL_SD_GetCardInfo>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	240000a8 	.word	0x240000a8

080073f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80073f6:	2301      	movs	r3, #1
 80073f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80073fa:	f000 f80b 	bl	8007414 <BSP_PlatformIsDetected>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007404:	2300      	movs	r3, #0
 8007406:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	b2db      	uxtb	r3, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800741a:	2301      	movs	r3, #1
 800741c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800741e:	2108      	movs	r1, #8
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <BSP_PlatformIsDetected+0x28>)
 8007422:	f7f9 ff9b 	bl	800135c <HAL_GPIO_ReadPin>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800742c:	2300      	movs	r3, #0
 800742e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007430:	79fb      	ldrb	r3, [r7, #7]
}  
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	58021400 	.word	0x58021400

08007440 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <SD_CheckStatus+0x38>)
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007450:	f7ff ffb0 	bl	80073b4 <BSP_SD_GetCardState>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d107      	bne.n	800746a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <SD_CheckStatus+0x38>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b04      	ldr	r3, [pc, #16]	; (8007478 <SD_CheckStatus+0x38>)
 8007468:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800746a:	4b03      	ldr	r3, [pc, #12]	; (8007478 <SD_CheckStatus+0x38>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b2db      	uxtb	r3, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	2400000d 	.word	0x2400000d

0800747c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <SD_initialize+0x38>)
 8007488:	2201      	movs	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800748c:	f7ff ff3e 	bl	800730c <BSP_SD_Init>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d107      	bne.n	80074a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff ffd1 	bl	8007440 <SD_CheckStatus>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <SD_initialize+0x38>)
 80074a4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80074a6:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <SD_initialize+0x38>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b2db      	uxtb	r3, r3
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	2400000d 	.word	0x2400000d

080074b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ffbb 	bl	8007440 <SD_CheckStatus>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	68b8      	ldr	r0, [r7, #8]
 80074f2:	f7ff ff23 	bl	800733c <BSP_SD_ReadBlocks>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80074fc:	bf00      	nop
 80074fe:	f7ff ff59 	bl	80073b4 <BSP_SD_GetCardState>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1fa      	bne.n	80074fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b086      	sub	sp, #24
 800751a:	af00      	add	r7, sp, #0
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	68b8      	ldr	r0, [r7, #8]
 8007534:	f7ff ff20 	bl	8007378 <BSP_SD_WriteBlocks>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d107      	bne.n	800754e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800753e:	bf00      	nop
 8007540:	f7ff ff38 	bl	80073b4 <BSP_SD_GetCardState>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1fa      	bne.n	8007540 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08c      	sub	sp, #48	; 0x30
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	603a      	str	r2, [r7, #0]
 8007562:	71fb      	strb	r3, [r7, #7]
 8007564:	460b      	mov	r3, r1
 8007566:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800756e:	4b25      	ldr	r3, [pc, #148]	; (8007604 <SD_ioctl+0xac>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <SD_ioctl+0x28>
 800757c:	2303      	movs	r3, #3
 800757e:	e03c      	b.n	80075fa <SD_ioctl+0xa2>

  switch (cmd)
 8007580:	79bb      	ldrb	r3, [r7, #6]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d834      	bhi.n	80075f0 <SD_ioctl+0x98>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <SD_ioctl+0x34>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075d7 	.word	0x080075d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075a2:	e028      	b.n	80075f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff ff13 	bl	80073d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80075ae:	6a3a      	ldr	r2, [r7, #32]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075ba:	e01c      	b.n	80075f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075bc:	f107 0308 	add.w	r3, r7, #8
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff07 	bl	80073d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075d4:	e00f      	b.n	80075f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fefa 	bl	80073d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	0a5a      	lsrs	r2, r3, #9
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075ee:	e002      	b.n	80075f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80075f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3730      	adds	r7, #48	; 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	2400000d 	.word	0x2400000d

08007608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800761e:	4b1f      	ldr	r3, [pc, #124]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007620:	7a5b      	ldrb	r3, [r3, #9]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d131      	bne.n	800768c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007628:	4b1c      	ldr	r3, [pc, #112]	; (800769c <FATFS_LinkDriverEx+0x94>)
 800762a:	7a5b      	ldrb	r3, [r3, #9]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007632:	2100      	movs	r1, #0
 8007634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007636:	4b19      	ldr	r3, [pc, #100]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007638:	7a5b      	ldrb	r3, [r3, #9]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <FATFS_LinkDriverEx+0x94>)
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007648:	7a5b      	ldrb	r3, [r3, #9]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007650:	4413      	add	r3, r2
 8007652:	79fa      	ldrb	r2, [r7, #7]
 8007654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007658:	7a5b      	ldrb	r3, [r3, #9]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	b2d1      	uxtb	r1, r2
 8007660:	4a0e      	ldr	r2, [pc, #56]	; (800769c <FATFS_LinkDriverEx+0x94>)
 8007662:	7251      	strb	r1, [r2, #9]
 8007664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007666:	7dbb      	ldrb	r3, [r7, #22]
 8007668:	3330      	adds	r3, #48	; 0x30
 800766a:	b2da      	uxtb	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	223a      	movs	r2, #58	; 0x3a
 8007676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	3302      	adds	r3, #2
 800767c:	222f      	movs	r2, #47	; 0x2f
 800767e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3303      	adds	r3, #3
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	24000094 	.word	0x24000094

080076a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076aa:	2200      	movs	r2, #0
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff ffaa 	bl	8007608 <FATFS_LinkDriverEx>
 80076b4:	4603      	mov	r3, r0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <__errno>:
 80076c0:	4b01      	ldr	r3, [pc, #4]	; (80076c8 <__errno+0x8>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	24000010 	.word	0x24000010

080076cc <__libc_init_array>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0d      	ldr	r6, [pc, #52]	; (8007704 <__libc_init_array+0x38>)
 80076d0:	4c0d      	ldr	r4, [pc, #52]	; (8007708 <__libc_init_array+0x3c>)
 80076d2:	1ba4      	subs	r4, r4, r6
 80076d4:	10a4      	asrs	r4, r4, #2
 80076d6:	2500      	movs	r5, #0
 80076d8:	42a5      	cmp	r5, r4
 80076da:	d109      	bne.n	80076f0 <__libc_init_array+0x24>
 80076dc:	4e0b      	ldr	r6, [pc, #44]	; (800770c <__libc_init_array+0x40>)
 80076de:	4c0c      	ldr	r4, [pc, #48]	; (8007710 <__libc_init_array+0x44>)
 80076e0:	f000 fc88 	bl	8007ff4 <_init>
 80076e4:	1ba4      	subs	r4, r4, r6
 80076e6:	10a4      	asrs	r4, r4, #2
 80076e8:	2500      	movs	r5, #0
 80076ea:	42a5      	cmp	r5, r4
 80076ec:	d105      	bne.n	80076fa <__libc_init_array+0x2e>
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076f4:	4798      	blx	r3
 80076f6:	3501      	adds	r5, #1
 80076f8:	e7ee      	b.n	80076d8 <__libc_init_array+0xc>
 80076fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076fe:	4798      	blx	r3
 8007700:	3501      	adds	r5, #1
 8007702:	e7f2      	b.n	80076ea <__libc_init_array+0x1e>
 8007704:	080080cc 	.word	0x080080cc
 8007708:	080080cc 	.word	0x080080cc
 800770c:	080080cc 	.word	0x080080cc
 8007710:	080080d0 	.word	0x080080d0

08007714 <memset>:
 8007714:	4402      	add	r2, r0
 8007716:	4603      	mov	r3, r0
 8007718:	4293      	cmp	r3, r2
 800771a:	d100      	bne.n	800771e <memset+0xa>
 800771c:	4770      	bx	lr
 800771e:	f803 1b01 	strb.w	r1, [r3], #1
 8007722:	e7f9      	b.n	8007718 <memset+0x4>

08007724 <_puts_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	460e      	mov	r6, r1
 8007728:	4605      	mov	r5, r0
 800772a:	b118      	cbz	r0, 8007734 <_puts_r+0x10>
 800772c:	6983      	ldr	r3, [r0, #24]
 800772e:	b90b      	cbnz	r3, 8007734 <_puts_r+0x10>
 8007730:	f000 fa0c 	bl	8007b4c <__sinit>
 8007734:	69ab      	ldr	r3, [r5, #24]
 8007736:	68ac      	ldr	r4, [r5, #8]
 8007738:	b913      	cbnz	r3, 8007740 <_puts_r+0x1c>
 800773a:	4628      	mov	r0, r5
 800773c:	f000 fa06 	bl	8007b4c <__sinit>
 8007740:	4b23      	ldr	r3, [pc, #140]	; (80077d0 <_puts_r+0xac>)
 8007742:	429c      	cmp	r4, r3
 8007744:	d117      	bne.n	8007776 <_puts_r+0x52>
 8007746:	686c      	ldr	r4, [r5, #4]
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	071b      	lsls	r3, r3, #28
 800774c:	d51d      	bpl.n	800778a <_puts_r+0x66>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	b1db      	cbz	r3, 800778a <_puts_r+0x66>
 8007752:	3e01      	subs	r6, #1
 8007754:	68a3      	ldr	r3, [r4, #8]
 8007756:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800775a:	3b01      	subs	r3, #1
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	b9e9      	cbnz	r1, 800779c <_puts_r+0x78>
 8007760:	2b00      	cmp	r3, #0
 8007762:	da2e      	bge.n	80077c2 <_puts_r+0x9e>
 8007764:	4622      	mov	r2, r4
 8007766:	210a      	movs	r1, #10
 8007768:	4628      	mov	r0, r5
 800776a:	f000 f83f 	bl	80077ec <__swbuf_r>
 800776e:	3001      	adds	r0, #1
 8007770:	d011      	beq.n	8007796 <_puts_r+0x72>
 8007772:	200a      	movs	r0, #10
 8007774:	e011      	b.n	800779a <_puts_r+0x76>
 8007776:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <_puts_r+0xb0>)
 8007778:	429c      	cmp	r4, r3
 800777a:	d101      	bne.n	8007780 <_puts_r+0x5c>
 800777c:	68ac      	ldr	r4, [r5, #8]
 800777e:	e7e3      	b.n	8007748 <_puts_r+0x24>
 8007780:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <_puts_r+0xb4>)
 8007782:	429c      	cmp	r4, r3
 8007784:	bf08      	it	eq
 8007786:	68ec      	ldreq	r4, [r5, #12]
 8007788:	e7de      	b.n	8007748 <_puts_r+0x24>
 800778a:	4621      	mov	r1, r4
 800778c:	4628      	mov	r0, r5
 800778e:	f000 f87f 	bl	8007890 <__swsetup_r>
 8007792:	2800      	cmp	r0, #0
 8007794:	d0dd      	beq.n	8007752 <_puts_r+0x2e>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	2b00      	cmp	r3, #0
 800779e:	da04      	bge.n	80077aa <_puts_r+0x86>
 80077a0:	69a2      	ldr	r2, [r4, #24]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	dc06      	bgt.n	80077b4 <_puts_r+0x90>
 80077a6:	290a      	cmp	r1, #10
 80077a8:	d004      	beq.n	80077b4 <_puts_r+0x90>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	7019      	strb	r1, [r3, #0]
 80077b2:	e7cf      	b.n	8007754 <_puts_r+0x30>
 80077b4:	4622      	mov	r2, r4
 80077b6:	4628      	mov	r0, r5
 80077b8:	f000 f818 	bl	80077ec <__swbuf_r>
 80077bc:	3001      	adds	r0, #1
 80077be:	d1c9      	bne.n	8007754 <_puts_r+0x30>
 80077c0:	e7e9      	b.n	8007796 <_puts_r+0x72>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	200a      	movs	r0, #10
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	6022      	str	r2, [r4, #0]
 80077ca:	7018      	strb	r0, [r3, #0]
 80077cc:	e7e5      	b.n	800779a <_puts_r+0x76>
 80077ce:	bf00      	nop
 80077d0:	0800808c 	.word	0x0800808c
 80077d4:	080080ac 	.word	0x080080ac
 80077d8:	0800806c 	.word	0x0800806c

080077dc <puts>:
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <puts+0xc>)
 80077de:	4601      	mov	r1, r0
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	f7ff bf9f 	b.w	8007724 <_puts_r>
 80077e6:	bf00      	nop
 80077e8:	24000010 	.word	0x24000010

080077ec <__swbuf_r>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	460e      	mov	r6, r1
 80077f0:	4614      	mov	r4, r2
 80077f2:	4605      	mov	r5, r0
 80077f4:	b118      	cbz	r0, 80077fe <__swbuf_r+0x12>
 80077f6:	6983      	ldr	r3, [r0, #24]
 80077f8:	b90b      	cbnz	r3, 80077fe <__swbuf_r+0x12>
 80077fa:	f000 f9a7 	bl	8007b4c <__sinit>
 80077fe:	4b21      	ldr	r3, [pc, #132]	; (8007884 <__swbuf_r+0x98>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d12a      	bne.n	800785a <__swbuf_r+0x6e>
 8007804:	686c      	ldr	r4, [r5, #4]
 8007806:	69a3      	ldr	r3, [r4, #24]
 8007808:	60a3      	str	r3, [r4, #8]
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	071a      	lsls	r2, r3, #28
 800780e:	d52e      	bpl.n	800786e <__swbuf_r+0x82>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	b363      	cbz	r3, 800786e <__swbuf_r+0x82>
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	1ac0      	subs	r0, r0, r3
 800781a:	6963      	ldr	r3, [r4, #20]
 800781c:	b2f6      	uxtb	r6, r6
 800781e:	4283      	cmp	r3, r0
 8007820:	4637      	mov	r7, r6
 8007822:	dc04      	bgt.n	800782e <__swbuf_r+0x42>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f926 	bl	8007a78 <_fflush_r>
 800782c:	bb28      	cbnz	r0, 800787a <__swbuf_r+0x8e>
 800782e:	68a3      	ldr	r3, [r4, #8]
 8007830:	3b01      	subs	r3, #1
 8007832:	60a3      	str	r3, [r4, #8]
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	6022      	str	r2, [r4, #0]
 800783a:	701e      	strb	r6, [r3, #0]
 800783c:	6963      	ldr	r3, [r4, #20]
 800783e:	3001      	adds	r0, #1
 8007840:	4283      	cmp	r3, r0
 8007842:	d004      	beq.n	800784e <__swbuf_r+0x62>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	07db      	lsls	r3, r3, #31
 8007848:	d519      	bpl.n	800787e <__swbuf_r+0x92>
 800784a:	2e0a      	cmp	r6, #10
 800784c:	d117      	bne.n	800787e <__swbuf_r+0x92>
 800784e:	4621      	mov	r1, r4
 8007850:	4628      	mov	r0, r5
 8007852:	f000 f911 	bl	8007a78 <_fflush_r>
 8007856:	b190      	cbz	r0, 800787e <__swbuf_r+0x92>
 8007858:	e00f      	b.n	800787a <__swbuf_r+0x8e>
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <__swbuf_r+0x9c>)
 800785c:	429c      	cmp	r4, r3
 800785e:	d101      	bne.n	8007864 <__swbuf_r+0x78>
 8007860:	68ac      	ldr	r4, [r5, #8]
 8007862:	e7d0      	b.n	8007806 <__swbuf_r+0x1a>
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <__swbuf_r+0xa0>)
 8007866:	429c      	cmp	r4, r3
 8007868:	bf08      	it	eq
 800786a:	68ec      	ldreq	r4, [r5, #12]
 800786c:	e7cb      	b.n	8007806 <__swbuf_r+0x1a>
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f80d 	bl	8007890 <__swsetup_r>
 8007876:	2800      	cmp	r0, #0
 8007878:	d0cc      	beq.n	8007814 <__swbuf_r+0x28>
 800787a:	f04f 37ff 	mov.w	r7, #4294967295
 800787e:	4638      	mov	r0, r7
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007882:	bf00      	nop
 8007884:	0800808c 	.word	0x0800808c
 8007888:	080080ac 	.word	0x080080ac
 800788c:	0800806c 	.word	0x0800806c

08007890 <__swsetup_r>:
 8007890:	4b32      	ldr	r3, [pc, #200]	; (800795c <__swsetup_r+0xcc>)
 8007892:	b570      	push	{r4, r5, r6, lr}
 8007894:	681d      	ldr	r5, [r3, #0]
 8007896:	4606      	mov	r6, r0
 8007898:	460c      	mov	r4, r1
 800789a:	b125      	cbz	r5, 80078a6 <__swsetup_r+0x16>
 800789c:	69ab      	ldr	r3, [r5, #24]
 800789e:	b913      	cbnz	r3, 80078a6 <__swsetup_r+0x16>
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 f953 	bl	8007b4c <__sinit>
 80078a6:	4b2e      	ldr	r3, [pc, #184]	; (8007960 <__swsetup_r+0xd0>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	d10f      	bne.n	80078cc <__swsetup_r+0x3c>
 80078ac:	686c      	ldr	r4, [r5, #4]
 80078ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	0715      	lsls	r5, r2, #28
 80078b6:	d42c      	bmi.n	8007912 <__swsetup_r+0x82>
 80078b8:	06d0      	lsls	r0, r2, #27
 80078ba:	d411      	bmi.n	80078e0 <__swsetup_r+0x50>
 80078bc:	2209      	movs	r2, #9
 80078be:	6032      	str	r2, [r6, #0]
 80078c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	e03e      	b.n	800794a <__swsetup_r+0xba>
 80078cc:	4b25      	ldr	r3, [pc, #148]	; (8007964 <__swsetup_r+0xd4>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	d101      	bne.n	80078d6 <__swsetup_r+0x46>
 80078d2:	68ac      	ldr	r4, [r5, #8]
 80078d4:	e7eb      	b.n	80078ae <__swsetup_r+0x1e>
 80078d6:	4b24      	ldr	r3, [pc, #144]	; (8007968 <__swsetup_r+0xd8>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	bf08      	it	eq
 80078dc:	68ec      	ldreq	r4, [r5, #12]
 80078de:	e7e6      	b.n	80078ae <__swsetup_r+0x1e>
 80078e0:	0751      	lsls	r1, r2, #29
 80078e2:	d512      	bpl.n	800790a <__swsetup_r+0x7a>
 80078e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078e6:	b141      	cbz	r1, 80078fa <__swsetup_r+0x6a>
 80078e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078ec:	4299      	cmp	r1, r3
 80078ee:	d002      	beq.n	80078f6 <__swsetup_r+0x66>
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 fa19 	bl	8007d28 <_free_r>
 80078f6:	2300      	movs	r3, #0
 80078f8:	6363      	str	r3, [r4, #52]	; 0x34
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f043 0308 	orr.w	r3, r3, #8
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	b94b      	cbnz	r3, 800792a <__swsetup_r+0x9a>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800791c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007920:	d003      	beq.n	800792a <__swsetup_r+0x9a>
 8007922:	4621      	mov	r1, r4
 8007924:	4630      	mov	r0, r6
 8007926:	f000 f9bf 	bl	8007ca8 <__smakebuf_r>
 800792a:	89a2      	ldrh	r2, [r4, #12]
 800792c:	f012 0301 	ands.w	r3, r2, #1
 8007930:	d00c      	beq.n	800794c <__swsetup_r+0xbc>
 8007932:	2300      	movs	r3, #0
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	6963      	ldr	r3, [r4, #20]
 8007938:	425b      	negs	r3, r3
 800793a:	61a3      	str	r3, [r4, #24]
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	b953      	cbnz	r3, 8007956 <__swsetup_r+0xc6>
 8007940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007944:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007948:	d1ba      	bne.n	80078c0 <__swsetup_r+0x30>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	0792      	lsls	r2, r2, #30
 800794e:	bf58      	it	pl
 8007950:	6963      	ldrpl	r3, [r4, #20]
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	e7f2      	b.n	800793c <__swsetup_r+0xac>
 8007956:	2000      	movs	r0, #0
 8007958:	e7f7      	b.n	800794a <__swsetup_r+0xba>
 800795a:	bf00      	nop
 800795c:	24000010 	.word	0x24000010
 8007960:	0800808c 	.word	0x0800808c
 8007964:	080080ac 	.word	0x080080ac
 8007968:	0800806c 	.word	0x0800806c

0800796c <__sflush_r>:
 800796c:	898a      	ldrh	r2, [r1, #12]
 800796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	4605      	mov	r5, r0
 8007974:	0710      	lsls	r0, r2, #28
 8007976:	460c      	mov	r4, r1
 8007978:	d458      	bmi.n	8007a2c <__sflush_r+0xc0>
 800797a:	684b      	ldr	r3, [r1, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dc05      	bgt.n	800798c <__sflush_r+0x20>
 8007980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	dc02      	bgt.n	800798c <__sflush_r+0x20>
 8007986:	2000      	movs	r0, #0
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800798e:	2e00      	cmp	r6, #0
 8007990:	d0f9      	beq.n	8007986 <__sflush_r+0x1a>
 8007992:	2300      	movs	r3, #0
 8007994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007998:	682f      	ldr	r7, [r5, #0]
 800799a:	6a21      	ldr	r1, [r4, #32]
 800799c:	602b      	str	r3, [r5, #0]
 800799e:	d032      	beq.n	8007a06 <__sflush_r+0x9a>
 80079a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	075a      	lsls	r2, r3, #29
 80079a6:	d505      	bpl.n	80079b4 <__sflush_r+0x48>
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	1ac0      	subs	r0, r0, r3
 80079ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ae:	b10b      	cbz	r3, 80079b4 <__sflush_r+0x48>
 80079b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b2:	1ac0      	subs	r0, r0, r3
 80079b4:	2300      	movs	r3, #0
 80079b6:	4602      	mov	r2, r0
 80079b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ba:	6a21      	ldr	r1, [r4, #32]
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	d106      	bne.n	80079d4 <__sflush_r+0x68>
 80079c6:	6829      	ldr	r1, [r5, #0]
 80079c8:	291d      	cmp	r1, #29
 80079ca:	d848      	bhi.n	8007a5e <__sflush_r+0xf2>
 80079cc:	4a29      	ldr	r2, [pc, #164]	; (8007a74 <__sflush_r+0x108>)
 80079ce:	40ca      	lsrs	r2, r1
 80079d0:	07d6      	lsls	r6, r2, #31
 80079d2:	d544      	bpl.n	8007a5e <__sflush_r+0xf2>
 80079d4:	2200      	movs	r2, #0
 80079d6:	6062      	str	r2, [r4, #4]
 80079d8:	04d9      	lsls	r1, r3, #19
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	6022      	str	r2, [r4, #0]
 80079de:	d504      	bpl.n	80079ea <__sflush_r+0x7e>
 80079e0:	1c42      	adds	r2, r0, #1
 80079e2:	d101      	bne.n	80079e8 <__sflush_r+0x7c>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b903      	cbnz	r3, 80079ea <__sflush_r+0x7e>
 80079e8:	6560      	str	r0, [r4, #84]	; 0x54
 80079ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ec:	602f      	str	r7, [r5, #0]
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d0c9      	beq.n	8007986 <__sflush_r+0x1a>
 80079f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f6:	4299      	cmp	r1, r3
 80079f8:	d002      	beq.n	8007a00 <__sflush_r+0x94>
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f994 	bl	8007d28 <_free_r>
 8007a00:	2000      	movs	r0, #0
 8007a02:	6360      	str	r0, [r4, #52]	; 0x34
 8007a04:	e7c0      	b.n	8007988 <__sflush_r+0x1c>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b0      	blx	r6
 8007a0c:	1c41      	adds	r1, r0, #1
 8007a0e:	d1c8      	bne.n	80079a2 <__sflush_r+0x36>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0c5      	beq.n	80079a2 <__sflush_r+0x36>
 8007a16:	2b1d      	cmp	r3, #29
 8007a18:	d001      	beq.n	8007a1e <__sflush_r+0xb2>
 8007a1a:	2b16      	cmp	r3, #22
 8007a1c:	d101      	bne.n	8007a22 <__sflush_r+0xb6>
 8007a1e:	602f      	str	r7, [r5, #0]
 8007a20:	e7b1      	b.n	8007986 <__sflush_r+0x1a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	e7ad      	b.n	8007988 <__sflush_r+0x1c>
 8007a2c:	690f      	ldr	r7, [r1, #16]
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	d0a9      	beq.n	8007986 <__sflush_r+0x1a>
 8007a32:	0793      	lsls	r3, r2, #30
 8007a34:	680e      	ldr	r6, [r1, #0]
 8007a36:	bf08      	it	eq
 8007a38:	694b      	ldreq	r3, [r1, #20]
 8007a3a:	600f      	str	r7, [r1, #0]
 8007a3c:	bf18      	it	ne
 8007a3e:	2300      	movne	r3, #0
 8007a40:	eba6 0807 	sub.w	r8, r6, r7
 8007a44:	608b      	str	r3, [r1, #8]
 8007a46:	f1b8 0f00 	cmp.w	r8, #0
 8007a4a:	dd9c      	ble.n	8007986 <__sflush_r+0x1a>
 8007a4c:	4643      	mov	r3, r8
 8007a4e:	463a      	mov	r2, r7
 8007a50:	6a21      	ldr	r1, [r4, #32]
 8007a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b0      	blx	r6
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dc06      	bgt.n	8007a6a <__sflush_r+0xfe>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e78e      	b.n	8007988 <__sflush_r+0x1c>
 8007a6a:	4407      	add	r7, r0
 8007a6c:	eba8 0800 	sub.w	r8, r8, r0
 8007a70:	e7e9      	b.n	8007a46 <__sflush_r+0xda>
 8007a72:	bf00      	nop
 8007a74:	20400001 	.word	0x20400001

08007a78 <_fflush_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	690b      	ldr	r3, [r1, #16]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	b1db      	cbz	r3, 8007aba <_fflush_r+0x42>
 8007a82:	b118      	cbz	r0, 8007a8c <_fflush_r+0x14>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_fflush_r+0x14>
 8007a88:	f000 f860 	bl	8007b4c <__sinit>
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <_fflush_r+0x48>)
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d109      	bne.n	8007aa6 <_fflush_r+0x2e>
 8007a92:	686c      	ldr	r4, [r5, #4]
 8007a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a98:	b17b      	cbz	r3, 8007aba <_fflush_r+0x42>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa2:	f7ff bf63 	b.w	800796c <__sflush_r>
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <_fflush_r+0x4c>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	d101      	bne.n	8007ab0 <_fflush_r+0x38>
 8007aac:	68ac      	ldr	r4, [r5, #8]
 8007aae:	e7f1      	b.n	8007a94 <_fflush_r+0x1c>
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <_fflush_r+0x50>)
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	bf08      	it	eq
 8007ab6:	68ec      	ldreq	r4, [r5, #12]
 8007ab8:	e7ec      	b.n	8007a94 <_fflush_r+0x1c>
 8007aba:	2000      	movs	r0, #0
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	0800808c 	.word	0x0800808c
 8007ac4:	080080ac 	.word	0x080080ac
 8007ac8:	0800806c 	.word	0x0800806c

08007acc <std>:
 8007acc:	2300      	movs	r3, #0
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	8181      	strh	r1, [r0, #12]
 8007ada:	6643      	str	r3, [r0, #100]	; 0x64
 8007adc:	81c2      	strh	r2, [r0, #14]
 8007ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ae2:	6183      	str	r3, [r0, #24]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	305c      	adds	r0, #92	; 0x5c
 8007aea:	f7ff fe13 	bl	8007714 <memset>
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x38>)
 8007af0:	6263      	str	r3, [r4, #36]	; 0x24
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <std+0x3c>)
 8007af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <std+0x40>)
 8007af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007afa:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <std+0x44>)
 8007afc:	6224      	str	r4, [r4, #32]
 8007afe:	6323      	str	r3, [r4, #48]	; 0x30
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	08007e99 	.word	0x08007e99
 8007b08:	08007ebb 	.word	0x08007ebb
 8007b0c:	08007ef3 	.word	0x08007ef3
 8007b10:	08007f17 	.word	0x08007f17

08007b14 <_cleanup_r>:
 8007b14:	4901      	ldr	r1, [pc, #4]	; (8007b1c <_cleanup_r+0x8>)
 8007b16:	f000 b885 	b.w	8007c24 <_fwalk_reent>
 8007b1a:	bf00      	nop
 8007b1c:	08007a79 	.word	0x08007a79

08007b20 <__sfmoreglue>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	1e4a      	subs	r2, r1, #1
 8007b24:	2568      	movs	r5, #104	; 0x68
 8007b26:	4355      	muls	r5, r2
 8007b28:	460e      	mov	r6, r1
 8007b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2e:	f000 f949 	bl	8007dc4 <_malloc_r>
 8007b32:	4604      	mov	r4, r0
 8007b34:	b140      	cbz	r0, 8007b48 <__sfmoreglue+0x28>
 8007b36:	2100      	movs	r1, #0
 8007b38:	e9c0 1600 	strd	r1, r6, [r0]
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	60a0      	str	r0, [r4, #8]
 8007b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b44:	f7ff fde6 	bl	8007714 <memset>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}

08007b4c <__sinit>:
 8007b4c:	6983      	ldr	r3, [r0, #24]
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	4604      	mov	r4, r0
 8007b52:	bb33      	cbnz	r3, 8007ba2 <__sinit+0x56>
 8007b54:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b58:	6503      	str	r3, [r0, #80]	; 0x50
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <__sinit+0x58>)
 8007b5c:	4a12      	ldr	r2, [pc, #72]	; (8007ba8 <__sinit+0x5c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6282      	str	r2, [r0, #40]	; 0x28
 8007b62:	4298      	cmp	r0, r3
 8007b64:	bf04      	itt	eq
 8007b66:	2301      	moveq	r3, #1
 8007b68:	6183      	streq	r3, [r0, #24]
 8007b6a:	f000 f81f 	bl	8007bac <__sfp>
 8007b6e:	6060      	str	r0, [r4, #4]
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 f81b 	bl	8007bac <__sfp>
 8007b76:	60a0      	str	r0, [r4, #8]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 f817 	bl	8007bac <__sfp>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	60e0      	str	r0, [r4, #12]
 8007b82:	2104      	movs	r1, #4
 8007b84:	6860      	ldr	r0, [r4, #4]
 8007b86:	f7ff ffa1 	bl	8007acc <std>
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2109      	movs	r1, #9
 8007b8e:	68a0      	ldr	r0, [r4, #8]
 8007b90:	f7ff ff9c 	bl	8007acc <std>
 8007b94:	2202      	movs	r2, #2
 8007b96:	2112      	movs	r1, #18
 8007b98:	68e0      	ldr	r0, [r4, #12]
 8007b9a:	f7ff ff97 	bl	8007acc <std>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	61a3      	str	r3, [r4, #24]
 8007ba2:	bd10      	pop	{r4, pc}
 8007ba4:	08008068 	.word	0x08008068
 8007ba8:	08007b15 	.word	0x08007b15

08007bac <__sfp>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <__sfp+0x70>)
 8007bb0:	681e      	ldr	r6, [r3, #0]
 8007bb2:	69b3      	ldr	r3, [r6, #24]
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	b913      	cbnz	r3, 8007bbe <__sfp+0x12>
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7ff ffc7 	bl	8007b4c <__sinit>
 8007bbe:	3648      	adds	r6, #72	; 0x48
 8007bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	d503      	bpl.n	8007bd0 <__sfp+0x24>
 8007bc8:	6833      	ldr	r3, [r6, #0]
 8007bca:	b133      	cbz	r3, 8007bda <__sfp+0x2e>
 8007bcc:	6836      	ldr	r6, [r6, #0]
 8007bce:	e7f7      	b.n	8007bc0 <__sfp+0x14>
 8007bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bd4:	b16d      	cbz	r5, 8007bf2 <__sfp+0x46>
 8007bd6:	3468      	adds	r4, #104	; 0x68
 8007bd8:	e7f4      	b.n	8007bc4 <__sfp+0x18>
 8007bda:	2104      	movs	r1, #4
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff ff9f 	bl	8007b20 <__sfmoreglue>
 8007be2:	6030      	str	r0, [r6, #0]
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1f1      	bne.n	8007bcc <__sfp+0x20>
 8007be8:	230c      	movs	r3, #12
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	4604      	mov	r4, r0
 8007bee:	4620      	mov	r0, r4
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <__sfp+0x74>)
 8007bf4:	6665      	str	r5, [r4, #100]	; 0x64
 8007bf6:	e9c4 5500 	strd	r5, r5, [r4]
 8007bfa:	60a5      	str	r5, [r4, #8]
 8007bfc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007c00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007c04:	2208      	movs	r2, #8
 8007c06:	4629      	mov	r1, r5
 8007c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c0c:	f7ff fd82 	bl	8007714 <memset>
 8007c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c18:	e7e9      	b.n	8007bee <__sfp+0x42>
 8007c1a:	bf00      	nop
 8007c1c:	08008068 	.word	0x08008068
 8007c20:	ffff0001 	.word	0xffff0001

08007c24 <_fwalk_reent>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	4680      	mov	r8, r0
 8007c2a:	4689      	mov	r9, r1
 8007c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c30:	2600      	movs	r6, #0
 8007c32:	b914      	cbnz	r4, 8007c3a <_fwalk_reent+0x16>
 8007c34:	4630      	mov	r0, r6
 8007c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007c3e:	3f01      	subs	r7, #1
 8007c40:	d501      	bpl.n	8007c46 <_fwalk_reent+0x22>
 8007c42:	6824      	ldr	r4, [r4, #0]
 8007c44:	e7f5      	b.n	8007c32 <_fwalk_reent+0xe>
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d907      	bls.n	8007c5c <_fwalk_reent+0x38>
 8007c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c50:	3301      	adds	r3, #1
 8007c52:	d003      	beq.n	8007c5c <_fwalk_reent+0x38>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4640      	mov	r0, r8
 8007c58:	47c8      	blx	r9
 8007c5a:	4306      	orrs	r6, r0
 8007c5c:	3568      	adds	r5, #104	; 0x68
 8007c5e:	e7ee      	b.n	8007c3e <_fwalk_reent+0x1a>

08007c60 <__swhatbuf_r>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	460e      	mov	r6, r1
 8007c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	b096      	sub	sp, #88	; 0x58
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	461d      	mov	r5, r3
 8007c70:	da07      	bge.n	8007c82 <__swhatbuf_r+0x22>
 8007c72:	2300      	movs	r3, #0
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	89b3      	ldrh	r3, [r6, #12]
 8007c78:	061a      	lsls	r2, r3, #24
 8007c7a:	d410      	bmi.n	8007c9e <__swhatbuf_r+0x3e>
 8007c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c80:	e00e      	b.n	8007ca0 <__swhatbuf_r+0x40>
 8007c82:	466a      	mov	r2, sp
 8007c84:	f000 f96e 	bl	8007f64 <_fstat_r>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dbf2      	blt.n	8007c72 <__swhatbuf_r+0x12>
 8007c8c:	9a01      	ldr	r2, [sp, #4]
 8007c8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c96:	425a      	negs	r2, r3
 8007c98:	415a      	adcs	r2, r3
 8007c9a:	602a      	str	r2, [r5, #0]
 8007c9c:	e7ee      	b.n	8007c7c <__swhatbuf_r+0x1c>
 8007c9e:	2340      	movs	r3, #64	; 0x40
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	b016      	add	sp, #88	; 0x58
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}

08007ca8 <__smakebuf_r>:
 8007ca8:	898b      	ldrh	r3, [r1, #12]
 8007caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cac:	079d      	lsls	r5, r3, #30
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	d507      	bpl.n	8007cc4 <__smakebuf_r+0x1c>
 8007cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	6163      	str	r3, [r4, #20]
 8007cc0:	b002      	add	sp, #8
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	ab01      	add	r3, sp, #4
 8007cc6:	466a      	mov	r2, sp
 8007cc8:	f7ff ffca 	bl	8007c60 <__swhatbuf_r>
 8007ccc:	9900      	ldr	r1, [sp, #0]
 8007cce:	4605      	mov	r5, r0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 f877 	bl	8007dc4 <_malloc_r>
 8007cd6:	b948      	cbnz	r0, 8007cec <__smakebuf_r+0x44>
 8007cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cdc:	059a      	lsls	r2, r3, #22
 8007cde:	d4ef      	bmi.n	8007cc0 <__smakebuf_r+0x18>
 8007ce0:	f023 0303 	bic.w	r3, r3, #3
 8007ce4:	f043 0302 	orr.w	r3, r3, #2
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7e3      	b.n	8007cb4 <__smakebuf_r+0xc>
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <__smakebuf_r+0x7c>)
 8007cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	6163      	str	r3, [r4, #20]
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	6120      	str	r0, [r4, #16]
 8007d02:	b15b      	cbz	r3, 8007d1c <__smakebuf_r+0x74>
 8007d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f93d 	bl	8007f88 <_isatty_r>
 8007d0e:	b128      	cbz	r0, 8007d1c <__smakebuf_r+0x74>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	431d      	orrs	r5, r3
 8007d20:	81a5      	strh	r5, [r4, #12]
 8007d22:	e7cd      	b.n	8007cc0 <__smakebuf_r+0x18>
 8007d24:	08007b15 	.word	0x08007b15

08007d28 <_free_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d045      	beq.n	8007dbc <_free_r+0x94>
 8007d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d34:	1f0c      	subs	r4, r1, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	18e4      	addlt	r4, r4, r3
 8007d3c:	f000 f946 	bl	8007fcc <__malloc_lock>
 8007d40:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <_free_r+0x98>)
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	4610      	mov	r0, r2
 8007d46:	b933      	cbnz	r3, 8007d56 <_free_r+0x2e>
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	6014      	str	r4, [r2, #0]
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d52:	f000 b93c 	b.w	8007fce <__malloc_unlock>
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	d90c      	bls.n	8007d74 <_free_r+0x4c>
 8007d5a:	6821      	ldr	r1, [r4, #0]
 8007d5c:	1862      	adds	r2, r4, r1
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	bf04      	itt	eq
 8007d62:	681a      	ldreq	r2, [r3, #0]
 8007d64:	685b      	ldreq	r3, [r3, #4]
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	bf04      	itt	eq
 8007d6a:	1852      	addeq	r2, r2, r1
 8007d6c:	6022      	streq	r2, [r4, #0]
 8007d6e:	6004      	str	r4, [r0, #0]
 8007d70:	e7ec      	b.n	8007d4c <_free_r+0x24>
 8007d72:	4613      	mov	r3, r2
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	b10a      	cbz	r2, 8007d7c <_free_r+0x54>
 8007d78:	42a2      	cmp	r2, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x4a>
 8007d7c:	6819      	ldr	r1, [r3, #0]
 8007d7e:	1858      	adds	r0, r3, r1
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x74>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4401      	add	r1, r0
 8007d88:	1858      	adds	r0, r3, r1
 8007d8a:	4282      	cmp	r2, r0
 8007d8c:	6019      	str	r1, [r3, #0]
 8007d8e:	d1dd      	bne.n	8007d4c <_free_r+0x24>
 8007d90:	6810      	ldr	r0, [r2, #0]
 8007d92:	6852      	ldr	r2, [r2, #4]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	4401      	add	r1, r0
 8007d98:	6019      	str	r1, [r3, #0]
 8007d9a:	e7d7      	b.n	8007d4c <_free_r+0x24>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x7c>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d3      	b.n	8007d4c <_free_r+0x24>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428a      	cmp	r2, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6811      	ldreq	r1, [r2, #0]
 8007dae:	6852      	ldreq	r2, [r2, #4]
 8007db0:	6062      	str	r2, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	605c      	str	r4, [r3, #4]
 8007dba:	e7c7      	b.n	8007d4c <_free_r+0x24>
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	240000a0 	.word	0x240000a0

08007dc4 <_malloc_r>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	1ccd      	adds	r5, r1, #3
 8007dc8:	f025 0503 	bic.w	r5, r5, #3
 8007dcc:	3508      	adds	r5, #8
 8007dce:	2d0c      	cmp	r5, #12
 8007dd0:	bf38      	it	cc
 8007dd2:	250c      	movcc	r5, #12
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	db01      	blt.n	8007dde <_malloc_r+0x1a>
 8007dda:	42a9      	cmp	r1, r5
 8007ddc:	d903      	bls.n	8007de6 <_malloc_r+0x22>
 8007dde:	230c      	movs	r3, #12
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	2000      	movs	r0, #0
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	f000 f8f1 	bl	8007fcc <__malloc_lock>
 8007dea:	4a21      	ldr	r2, [pc, #132]	; (8007e70 <_malloc_r+0xac>)
 8007dec:	6814      	ldr	r4, [r2, #0]
 8007dee:	4621      	mov	r1, r4
 8007df0:	b991      	cbnz	r1, 8007e18 <_malloc_r+0x54>
 8007df2:	4c20      	ldr	r4, [pc, #128]	; (8007e74 <_malloc_r+0xb0>)
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	b91b      	cbnz	r3, 8007e00 <_malloc_r+0x3c>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 f83d 	bl	8007e78 <_sbrk_r>
 8007dfe:	6020      	str	r0, [r4, #0]
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f000 f838 	bl	8007e78 <_sbrk_r>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d124      	bne.n	8007e56 <_malloc_r+0x92>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f8dc 	bl	8007fce <__malloc_unlock>
 8007e16:	e7e4      	b.n	8007de2 <_malloc_r+0x1e>
 8007e18:	680b      	ldr	r3, [r1, #0]
 8007e1a:	1b5b      	subs	r3, r3, r5
 8007e1c:	d418      	bmi.n	8007e50 <_malloc_r+0x8c>
 8007e1e:	2b0b      	cmp	r3, #11
 8007e20:	d90f      	bls.n	8007e42 <_malloc_r+0x7e>
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	50cd      	str	r5, [r1, r3]
 8007e26:	18cc      	adds	r4, r1, r3
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 f8d0 	bl	8007fce <__malloc_unlock>
 8007e2e:	f104 000b 	add.w	r0, r4, #11
 8007e32:	1d23      	adds	r3, r4, #4
 8007e34:	f020 0007 	bic.w	r0, r0, #7
 8007e38:	1ac3      	subs	r3, r0, r3
 8007e3a:	d0d3      	beq.n	8007de4 <_malloc_r+0x20>
 8007e3c:	425a      	negs	r2, r3
 8007e3e:	50e2      	str	r2, [r4, r3]
 8007e40:	e7d0      	b.n	8007de4 <_malloc_r+0x20>
 8007e42:	428c      	cmp	r4, r1
 8007e44:	684b      	ldr	r3, [r1, #4]
 8007e46:	bf16      	itet	ne
 8007e48:	6063      	strne	r3, [r4, #4]
 8007e4a:	6013      	streq	r3, [r2, #0]
 8007e4c:	460c      	movne	r4, r1
 8007e4e:	e7eb      	b.n	8007e28 <_malloc_r+0x64>
 8007e50:	460c      	mov	r4, r1
 8007e52:	6849      	ldr	r1, [r1, #4]
 8007e54:	e7cc      	b.n	8007df0 <_malloc_r+0x2c>
 8007e56:	1cc4      	adds	r4, r0, #3
 8007e58:	f024 0403 	bic.w	r4, r4, #3
 8007e5c:	42a0      	cmp	r0, r4
 8007e5e:	d005      	beq.n	8007e6c <_malloc_r+0xa8>
 8007e60:	1a21      	subs	r1, r4, r0
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f808 	bl	8007e78 <_sbrk_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d0cf      	beq.n	8007e0c <_malloc_r+0x48>
 8007e6c:	6025      	str	r5, [r4, #0]
 8007e6e:	e7db      	b.n	8007e28 <_malloc_r+0x64>
 8007e70:	240000a0 	.word	0x240000a0
 8007e74:	240000a4 	.word	0x240000a4

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4c06      	ldr	r4, [pc, #24]	; (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4605      	mov	r5, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	f7f8 fe62 	bl	8000b4c <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	240006e4 	.word	0x240006e4

08007e98 <__sread>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea0:	f000 f896 	bl	8007fd0 <_read_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	bfab      	itete	ge
 8007ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8007eac:	181b      	addge	r3, r3, r0
 8007eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eb2:	bfac      	ite	ge
 8007eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb6:	81a3      	strhlt	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__swrite>:
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	898b      	ldrh	r3, [r1, #12]
 8007ec2:	05db      	lsls	r3, r3, #23
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4616      	mov	r6, r2
 8007eca:	d505      	bpl.n	8007ed8 <__swrite+0x1e>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed4:	f000 f868 	bl	8007fa8 <_lseek_r>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	4628      	mov	r0, r5
 8007eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	f000 b817 	b.w	8007f20 <_write_r>

08007ef2 <__sseek>:
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efa:	f000 f855 	bl	8007fa8 <_lseek_r>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	bf15      	itete	ne
 8007f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0e:	81a3      	strheq	r3, [r4, #12]
 8007f10:	bf18      	it	ne
 8007f12:	81a3      	strhne	r3, [r4, #12]
 8007f14:	bd10      	pop	{r4, pc}

08007f16 <__sclose>:
 8007f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1a:	f000 b813 	b.w	8007f44 <_close_r>
	...

08007f20 <_write_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4c07      	ldr	r4, [pc, #28]	; (8007f40 <_write_r+0x20>)
 8007f24:	4605      	mov	r5, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f8 fc2c 	bl	800078c <_write>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_write_r+0x1e>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_write_r+0x1e>
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	240006e4 	.word	0x240006e4

08007f44 <_close_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4c06      	ldr	r4, [pc, #24]	; (8007f60 <_close_r+0x1c>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	f7f8 fdc7 	bl	8000ae2 <_close>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_close_r+0x1a>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_close_r+0x1a>
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	240006e4 	.word	0x240006e4

08007f64 <_fstat_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4c07      	ldr	r4, [pc, #28]	; (8007f84 <_fstat_r+0x20>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	f7f8 fdc2 	bl	8000afa <_fstat>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d102      	bne.n	8007f80 <_fstat_r+0x1c>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	b103      	cbz	r3, 8007f80 <_fstat_r+0x1c>
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	bf00      	nop
 8007f84:	240006e4 	.word	0x240006e4

08007f88 <_isatty_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4c06      	ldr	r4, [pc, #24]	; (8007fa4 <_isatty_r+0x1c>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4605      	mov	r5, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	f7f8 fdc1 	bl	8000b1a <_isatty>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_isatty_r+0x1a>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_isatty_r+0x1a>
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	240006e4 	.word	0x240006e4

08007fa8 <_lseek_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4c07      	ldr	r4, [pc, #28]	; (8007fc8 <_lseek_r+0x20>)
 8007fac:	4605      	mov	r5, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f8 fdba 	bl	8000b30 <_lseek>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_lseek_r+0x1e>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_lseek_r+0x1e>
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	240006e4 	.word	0x240006e4

08007fcc <__malloc_lock>:
 8007fcc:	4770      	bx	lr

08007fce <__malloc_unlock>:
 8007fce:	4770      	bx	lr

08007fd0 <_read_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4c07      	ldr	r4, [pc, #28]	; (8007ff0 <_read_r+0x20>)
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	6022      	str	r2, [r4, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7f8 fd62 	bl	8000aa8 <_read>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_read_r+0x1e>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_read_r+0x1e>
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	240006e4 	.word	0x240006e4

08007ff4 <_init>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr

08008000 <_fini>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr
