
USART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c44  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f4  0800a4f4  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4fc  0800a4fc  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4fc  0800a4fc  0001a4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  24000000  0800a504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010894  240000f4  0800a5f8  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24010988  0800a5f8  00020988  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019617  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a4c  00000000  00000000  00039739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  0003c188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  0003cf18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365d0  00000000  00000000  0003dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d909  00000000  00000000  00074170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00155be8  00000000  00000000  00081a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d7661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  001d76dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f4 	.word	0x240000f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ecc 	.word	0x08009ecc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f8 	.word	0x240000f8
 80002dc:	08009ecc 	.word	0x08009ecc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800068c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d013      	beq.n	80006c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	e000      	b.n	80006ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80006aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80006d4:	b0a2      	sub	sp, #136	; 0x88
 80006d6:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f906 	bl	80018e8 <HAL_Init>

  //Camera_Setup(CAM_RESET);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f9b0 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 fac2 	bl	8000c68 <MX_GPIO_Init>
  MX_UART4_Init();
 80006e4:	f000 fa72 	bl	8000bcc <MX_UART4_Init>
  MX_JPEG_Init();
 80006e8:	f000 fa5c 	bl	8000ba4 <MX_JPEG_Init>
  /* USER CODE BEGIN 2 */
  printf("%d\n", sizeof(CAM_RESET));
 80006ec:	2105      	movs	r1, #5
 80006ee:	48c0      	ldr	r0, [pc, #768]	; (80009f0 <main+0x320>)
 80006f0:	f008 fc5a 	bl	8008fa8 <iprintf>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	48be      	ldr	r0, [pc, #760]	; (80009f4 <main+0x324>)
 80006fa:	f001 ff41 	bl	8002580 <HAL_GPIO_WritePin>
  uint32_t tick5 = HAL_GetTick();
  printf("Altogether run-time, including free... %lu\n", tick5-tick1);

  */

  img_buf[0] = 0;
 80006fe:	4bbe      	ldr	r3, [pc, #760]	; (80009f8 <main+0x328>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  uint8_t test = 0b10101010;
 8000704:	23aa      	movs	r3, #170	; 0xaa
 8000706:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  uint8_t test1 = 200;
 800070a:	23c8      	movs	r3, #200	; 0xc8
 800070c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  uint8_t rec1[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	831a      	strh	r2, [r3, #24]
  uint8_t* rec = rec1;
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	66bb      	str	r3, [r7, #104]	; 0x68
  //HAL_UART_Transmit(&huart5, &test, 1, 1000);
*/


  // initialize camera before anything else with desired resolution, amount of compression (0x0 to 0xFF), and baudrate
  Camera_Initialize(1, 0xFF, 115200);
 800072a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072e:	21ff      	movs	r1, #255	; 0xff
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fdd9 	bl	80012e8 <Camera_Initialize>
  HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f001 f964 	bl	8001a04 <HAL_Delay>

  uint16_t frameptr = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

  HAL_StatusTypeDef result = 255;
 8000742:	23ff      	movs	r3, #255	; 0xff
 8000744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8000748:	466b      	mov	r3, sp
 800074a:	461e      	mov	r6, r3
  	  printf("Beginning while loop.\n");
 800074c:	48ab      	ldr	r0, [pc, #684]	; (80009fc <main+0x32c>)
 800074e:	f008 fcb3 	bl	80090b8 <puts>
	   * that.
	   */

	  // get TOF distance values, 7 for the 7 sensors on the board
	  uint8_t dist_vals[7];
	  get_TOF_Data(dist_vals);
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fe7c 	bl	8001454 <get_TOF_Data>
	   *
	   * Some ACK checks could be added to verify information, but otherwise the
	   * flow of the below code should be mostly finalized.
	   */

	  HAL_Delay(10);
 800075c:	200a      	movs	r0, #10
 800075e:	f001 f951 	bl	8001a04 <HAL_Delay>
	  printf("Taking snapshot...\n");
 8000762:	48a7      	ldr	r0, [pc, #668]	; (8000a00 <main+0x330>)
 8000764:	f008 fca8 	bl	80090b8 <puts>
	  uint8_t snapshot_ack[5];
	  uint8_t *snapshot_ack1 = snapshot_ack;
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	663b      	str	r3, [r7, #96]	; 0x60
	  Camera_Snapshot(snapshot_ack1, sizeof(snapshot_ack));
 800076e:	2105      	movs	r1, #5
 8000770:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000772:	f000 fc07 	bl	8000f84 <Camera_Snapshot>

	  if (snapshot_ack[0] == 0x76)
 8000776:	7c3b      	ldrb	r3, [r7, #16]
 8000778:	2b76      	cmp	r3, #118	; 0x76
 800077a:	d103      	bne.n	8000784 <main+0xb4>
		  printf("Ack for snapshot received.\n");
 800077c:	48a1      	ldr	r0, [pc, #644]	; (8000a04 <main+0x334>)
 800077e:	f008 fc9b 	bl	80090b8 <puts>
 8000782:	e002      	b.n	800078a <main+0xba>
	  else
		  printf("No ack received for snapshot.\n");
 8000784:	48a0      	ldr	r0, [pc, #640]	; (8000a08 <main+0x338>)
 8000786:	f008 fc97 	bl	80090b8 <puts>

	  printf("Getting image length...\n");
 800078a:	48a0      	ldr	r0, [pc, #640]	; (8000a0c <main+0x33c>)
 800078c:	f008 fc94 	bl	80090b8 <puts>
	  uint8_t length_ack[9];
	  Camera_Get_IMG_Length(length_ack, sizeof(length_ack));
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2109      	movs	r1, #9
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fc27 	bl	8000fe8 <Camera_Get_IMG_Length>

	  if (length_ack[0] == 0x76)
 800079a:	793b      	ldrb	r3, [r7, #4]
 800079c:	2b76      	cmp	r3, #118	; 0x76
 800079e:	d103      	bne.n	80007a8 <main+0xd8>
		  printf("Ack for image length received.\n");
 80007a0:	489b      	ldr	r0, [pc, #620]	; (8000a10 <main+0x340>)
 80007a2:	f008 fc89 	bl	80090b8 <puts>
 80007a6:	e002      	b.n	80007ae <main+0xde>
	  else
		  printf("No ack received for image length.\n");
 80007a8:	489a      	ldr	r0, [pc, #616]	; (8000a14 <main+0x344>)
 80007aa:	f008 fc85 	bl	80090b8 <puts>

	  // indices 7 and 8 of the length_ack should have actual values
	  uint16_t img_length = (((uint16_t) length_ack[7]) << 8) + (uint16_t) length_ack[8];
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	7b3b      	ldrb	r3, [r7, #12]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  printf("Found image length: %lu\n", img_length);
 80007c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80007c4:	4619      	mov	r1, r3
 80007c6:	4894      	ldr	r0, [pc, #592]	; (8000a18 <main+0x348>)
 80007c8:	f008 fbee 	bl	8008fa8 <iprintf>

	  //image buffer
	  uint8_t img_buf_and_ack[10+img_length];
 80007cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80007d0:	f103 000a 	add.w	r0, r3, #10
 80007d4:	1e43      	subs	r3, r0, #1
 80007d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80007d8:	4603      	mov	r3, r0
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 0200 	mov.w	r2, #0
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	f04f 0400 	mov.w	r4, #0
 80007e8:	00d4      	lsls	r4, r2, #3
 80007ea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80007ee:	00cb      	lsls	r3, r1, #3
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	f04f 0400 	mov.w	r4, #0
 8000800:	00d4      	lsls	r4, r2, #3
 8000802:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000806:	00cb      	lsls	r3, r1, #3
 8000808:	4603      	mov	r3, r0
 800080a:	3307      	adds	r3, #7
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	ebad 0d03 	sub.w	sp, sp, r3
 8000814:	ab02      	add	r3, sp, #8
 8000816:	3300      	adds	r3, #0
 8000818:	657b      	str	r3, [r7, #84]	; 0x54

	  uint32_t ticktransfer1 = HAL_GetTick();
 800081a:	f001 f8e7 	bl	80019ec <HAL_GetTick>
 800081e:	6538      	str	r0, [r7, #80]	; 0x50

	  printf("Getting image...\n");
 8000820:	487e      	ldr	r0, [pc, #504]	; (8000a1c <main+0x34c>)
 8000822:	f008 fc49 	bl	80090b8 <puts>
	  Camera_Get_IMG(img_buf_and_ack, (10+img_length), length_ack[7], length_ack[8], (uint8_t) (frameptr >> 8), (uint8_t) frameptr);
 8000826:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000828:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800082c:	330a      	adds	r3, #10
 800082e:	b299      	uxth	r1, r3
 8000830:	7afc      	ldrb	r4, [r7, #11]
 8000832:	7b3d      	ldrb	r5, [r7, #12]
 8000834:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	462b      	mov	r3, r5
 800084a:	4622      	mov	r2, r4
 800084c:	f000 fbfa 	bl	8001044 <Camera_Get_IMG>

	  uint32_t ticktransfer2 = HAL_GetTick();
 8000850:	f001 f8cc 	bl	80019ec <HAL_GetTick>
 8000854:	64f8      	str	r0, [r7, #76]	; 0x4c

	  printf("Image transfer time: %lu\n", ticktransfer2 - ticktransfer1);
 8000856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	4619      	mov	r1, r3
 800085e:	4870      	ldr	r0, [pc, #448]	; (8000a20 <main+0x350>)
 8000860:	f008 fba2 	bl	8008fa8 <iprintf>

	  // extremely important, do not forget to increment your frameptr by the number of bytes you just received
	  frameptr += img_length;
 8000864:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000868:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800086c:	4413      	add	r3, r2
 800086e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  uint8_t* jpeg_img_buf = img_buf_and_ack;
 8000872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
	  jpeg_img_buf += 5;
 8000876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000878:	3305      	adds	r3, #5
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48

	  result = HAL_JPEG_Decode(&hjpeg, jpeg_img_buf, (uint32_t) img_length, img_buf, 67200, 3000);
 800087c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000880:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <main+0x354>)
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <main+0x328>)
 800088c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800088e:	4866      	ldr	r0, [pc, #408]	; (8000a28 <main+0x358>)
 8000890:	f001 ffa7 	bl	80027e2 <HAL_JPEG_Decode>
 8000894:	4603      	mov	r3, r0
 8000896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	  uint8_t* buff_check = img_buf;
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <main+0x328>)
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
	  buff_check++;
 800089e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008a0:	3301      	adds	r3, #1
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
	  buff_check++;
 80008a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008a6:	3301      	adds	r3, #1
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
	  buff_check++;
 80008aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008ac:	3301      	adds	r3, #1
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
	  buff_check++;
 80008b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008b2:	3301      	adds	r3, #1
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
	  buff_check++;
 80008b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008b8:	3301      	adds	r3, #1
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44

	  uint32_t tickj = HAL_GetTick();
 80008bc:	f001 f896 	bl	80019ec <HAL_GetTick>
 80008c0:	6438      	str	r0, [r7, #64]	; 0x40

	  if (result == HAL_OK) {
 80008c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d16c      	bne.n	80009a4 <main+0x2d4>
		  printf("JPEG conversion finished successfully.\n");
 80008ca:	4858      	ldr	r0, [pc, #352]	; (8000a2c <main+0x35c>)
 80008cc:	f008 fbf4 	bl	80090b8 <puts>

		  for (uint64_t i = 0; i < 140; i++) {
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	f04f 0400 	mov.w	r4, #0
 80008d8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 80008dc:	e058      	b.n	8000990 <main+0x2c0>
			  printf("{%d, %d, %d} ", img_buf[31350+3*i], img_buf[31350+3*i+1], img_buf[31350+3*i+2]);
 80008de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80008e2:	468b      	mov	fp, r1
 80008e4:	4694      	mov	ip, r2
 80008e6:	eb1b 030b 	adds.w	r3, fp, fp
 80008ea:	eb4c 040c 	adc.w	r4, ip, ip
 80008ee:	469b      	mov	fp, r3
 80008f0:	46a4      	mov	ip, r4
 80008f2:	eb1b 0801 	adds.w	r8, fp, r1
 80008f6:	eb4c 0902 	adc.w	r9, ip, r2
 80008fa:	f647 2176 	movw	r1, #31350	; 0x7a76
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	eb18 0301 	adds.w	r3, r8, r1
 8000906:	eb49 0402 	adc.w	r4, r9, r2
 800090a:	4a3b      	ldr	r2, [pc, #236]	; (80009f8 <main+0x328>)
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8000916:	468b      	mov	fp, r1
 8000918:	4694      	mov	ip, r2
 800091a:	eb1b 030b 	adds.w	r3, fp, fp
 800091e:	eb4c 040c 	adc.w	r4, ip, ip
 8000922:	469b      	mov	fp, r3
 8000924:	46a4      	mov	ip, r4
 8000926:	eb1b 0801 	adds.w	r8, fp, r1
 800092a:	eb4c 0902 	adc.w	r9, ip, r2
 800092e:	f647 2177 	movw	r1, #31351	; 0x7a77
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	eb18 0301 	adds.w	r3, r8, r1
 800093a:	eb49 0402 	adc.w	r4, r9, r2
 800093e:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <main+0x328>)
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461d      	mov	r5, r3
 8000946:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800094a:	468b      	mov	fp, r1
 800094c:	4694      	mov	ip, r2
 800094e:	eb1b 030b 	adds.w	r3, fp, fp
 8000952:	eb4c 040c 	adc.w	r4, ip, ip
 8000956:	469b      	mov	fp, r3
 8000958:	46a4      	mov	ip, r4
 800095a:	eb1b 0801 	adds.w	r8, fp, r1
 800095e:	eb4c 0902 	adc.w	r9, ip, r2
 8000962:	f647 2178 	movw	r1, #31352	; 0x7a78
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	eb18 0301 	adds.w	r3, r8, r1
 800096e:	eb49 0402 	adc.w	r4, r9, r2
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <main+0x328>)
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	462a      	mov	r2, r5
 800097a:	4601      	mov	r1, r0
 800097c:	482c      	ldr	r0, [pc, #176]	; (8000a30 <main+0x360>)
 800097e:	f008 fb13 	bl	8008fa8 <iprintf>
		  for (uint64_t i = 0; i < 140; i++) {
 8000982:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8000986:	1c59      	adds	r1, r3, #1
 8000988:	f144 0200 	adc.w	r2, r4, #0
 800098c:	e9c7 121c 	strd	r1, r2, [r7, #112]	; 0x70
 8000990:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8000994:	2c00      	cmp	r4, #0
 8000996:	bf08      	it	eq
 8000998:	2b8c      	cmpeq	r3, #140	; 0x8c
 800099a:	d3a0      	bcc.n	80008de <main+0x20e>
		  }
		  printf("\n");
 800099c:	200a      	movs	r0, #10
 800099e:	f008 fb1b 	bl	8008fd8 <putchar>
 80009a2:	e002      	b.n	80009aa <main+0x2da>
	  }
	  else
		  printf("JPEG conversion failed.\n");
 80009a4:	4823      	ldr	r0, [pc, #140]	; (8000a34 <main+0x364>)
 80009a6:	f008 fb87 	bl	80090b8 <puts>

	  uint32_t tickj2 = HAL_GetTick();
 80009aa:	f001 f81f 	bl	80019ec <HAL_GetTick>
 80009ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	  printf("JPEG time elapsed: %lu\n", tickj2-tickj);
 80009b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <main+0x368>)
 80009ba:	f008 faf5 	bl	8008fa8 <iprintf>
	  cam_img->bpp = 3;
	  cam_img->pixels = (uint8_t*) malloc(img_length*sizeof(uint8_t));
	  for (int i = 0; i < img_length; i++)
		  cam_img->pixels[i] = img_buf_and_ack[5+i];*/

	  printf("End of while loop reached, deleting and then entering delay before starting again...");
 80009be:	481f      	ldr	r0, [pc, #124]	; (8000a3c <main+0x36c>)
 80009c0:	f008 faf2 	bl	8008fa8 <iprintf>


	  for (int i = 0; i < 2; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80009c8:	e009      	b.n	80009de <main+0x30e>
		  HAL_Delay(1000);
 80009ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ce:	f001 f819 	bl	8001a04 <HAL_Delay>
		  printf(".");
 80009d2:	202e      	movs	r0, #46	; 0x2e
 80009d4:	f008 fb00 	bl	8008fd8 <putchar>
	  for (int i = 0; i < 2; i++) {
 80009d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009da:	3301      	adds	r3, #1
 80009dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80009de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	ddf2      	ble.n	80009ca <main+0x2fa>
	  }
	  printf("\n");
 80009e4:	200a      	movs	r0, #10
 80009e6:	f008 faf7 	bl	8008fd8 <putchar>
 80009ea:	46b5      	mov	sp, r6
  {
 80009ec:	e6ac      	b.n	8000748 <main+0x78>
 80009ee:	bf00      	nop
 80009f0:	08009ee4 	.word	0x08009ee4
 80009f4:	58021400 	.word	0x58021400
 80009f8:	24000200 	.word	0x24000200
 80009fc:	08009ee8 	.word	0x08009ee8
 8000a00:	08009f00 	.word	0x08009f00
 8000a04:	08009f14 	.word	0x08009f14
 8000a08:	08009f30 	.word	0x08009f30
 8000a0c:	08009f50 	.word	0x08009f50
 8000a10:	08009f68 	.word	0x08009f68
 8000a14:	08009f88 	.word	0x08009f88
 8000a18:	08009fac 	.word	0x08009fac
 8000a1c:	08009fc8 	.word	0x08009fc8
 8000a20:	08009fdc 	.word	0x08009fdc
 8000a24:	00010680 	.word	0x00010680
 8000a28:	2400011c 	.word	0x2400011c
 8000a2c:	08009ff8 	.word	0x08009ff8
 8000a30:	0800a020 	.word	0x0800a020
 8000a34:	0800a030 	.word	0x0800a030
 8000a38:	0800a048 	.word	0x0800a048
 8000a3c:	0800a060 	.word	0x0800a060

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0cc      	sub	sp, #304	; 0x130
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a4a:	224c      	movs	r2, #76	; 0x4c
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 faa2 	bl	8008f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f008 fa9b 	bl	8008f98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4618      	mov	r0, r3
 8000a68:	23bc      	movs	r3, #188	; 0xbc
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f008 fa93 	bl	8008f98 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f003 f890 	bl	8003b98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <SystemClock_Config+0x15c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <SystemClock_Config+0x15c>)
 8000a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <SystemClock_Config+0x15c>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <SystemClock_Config+0x160>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	4a41      	ldr	r2, [pc, #260]	; (8000ba0 <SystemClock_Config+0x160>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa2:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <SystemClock_Config+0x160>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	f003 0201 	and.w	r2, r3, #1
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab2:	bf00      	nop
 8000ab4:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <SystemClock_Config+0x15c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac0:	d1f8      	bne.n	8000ab4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ace:	2320      	movs	r3, #32
 8000ad0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ae6:	233c      	movs	r3, #60	; 0x3c
 8000ae8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000afe:	230c      	movs	r3, #12
 8000b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 f877 	bl	8003c08 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b20:	f000 fcbe 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	233f      	movs	r3, #63	; 0x3f
 8000b26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b36:	2308      	movs	r3, #8
 8000b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fc0b 	bl	8004378 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000b68:	f000 fc9a 	bl	80014a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2202      	movs	r2, #2
 8000b72:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2200      	movs	r2, #0
 8000b7a:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 ff57 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000b8c:	f000 fc88 	bl	80014a0 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58024800 	.word	0x58024800
 8000ba0:	58000400 	.word	0x58000400

08000ba4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_JPEG_Init+0x20>)
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <MX_JPEG_Init+0x24>)
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_JPEG_Init+0x20>)
 8000bb0:	f001 fd00 	bl	80025b4 <HAL_JPEG_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000bba:	f000 fc71 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2400011c 	.word	0x2400011c
 8000bc8:	52003000 	.word	0x52003000

08000bcc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <MX_UART4_Init+0x98>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bd8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_UART4_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_UART4_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_UART4_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c14:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c16:	f005 fa2b 	bl	8006070 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 fc3e 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c28:	f008 f8a7 	bl	8008d7a <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 fc35 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000c36:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000c3a:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c3c:	f008 f8db 	bl	8008df6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8000c46:	f000 fc2b 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_UART4_Init+0x94>)
 8000c4c:	f008 f85a 	bl	8008d04 <HAL_UARTEx_EnableFifoMode>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8000c56:	f000 fc23 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000174 	.word	0x24000174
 8000c64:	40004c00 	.word	0x40004c00

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_GPIO_Init+0xbc>)
 8000cde:	f001 fc4f 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <MX_GPIO_Init+0xbc>)
 8000cfa:	f001 f987 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_GPIO_Init+0xbc>)
 8000d12:	f001 f97b 	bl	800200c <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58021400 	.word	0x58021400

08000d28 <Camera_Reset>:

/* USER CODE BEGIN 4 */

// required set-up process for the camera to function, according to documentation
void Camera_Reset(uint8_t* rec, uint8_t len_rec)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	printf("Size of receiving buffer: %d\n", len_rec);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4816      	ldr	r0, [pc, #88]	; (8000d94 <Camera_Reset+0x6c>)
 8000d3a:	f008 f935 	bl	8008fa8 <iprintf>
	HAL_Delay(2500);	//2500 ms delay
 8000d3e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000d42:	f000 fe5f 	bl	8001a04 <HAL_Delay>
	send_UART(&huart4, CAM_RESET, rec, sizeof(CAM_RESET), len_rec);
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4911      	ldr	r1, [pc, #68]	; (8000d98 <Camera_Reset+0x70>)
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <Camera_Reset+0x74>)
 8000d54:	f000 f826 	bl	8000da4 <send_UART>

	for (int i = 0; i < len_rec; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e00a      	b.n	8000d74 <Camera_Reset+0x4c>
		printf("%d ", rec[i]);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <Camera_Reset+0x78>)
 8000d6a:	f008 f91d 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++) {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <Camera_Reset+0x36>
	}
	printf("\n");
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f008 f92b 	bl	8008fd8 <putchar>

	HAL_Delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f000 fe3d 	bl	8001a04 <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800a0b8 	.word	0x0800a0b8
 8000d98:	24000000 	.word	0x24000000
 8000d9c:	24000174 	.word	0x24000174
 8000da0:	0800a0d8 	.word	0x0800a0d8

08000da4 <send_UART>:

// abstracted function for general USART exchange, note that size of rec must be known beforehand for this to work
bool send_UART(UART_HandleTypeDef* huart, uint8_t* comm, uint8_t* rec, uint8_t len_comm, uint16_t len_rec)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef res = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	res = HAL_UART_Receive(&huart4, junk, 255, 2);
 8000db8:	2302      	movs	r3, #2
 8000dba:	22ff      	movs	r2, #255	; 0xff
 8000dbc:	496e      	ldr	r1, [pc, #440]	; (8000f78 <send_UART+0x1d4>)
 8000dbe:	486f      	ldr	r0, [pc, #444]	; (8000f7c <send_UART+0x1d8>)
 8000dc0:	f005 f9df 	bl	8006182 <HAL_UART_Receive>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/*for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
	printf("\n");*/
	rec[0] = 255;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	701a      	strb	r2, [r3, #0]
	rec[1] = 10;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	220a      	movs	r2, #10
 8000dd6:	701a      	strb	r2, [r3, #0]
	rec[2] = 30;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	221e      	movs	r2, #30
 8000dde:	701a      	strb	r2, [r3, #0]
	rec[3] = 40;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3303      	adds	r3, #3
 8000de4:	2228      	movs	r2, #40	; 0x28
 8000de6:	701a      	strb	r2, [r3, #0]
	rec[4] = 50;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3304      	adds	r3, #4
 8000dec:	2232      	movs	r2, #50	; 0x32
 8000dee:	701a      	strb	r2, [r3, #0]

	uint32_t tick3 = HAL_GetTick();
 8000df0:	f000 fdfc 	bl	80019ec <HAL_GetTick>
 8000df4:	61f8      	str	r0, [r7, #28]

	// fastest tx operation?
	huart->TxXferCount = len_comm;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	huart->TxXferSize = len_comm;
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	while (huart->TxXferCount > 0U)
 8000e0a:	e01e      	b.n	8000e4a <send_UART+0xa6>
	    {
	      //ensure that Tx operations are finished before we continue
	      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tick3, 1000) != HAL_OK)
 8000e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	2200      	movs	r2, #0
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f007 fe81 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <send_UART+0x84>
	      {
	        return false;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e0a2      	b.n	8000f6e <send_UART+0x1ca>
	      }

	      huart->Instance->TDR = (uint8_t)(*comm & 0xFFU); // what is the purpose of the & operation if the mask is just 0xFF
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
	      comm++;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
	      huart->TxXferCount--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3b01      	subs	r3, #1
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	while (huart->TxXferCount > 0U)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1da      	bne.n	8000e0c <send_UART+0x68>
	    }


	// fastest rx operation, could make slightly faster on flag check
	huart->RxXferCount = len_rec;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	huart->RxXferSize  = len_rec;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	uint8_t flag = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	76fb      	strb	r3, [r7, #27]
	uint8_t* pData = rec;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tickstart = HAL_GetTick();
 8000e6e:	f000 fdbd 	bl	80019ec <HAL_GetTick>
 8000e72:	6178      	str	r0, [r7, #20]
	UART_MASK_COMPUTATION(huart);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e7c:	d10e      	bne.n	8000e9c <send_UART+0xf8>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <send_UART+0xee>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000e90:	e05e      	b.n	8000f50 <send_UART+0x1ac>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	22ff      	movs	r2, #255	; 0xff
 8000e96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000e9a:	e059      	b.n	8000f50 <send_UART+0x1ac>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10d      	bne.n	8000ec0 <send_UART+0x11c>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <send_UART+0x112>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000eb4:	e04c      	b.n	8000f50 <send_UART+0x1ac>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	227f      	movs	r2, #127	; 0x7f
 8000eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000ebe:	e047      	b.n	8000f50 <send_UART+0x1ac>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ec8:	d10d      	bne.n	8000ee6 <send_UART+0x142>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <send_UART+0x138>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	227f      	movs	r2, #127	; 0x7f
 8000ed6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000eda:	e039      	b.n	8000f50 <send_UART+0x1ac>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	223f      	movs	r2, #63	; 0x3f
 8000ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000ee4:	e034      	b.n	8000f50 <send_UART+0x1ac>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	while (huart->RxXferCount > 0U)
 8000eee:	e02f      	b.n	8000f50 <send_UART+0x1ac>
	    {
	       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, 5000) != HAL_OK)
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f007 fe0f 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <send_UART+0x17c>
	       {
	    	 printf("\n\nBROKE LOOP ON RX, TIMEOUT AT %d ITERATION\n\n", len_rec - huart->RxXferCount);
 8000f08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8000f10:	b292      	uxth	r2, r2
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	481a      	ldr	r0, [pc, #104]	; (8000f80 <send_UART+0x1dc>)
 8000f18:	f008 f846 	bl	8008fa8 <iprintf>
	         return HAL_TIMEOUT;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e026      	b.n	8000f6e <send_UART+0x1ca>

	       if (flag == 1) {
	    	   break;
	       }*/

	       *pData = (uint8_t)(huart->Instance->RDR & (uint8_t) huart->Mask);	// note that UART mask here is variable in HAL drivers, often 255 so that is default
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	701a      	strb	r2, [r3, #0]
	       pData++;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

	       huart->RxXferCount--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3b01      	subs	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	while (huart->RxXferCount > 0U)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1c9      	bne.n	8000ef0 <send_UART+0x14c>
	       //__HAL_UART_CLEAR_FLAG(&huart4, UART_FLAG_RXNE);
	    }

	res = HAL_UART_Receive(&huart4, junk, 255, 2);
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <send_UART+0x1d4>)
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <send_UART+0x1d8>)
 8000f64:	f005 f90d 	bl	8006182 <HAL_UART_Receive>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24010880 	.word	0x24010880
 8000f7c:	24000174 	.word	0x24000174
 8000f80:	0800a0dc 	.word	0x0800a0dc

08000f84 <Camera_Snapshot>:

//orders camera to take snapshot
void Camera_Snapshot(uint8_t* rec, uint8_t len_rec) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	send_UART(&huart4, CAM_CAPTURE, rec, sizeof(CAM_CAPTURE), len_rec);
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2305      	movs	r3, #5
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4910      	ldr	r1, [pc, #64]	; (8000fdc <Camera_Snapshot+0x58>)
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <Camera_Snapshot+0x5c>)
 8000f9e:	f7ff ff01 	bl	8000da4 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e00a      	b.n	8000fbe <Camera_Snapshot+0x3a>
		printf("%d ", rec[i]);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <Camera_Snapshot+0x60>)
 8000fb4:	f007 fff8 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf0      	blt.n	8000fa8 <Camera_Snapshot+0x24>
	printf("\n");
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f008 f806 	bl	8008fd8 <putchar>

	HAL_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f000 fd19 	bl	8001a04 <HAL_Delay>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000060 	.word	0x24000060
 8000fe0:	24000174 	.word	0x24000174
 8000fe4:	0800a0d8 	.word	0x0800a0d8

08000fe8 <Camera_Get_IMG_Length>:

//returns 2-value array of characters, first is high part of 16-bit length, second is low part
void Camera_Get_IMG_Length(uint8_t* rec, uint8_t len_rec) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	send_UART(&huart4, CAM_IMG_LENGTH, rec, sizeof(CAM_IMG_LENGTH), len_rec);
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <Camera_Get_IMG_Length+0x50>)
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <Camera_Get_IMG_Length+0x54>)
 8001002:	f7ff fecf 	bl	8000da4 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e00a      	b.n	8001022 <Camera_Get_IMG_Length+0x3a>
			printf("%d ", rec[i]);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <Camera_Get_IMG_Length+0x58>)
 8001018:	f007 ffc6 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbf0      	blt.n	800100c <Camera_Get_IMG_Length+0x24>
		printf("\n");
 800102a:	200a      	movs	r0, #10
 800102c:	f007 ffd4 	bl	8008fd8 <putchar>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24000068 	.word	0x24000068
 800103c:	24000174 	.word	0x24000174
 8001040:	0800a0d8 	.word	0x0800a0d8

08001044 <Camera_Get_IMG>:

//records the image into a statically allocated array of the given
void Camera_Get_IMG(uint8_t* rec, uint16_t len_rec, uint8_t lengthH, uint8_t lengthL, uint8_t memH, uint8_t memL) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	460b      	mov	r3, r1
 8001058:	707b      	strb	r3, [r7, #1]
 800105a:	4613      	mov	r3, r2
 800105c:	703b      	strb	r3, [r7, #0]

	CAM_READ_IMG[12] = lengthH;
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <Camera_Get_IMG+0x4c>)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	7313      	strb	r3, [r2, #12]
	CAM_READ_IMG[13] = lengthL;
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <Camera_Get_IMG+0x4c>)
 8001066:	783b      	ldrb	r3, [r7, #0]
 8001068:	7353      	strb	r3, [r2, #13]

	CAM_READ_IMG[8] = memH;
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <Camera_Get_IMG+0x4c>)
 800106c:	7c3b      	ldrb	r3, [r7, #16]
 800106e:	7213      	strb	r3, [r2, #8]
	CAM_READ_IMG[9] = memL;
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <Camera_Get_IMG+0x4c>)
 8001072:	7d3b      	ldrb	r3, [r7, #20]
 8001074:	7253      	strb	r3, [r2, #9]

	send_UART(&huart4, CAM_READ_IMG, rec, sizeof(CAM_READ_IMG), len_rec);
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2310      	movs	r3, #16
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4904      	ldr	r1, [pc, #16]	; (8001090 <Camera_Get_IMG+0x4c>)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <Camera_Get_IMG+0x50>)
 8001082:	f7ff fe8f 	bl	8000da4 <send_UART>
	/*printf("IMAGE:\n\n");
	for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
		printf("\n");*/

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000070 	.word	0x24000070
 8001094:	24000174 	.word	0x24000174

08001098 <Camera_Set_Res>:

//sets the resolution of the image, full resolution likely not needed for crude processing
//0x00 is default for 640x480, to get 320x240 must manually send command, replace 0x00 with 0x11
// resolution = 6 sends 640x480, resolution = 3 sends 320x240, resolution = 1 sends 160x120
void Camera_Set_Res(uint8_t* rec, uint8_t len_rec, uint8_t res) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]

	// for 640x480
	if (res == 6)
 80010a8:	78bb      	ldrb	r3, [r7, #2]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d109      	bne.n	80010c2 <Camera_Set_Res+0x2a>
		send_UART(&huart4, CAM_RES_640_480, rec, sizeof(CAM_RES_640_480), len_rec);
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2309      	movs	r3, #9
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	491b      	ldr	r1, [pc, #108]	; (8001128 <Camera_Set_Res+0x90>)
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <Camera_Set_Res+0x94>)
 80010bc:	f7ff fe72 	bl	8000da4 <send_UART>
 80010c0:	e018      	b.n	80010f4 <Camera_Set_Res+0x5c>

	// for 320x240
	else if (res == 3)
 80010c2:	78bb      	ldrb	r3, [r7, #2]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d109      	bne.n	80010dc <Camera_Set_Res+0x44>
		send_UART(&huart4, CAM_RES_320_240, rec, sizeof(CAM_RES_320_240), len_rec);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2309      	movs	r3, #9
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4917      	ldr	r1, [pc, #92]	; (8001130 <Camera_Set_Res+0x98>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <Camera_Set_Res+0x94>)
 80010d6:	f7ff fe65 	bl	8000da4 <send_UART>
 80010da:	e00b      	b.n	80010f4 <Camera_Set_Res+0x5c>

	// for 160x120
	else if (res == 1)
 80010dc:	78bb      	ldrb	r3, [r7, #2]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <Camera_Set_Res+0x5c>
		send_UART(&huart4, CAM_RES_160_120, rec, sizeof(CAM_RES_160_120), len_rec);
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2309      	movs	r3, #9
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4911      	ldr	r1, [pc, #68]	; (8001134 <Camera_Set_Res+0x9c>)
 80010ee:	480f      	ldr	r0, [pc, #60]	; (800112c <Camera_Set_Res+0x94>)
 80010f0:	f7ff fe58 	bl	8000da4 <send_UART>

	for (int i = 0; i < len_rec; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e00a      	b.n	8001110 <Camera_Set_Res+0x78>
			printf("%d ", rec[i]);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <Camera_Set_Res+0xa0>)
 8001106:	f007 ff4f 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf0      	blt.n	80010fa <Camera_Set_Res+0x62>
		printf("\n");
 8001118:	200a      	movs	r0, #10
 800111a:	f007 ff5d 	bl	8008fd8 <putchar>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000008 	.word	0x24000008
 800112c:	24000174 	.word	0x24000174
 8001130:	24000014 	.word	0x24000014
 8001134:	24000020 	.word	0x24000020
 8001138:	0800a0d8 	.word	0x0800a0d8

0800113c <Camera_Set_Compress>:

// function to ease customization of compression, higher compression is vastly preferable
void Camera_Set_Compress(uint8_t* rec, uint8_t len_rec, uint8_t comp) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
 8001148:	4613      	mov	r3, r2
 800114a:	70bb      	strb	r3, [r7, #2]
	CAM_COMPRESS[8] = comp;
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <Camera_Set_Compress+0x5c>)
 800114e:	78bb      	ldrb	r3, [r7, #2]
 8001150:	7213      	strb	r3, [r2, #8]

	send_UART(&huart4, CAM_COMPRESS, rec, sizeof(CAM_COMPRESS), len_rec);
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	b29b      	uxth	r3, r3
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2309      	movs	r3, #9
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	490e      	ldr	r1, [pc, #56]	; (8001198 <Camera_Set_Compress+0x5c>)
 800115e:	480f      	ldr	r0, [pc, #60]	; (800119c <Camera_Set_Compress+0x60>)
 8001160:	f7ff fe20 	bl	8000da4 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e00a      	b.n	8001180 <Camera_Set_Compress+0x44>
		printf("%d ", rec[i]);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <Camera_Set_Compress+0x64>)
 8001176:	f007 ff17 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf0      	blt.n	800116a <Camera_Set_Compress+0x2e>
	printf("\n");
 8001188:	200a      	movs	r0, #10
 800118a:	f007 ff25 	bl	8008fd8 <putchar>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2400002c 	.word	0x2400002c
 800119c:	24000174 	.word	0x24000174
 80011a0:	0800a0d8 	.word	0x0800a0d8

080011a4 <Camera_Set_Baud>:

// function to set the baud rate, pass the baud rate directly for check
void Camera_Set_Baud(uint8_t* rec, uint8_t len_rec, uint32_t baud) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	460b      	mov	r3, r1
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	72fb      	strb	r3, [r7, #11]

	if (baud == 9600) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80011b8:	d112      	bne.n	80011e0 <Camera_Set_Baud+0x3c>
		send_UART(&huart4, CAM_BAUD_9600, rec, sizeof(CAM_BAUD_9600), len_rec);
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2307      	movs	r3, #7
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4940      	ldr	r1, [pc, #256]	; (80012c8 <Camera_Set_Baud+0x124>)
 80011c6:	4841      	ldr	r0, [pc, #260]	; (80012cc <Camera_Set_Baud+0x128>)
 80011c8:	f7ff fdec 	bl	8000da4 <send_UART>
		HAL_UART_DeInit(&huart4);
 80011cc:	483f      	ldr	r0, [pc, #252]	; (80012cc <Camera_Set_Baud+0x128>)
 80011ce:	f004 ff9f 	bl	8006110 <HAL_UART_DeInit>
		UART_Init_Baud(&huart4, UART4, 9600);
 80011d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d6:	493e      	ldr	r1, [pc, #248]	; (80012d0 <Camera_Set_Baud+0x12c>)
 80011d8:	483c      	ldr	r0, [pc, #240]	; (80012cc <Camera_Set_Baud+0x128>)
 80011da:	f000 f8ed 	bl	80013b8 <UART_Init_Baud>
 80011de:	e05a      	b.n	8001296 <Camera_Set_Baud+0xf2>
	}

	else if (baud == 19200) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80011e6:	d112      	bne.n	800120e <Camera_Set_Baud+0x6a>
		send_UART(&huart4, CAM_BAUD_19200, rec, sizeof(CAM_BAUD_19200), len_rec);
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2307      	movs	r3, #7
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4938      	ldr	r1, [pc, #224]	; (80012d4 <Camera_Set_Baud+0x130>)
 80011f4:	4835      	ldr	r0, [pc, #212]	; (80012cc <Camera_Set_Baud+0x128>)
 80011f6:	f7ff fdd5 	bl	8000da4 <send_UART>
		HAL_UART_DeInit(&huart4);
 80011fa:	4834      	ldr	r0, [pc, #208]	; (80012cc <Camera_Set_Baud+0x128>)
 80011fc:	f004 ff88 	bl	8006110 <HAL_UART_DeInit>
		UART_Init_Baud(&huart4, UART4, 19200);
 8001200:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001204:	4932      	ldr	r1, [pc, #200]	; (80012d0 <Camera_Set_Baud+0x12c>)
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <Camera_Set_Baud+0x128>)
 8001208:	f000 f8d6 	bl	80013b8 <UART_Init_Baud>
 800120c:	e043      	b.n	8001296 <Camera_Set_Baud+0xf2>
	}

	else if (baud == 38400) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8001214:	d112      	bne.n	800123c <Camera_Set_Baud+0x98>
		send_UART(&huart4, CAM_BAUD_38400, rec, sizeof(CAM_BAUD_38400), len_rec);
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b29b      	uxth	r3, r3
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2307      	movs	r3, #7
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	492d      	ldr	r1, [pc, #180]	; (80012d8 <Camera_Set_Baud+0x134>)
 8001222:	482a      	ldr	r0, [pc, #168]	; (80012cc <Camera_Set_Baud+0x128>)
 8001224:	f7ff fdbe 	bl	8000da4 <send_UART>
		HAL_UART_DeInit(&huart4);
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <Camera_Set_Baud+0x128>)
 800122a:	f004 ff71 	bl	8006110 <HAL_UART_DeInit>
		UART_Init_Baud(&huart4, UART4, 38400);
 800122e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <Camera_Set_Baud+0x12c>)
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <Camera_Set_Baud+0x128>)
 8001236:	f000 f8bf 	bl	80013b8 <UART_Init_Baud>
 800123a:	e02c      	b.n	8001296 <Camera_Set_Baud+0xf2>
	}

	else if (baud == 57600) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001242:	d112      	bne.n	800126a <Camera_Set_Baud+0xc6>
		send_UART(&huart4, CAM_BAUD_57600, rec, sizeof(CAM_BAUD_57600), len_rec);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	b29b      	uxth	r3, r3
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2307      	movs	r3, #7
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <Camera_Set_Baud+0x138>)
 8001250:	481e      	ldr	r0, [pc, #120]	; (80012cc <Camera_Set_Baud+0x128>)
 8001252:	f7ff fda7 	bl	8000da4 <send_UART>
		HAL_UART_DeInit(&huart4);
 8001256:	481d      	ldr	r0, [pc, #116]	; (80012cc <Camera_Set_Baud+0x128>)
 8001258:	f004 ff5a 	bl	8006110 <HAL_UART_DeInit>
		UART_Init_Baud(&huart4, UART4, 57600);
 800125c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001260:	491b      	ldr	r1, [pc, #108]	; (80012d0 <Camera_Set_Baud+0x12c>)
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <Camera_Set_Baud+0x128>)
 8001264:	f000 f8a8 	bl	80013b8 <UART_Init_Baud>
 8001268:	e015      	b.n	8001296 <Camera_Set_Baud+0xf2>
	}

	else if (baud == 115200) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8001270:	d111      	bne.n	8001296 <Camera_Set_Baud+0xf2>
		send_UART(&huart4, CAM_BAUD_115200, rec, sizeof(CAM_BAUD_115200), len_rec);
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	b29b      	uxth	r3, r3
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2307      	movs	r3, #7
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4918      	ldr	r1, [pc, #96]	; (80012e0 <Camera_Set_Baud+0x13c>)
 800127e:	4813      	ldr	r0, [pc, #76]	; (80012cc <Camera_Set_Baud+0x128>)
 8001280:	f7ff fd90 	bl	8000da4 <send_UART>
		HAL_UART_DeInit(&huart4);
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <Camera_Set_Baud+0x128>)
 8001286:	f004 ff43 	bl	8006110 <HAL_UART_DeInit>
		UART_Init_Baud(&huart4, UART4, 115200);
 800128a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128e:	4910      	ldr	r1, [pc, #64]	; (80012d0 <Camera_Set_Baud+0x12c>)
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <Camera_Set_Baud+0x128>)
 8001292:	f000 f891 	bl	80013b8 <UART_Init_Baud>
	}

	for (int i = 0; i < len_rec; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e00a      	b.n	80012b2 <Camera_Set_Baud+0x10e>
		printf("%d ", rec[i]);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <Camera_Set_Baud+0x140>)
 80012a8:	f007 fe7e 	bl	8008fa8 <iprintf>
	for (int i = 0; i < len_rec; i++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf0      	blt.n	800129c <Camera_Set_Baud+0xf8>
	printf("\n");
 80012ba:	200a      	movs	r0, #10
 80012bc:	f007 fe8c 	bl	8008fd8 <putchar>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24000038 	.word	0x24000038
 80012cc:	24000174 	.word	0x24000174
 80012d0:	40004c00 	.word	0x40004c00
 80012d4:	24000040 	.word	0x24000040
 80012d8:	24000048 	.word	0x24000048
 80012dc:	24000050 	.word	0x24000050
 80012e0:	24000058 	.word	0x24000058
 80012e4:	0800a0d8 	.word	0x0800a0d8

080012e8 <Camera_Initialize>:

void Camera_Initialize(uint8_t resolution, uint8_t compression, uint32_t baud) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	603a      	str	r2, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	460b      	mov	r3, r1
 80012f6:	71bb      	strb	r3, [r7, #6]
	   *
	   *  All of the above steps should really only be handled one time, at system initialization. If we are disconnected from power, however,
	   *  the camera is supposed to be reset in its normal flow. This is likely not be necessary, more testing is needed.
	   */
	  uint8_t reset_ack[5];
	  reset_ack[0] = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3020 	strb.w	r3, [r7, #32]
	  uint8_t* reset_ack1 = reset_ack;
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	637b      	str	r3, [r7, #52]	; 0x34

	  Camera_Reset(reset_ack1, sizeof(reset_ack));
 8001304:	2105      	movs	r1, #5
 8001306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001308:	f7ff fd0e 	bl	8000d28 <Camera_Reset>

	  if (reset_ack[0] == 0x76)
 800130c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001310:	2b76      	cmp	r3, #118	; 0x76
 8001312:	d103      	bne.n	800131c <Camera_Initialize+0x34>
		  printf("Ack for reset received.\n");
 8001314:	4821      	ldr	r0, [pc, #132]	; (800139c <Camera_Initialize+0xb4>)
 8001316:	f007 fecf 	bl	80090b8 <puts>
 800131a:	e002      	b.n	8001322 <Camera_Initialize+0x3a>
	  else
	  	  printf("No ack received for reset.\n");
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <Camera_Initialize+0xb8>)
 800131e:	f007 fecb 	bl	80090b8 <puts>

	  uint8_t resol_ack[5];
	  uint8_t* resol_ack1 = resol_ack;
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
	  Camera_Set_Res(resol_ack1, sizeof(resol_ack), resolution);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	461a      	mov	r2, r3
 800132c:	2105      	movs	r1, #5
 800132e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001330:	f7ff feb2 	bl	8001098 <Camera_Set_Res>

	  if (resol_ack[0] == 0x76)
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	2b76      	cmp	r3, #118	; 0x76
 8001338:	d103      	bne.n	8001342 <Camera_Initialize+0x5a>
		  printf("Ack for resolution received.\n");
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <Camera_Initialize+0xbc>)
 800133c:	f007 febc 	bl	80090b8 <puts>
 8001340:	e002      	b.n	8001348 <Camera_Initialize+0x60>
	  else
		  printf("No ack received for resolution.\n");
 8001342:	4819      	ldr	r0, [pc, #100]	; (80013a8 <Camera_Initialize+0xc0>)
 8001344:	f007 feb8 	bl	80090b8 <puts>

	  uint8_t compress_ack[5];
	  uint8_t* compress_ack1 = compress_ack;
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  Camera_Set_Compress(compress_ack1, sizeof(compress_ack), compression);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	461a      	mov	r2, r3
 8001352:	2105      	movs	r1, #5
 8001354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001356:	f7ff fef1 	bl	800113c <Camera_Set_Compress>

	  if (compress_ack[0] == 0x76)
 800135a:	7c3b      	ldrb	r3, [r7, #16]
 800135c:	2b76      	cmp	r3, #118	; 0x76
 800135e:	d103      	bne.n	8001368 <Camera_Initialize+0x80>
		  printf("Ack for compression received.\n");
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <Camera_Initialize+0xc4>)
 8001362:	f007 fea9 	bl	80090b8 <puts>
 8001366:	e002      	b.n	800136e <Camera_Initialize+0x86>
	  else
		  printf("No ack received for resolution.\n");
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <Camera_Initialize+0xc0>)
 800136a:	f007 fea5 	bl	80090b8 <puts>

	  uint8_t baud_ack[5];
	  uint8_t* baud_ack1 = baud_ack;
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
	  Camera_Set_Baud(baud_ack1, sizeof(baud_ack), baud);
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	2105      	movs	r1, #5
 8001378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800137a:	f7ff ff13 	bl	80011a4 <Camera_Set_Baud>

	  if (baud_ack[0] == 0x76)
 800137e:	7a3b      	ldrb	r3, [r7, #8]
 8001380:	2b76      	cmp	r3, #118	; 0x76
 8001382:	d103      	bne.n	800138c <Camera_Initialize+0xa4>
		  printf("Ack for baudrate received.\n");
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <Camera_Initialize+0xc8>)
 8001386:	f007 fe97 	bl	80090b8 <puts>
	  else
		  printf("No ack received for baudrate.\n");

}
 800138a:	e002      	b.n	8001392 <Camera_Initialize+0xaa>
		  printf("No ack received for baudrate.\n");
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <Camera_Initialize+0xcc>)
 800138e:	f007 fe93 	bl	80090b8 <puts>
}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0800a10c 	.word	0x0800a10c
 80013a0:	0800a124 	.word	0x0800a124
 80013a4:	0800a140 	.word	0x0800a140
 80013a8:	0800a160 	.word	0x0800a160
 80013ac:	0800a180 	.word	0x0800a180
 80013b0:	0800a1a0 	.word	0x0800a1a0
 80013b4:	0800a1bc 	.word	0x0800a1bc

080013b8 <UART_Init_Baud>:

// function used purely to properly DeInit and then Init with a baud rate aside from our CubeMX generation
// by default, pass huart4 and UART4 for huart and name
void UART_Init_Baud(UART_HandleTypeDef* huart, USART_TypeDef* name, uint32_t baud) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]

  huart->Instance = name;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = baud;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	220c      	movs	r2, #12
 80013e6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f004 fe32 	bl	8006070 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <UART_Init_Baud+0x5e>
  {
    Error_Handler();
 8001412:	f000 f845 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f007 fcae 	bl	8008d7a <HAL_UARTEx_SetTxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <UART_Init_Baud+0x70>
  {
    Error_Handler();
 8001424:	f000 f83c 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001428:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f007 fce2 	bl	8008df6 <HAL_UARTEx_SetRxFifoThreshold>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <UART_Init_Baud+0x84>
  {
    Error_Handler();
 8001438:	f000 f832 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(huart) != HAL_OK)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f007 fc61 	bl	8008d04 <HAL_UARTEx_EnableFifoMode>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <UART_Init_Baud+0x94>
  {
    Error_Handler();
 8001448:	f000 f82a 	bl	80014a0 <Error_Handler>
  }

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <get_TOF_Data>:


// dummy functions to be used as interfaces to other blocks
void get_TOF_Data(uint8_t* buf) {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_write>:
 * 		- enable SWV ITM Data Console in Windows
 * 		- enable whichever ports necessary, can leave memory as default, check console settings here
 * 		- ensure that debug settings are enabled as such that SWV is enabled, probe is GDB server, and
 * 			clock matches the SYSCLK, not HCLK
 */
int _write(int file, char* out, int len) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e009      	b.n	800148e <_write+0x26>
		ITM_SendChar(out[i]);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f8fc 	bl	8000680 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf1      	blt.n	800147a <_write+0x12>
	}
	return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x30>)
 80014b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_MspInit+0x30>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_MspInit+0x30>)
 80014c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	58024400 	.word	0x58024400

080014e4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_JPEG_MspInit+0x3c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10e      	bne.n	8001514 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_JPEG_MspInit+0x40>)
 80014f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_JPEG_MspInit+0x40>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_JPEG_MspInit+0x40>)
 8001508:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	52003000 	.word	0x52003000
 8001524:	58024400 	.word	0x58024400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <HAL_UART_MspInit+0xd8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d155      	bne.n	80015f6 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_UART_MspInit+0xdc>)
 800154c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <HAL_UART_MspInit+0xdc>)
 8001552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_UART_MspInit+0xdc>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_UART_MspInit+0xdc>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_UART_MspInit+0xdc>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_UART_MspInit+0xdc>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_UART_MspInit+0xdc>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0xdc>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_UART_MspInit+0xdc>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration    
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b2:	2302      	movs	r3, #2
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015b6:	2308      	movs	r3, #8
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015c2:	f000 fd23 	bl	800200c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d6:	2308      	movs	r3, #8
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <HAL_UART_MspInit+0xe4>)
 80015e2:	f000 fd13 	bl	800200c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2034      	movs	r0, #52	; 0x34
 80015ec:	f000 fb35 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015f0:	2034      	movs	r0, #52	; 0x34
 80015f2:	f000 fb4c 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004c00 	.word	0x40004c00
 8001604:	58024400 	.word	0x58024400
 8001608:	58022000 	.word	0x58022000
 800160c:	58020000 	.word	0x58020000

08001610 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_UART_MspDeInit+0x44>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d113      	bne.n	800164a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_UART_MspDeInit+0x48>)
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_UART_MspDeInit+0x48>)
 800162a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800162e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  
    /**UART4 GPIO Configuration    
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX 
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_9);
 8001632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_UART_MspDeInit+0x4c>)
 8001638:	f000 fe98 	bl	800236c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800163c:	2101      	movs	r1, #1
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <HAL_UART_MspDeInit+0x50>)
 8001640:	f000 fe94 	bl	800236c <HAL_GPIO_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001644:	2034      	movs	r0, #52	; 0x34
 8001646:	f000 fb30 	bl	8001caa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004c00 	.word	0x40004c00
 8001658:	58024400 	.word	0x58024400
 800165c:	58022000 	.word	0x58022000
 8001660:	58020000 	.word	0x58020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f984 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <UART4_IRQHandler+0x10>)
 80016c6:	f004 fe2d 	bl	8006324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	24000174 	.word	0x24000174

080016d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
	}

return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_close>:
	}
	return len;
}

int _close(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
	return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
	return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_isatty>:

int _isatty(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x50>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x16>
		heap_end = &end;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <_sbrk+0x50>)
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <_sbrk+0x54>)
 800178c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <_sbrk+0x50>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <_sbrk+0x50>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	466a      	mov	r2, sp
 800179e:	4293      	cmp	r3, r2
 80017a0:	d907      	bls.n	80017b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017a2:	f007 fbcf 	bl	8008f44 <__errno>
 80017a6:	4602      	mov	r2, r0
 80017a8:	230c      	movs	r3, #12
 80017aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	e006      	b.n	80017c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <_sbrk+0x50>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <_sbrk+0x50>)
 80017bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	24000110 	.word	0x24000110
 80017cc:	24010988 	.word	0x24010988

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <SystemInit+0xac>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <SystemInit+0xac>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <SystemInit+0xb0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a25      	ldr	r2, [pc, #148]	; (8001880 <SystemInit+0xb0>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <SystemInit+0xb0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemInit+0xb0>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4921      	ldr	r1, [pc, #132]	; (8001880 <SystemInit+0xb0>)
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <SystemInit+0xb4>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <SystemInit+0xb0>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <SystemInit+0xb0>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <SystemInit+0xb0>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <SystemInit+0xb0>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <SystemInit+0xb0>)
 800181c:	2200      	movs	r2, #0
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <SystemInit+0xb0>)
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <SystemInit+0xb0>)
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <SystemInit+0xb0>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <SystemInit+0xb0>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <SystemInit+0xb0>)
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <SystemInit+0xb0>)
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <SystemInit+0xb0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <SystemInit+0xb0>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <SystemInit+0xb0>)
 8001852:	2200      	movs	r2, #0
 8001854:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <SystemInit+0xb8>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SystemInit+0xbc>)
 800185c:	4013      	ands	r3, r2
 800185e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001862:	d202      	bcs.n	800186a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <SystemInit+0xc0>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SystemInit+0xac>)
 800186c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001870:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	58024400 	.word	0x58024400
 8001884:	eaf6ed7f 	.word	0xeaf6ed7f
 8001888:	5c001000 	.word	0x5c001000
 800188c:	ffff0000 	.word	0xffff0000
 8001890:	51008108 	.word	0x51008108

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800189a:	e003      	b.n	80018a4 <LoopCopyDataInit>

0800189c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800189e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018a2:	3104      	adds	r1, #4

080018a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018ac:	d3f6      	bcc.n	800189c <CopyDataInit>
  ldr  r2, =_sbss
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018b0:	e002      	b.n	80018b8 <LoopFillZerobss>

080018b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018b4:	f842 3b04 	str.w	r3, [r2], #4

080018b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018bc:	d3f9      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018be:	f7ff ff87 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f007 fb45 	bl	8008f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7fe ff03 	bl	80006d0 <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80018d0:	0800a504 	.word	0x0800a504
  ldr  r0, =_sdata
 80018d4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018d8:	240000f4 	.word	0x240000f4
  ldr  r2, =_sbss
 80018dc:	240000f4 	.word	0x240000f4
  ldr  r3, = _ebss
 80018e0:	24010988 	.word	0x24010988

080018e4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC3_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f9a9 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f2:	f002 fee5 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 80018f6:	4601      	mov	r1, r0
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_Init+0x60>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_Init+0x64>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	fa21 f303 	lsr.w	r3, r1, r3
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_Init+0x68>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_Init+0x68>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_Init+0x60>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490b      	ldr	r1, [pc, #44]	; (800194c <HAL_Init+0x64>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_Init+0x6c>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f812 	bl	8001958 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e002      	b.n	8001944 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193e:	f7ff fdb7 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58024400 	.word	0x58024400
 800194c:	0800a1ec 	.word	0x0800a1ec
 8001950:	24000080 	.word	0x24000080
 8001954:	24000084 	.word	0x24000084

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_InitTick+0x60>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e021      	b.n	80019b0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_InitTick+0x64>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_InitTick+0x60>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f99f 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f95b 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x68>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2400008c 	.word	0x2400008c
 80019bc:	24000080 	.word	0x24000080
 80019c0:	24000088 	.word	0x24000088

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2400008c 	.word	0x2400008c
 80019e8:	24010980 	.word	0x24010980

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	24010980 	.word	0x24010980

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_Delay+0x40>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2400008c 	.word	0x2400008c

08001a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetREVID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5c001000 	.word	0x5c001000

08001a60 <__NVIC_SetPriorityGrouping>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	05fa0000 	.word	0x05fa0000

08001aa8 <__NVIC_GetPriorityGrouping>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_DisableIRQ>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db10      	blt.n	8001b34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <__NVIC_DisableIRQ+0x40>)
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	3320      	adds	r3, #32
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff07 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff1e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff90 	bl	8001b98 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5f 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff11 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff21 	bl	8001b00 <__NVIC_DisableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff96 	bl	8001c00 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e188      	b.n	8002004 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d004      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e17d      	b.n	8002004 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8c      	ldr	r2, [pc, #560]	; (8001f40 <HAL_DMA_Abort_IT+0x260>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04a      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a8b      	ldr	r2, [pc, #556]	; (8001f44 <HAL_DMA_Abort_IT+0x264>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d045      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a89      	ldr	r2, [pc, #548]	; (8001f48 <HAL_DMA_Abort_IT+0x268>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a88      	ldr	r2, [pc, #544]	; (8001f4c <HAL_DMA_Abort_IT+0x26c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d03b      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a86      	ldr	r2, [pc, #536]	; (8001f50 <HAL_DMA_Abort_IT+0x270>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d036      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a85      	ldr	r2, [pc, #532]	; (8001f54 <HAL_DMA_Abort_IT+0x274>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d031      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a83      	ldr	r2, [pc, #524]	; (8001f58 <HAL_DMA_Abort_IT+0x278>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02c      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <HAL_DMA_Abort_IT+0x27c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d027      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a80      	ldr	r2, [pc, #512]	; (8001f60 <HAL_DMA_Abort_IT+0x280>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d022      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_DMA_Abort_IT+0x284>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d01d      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_DMA_Abort_IT+0x288>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d018      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7c      	ldr	r2, [pc, #496]	; (8001f6c <HAL_DMA_Abort_IT+0x28c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_DMA_Abort_IT+0x290>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00e      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a79      	ldr	r2, [pc, #484]	; (8001f74 <HAL_DMA_Abort_IT+0x294>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_DMA_Abort_IT+0x298>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xc8>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a76      	ldr	r2, [pc, #472]	; (8001f7c <HAL_DMA_Abort_IT+0x29c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Abort_IT+0xcc>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_DMA_Abort_IT+0xce>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d065      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a60      	ldr	r2, [pc, #384]	; (8001f40 <HAL_DMA_Abort_IT+0x260>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04a      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5e      	ldr	r2, [pc, #376]	; (8001f44 <HAL_DMA_Abort_IT+0x264>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d045      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <HAL_DMA_Abort_IT+0x268>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d040      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5b      	ldr	r2, [pc, #364]	; (8001f4c <HAL_DMA_Abort_IT+0x26c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d03b      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5a      	ldr	r2, [pc, #360]	; (8001f50 <HAL_DMA_Abort_IT+0x270>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d036      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_DMA_Abort_IT+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d031      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_DMA_Abort_IT+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d02c      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a55      	ldr	r2, [pc, #340]	; (8001f5c <HAL_DMA_Abort_IT+0x27c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d027      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a54      	ldr	r2, [pc, #336]	; (8001f60 <HAL_DMA_Abort_IT+0x280>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_DMA_Abort_IT+0x284>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <HAL_DMA_Abort_IT+0x288>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <HAL_DMA_Abort_IT+0x28c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4e      	ldr	r2, [pc, #312]	; (8001f70 <HAL_DMA_Abort_IT+0x290>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_DMA_Abort_IT+0x294>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4b      	ldr	r2, [pc, #300]	; (8001f78 <HAL_DMA_Abort_IT+0x298>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x17a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a49      	ldr	r2, [pc, #292]	; (8001f7c <HAL_DMA_Abort_IT+0x29c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_Abort_IT+0x18c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e0ca      	b.n	8002002 <HAL_DMA_Abort_IT+0x322>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e0c1      	b.n	8002002 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020e 	bic.w	r2, r2, #14
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_DMA_Abort_IT+0x260>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <HAL_DMA_Abort_IT+0x264>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_DMA_Abort_IT+0x268>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_DMA_Abort_IT+0x26c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_DMA_Abort_IT+0x270>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_DMA_Abort_IT+0x274>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_DMA_Abort_IT+0x278>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_DMA_Abort_IT+0x27c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_DMA_Abort_IT+0x280>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_DMA_Abort_IT+0x284>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_DMA_Abort_IT+0x288>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_DMA_Abort_IT+0x28c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_DMA_Abort_IT+0x290>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_DMA_Abort_IT+0x294>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_DMA_Abort_IT+0x298>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_DMA_Abort_IT+0x29c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d128      	bne.n	8001f80 <HAL_DMA_Abort_IT+0x2a0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e027      	b.n	8001f90 <HAL_DMA_Abort_IT+0x2b0>
 8001f40:	40020010 	.word	0x40020010
 8001f44:	40020028 	.word	0x40020028
 8001f48:	40020040 	.word	0x40020040
 8001f4c:	40020058 	.word	0x40020058
 8001f50:	40020070 	.word	0x40020070
 8001f54:	40020088 	.word	0x40020088
 8001f58:	400200a0 	.word	0x400200a0
 8001f5c:	400200b8 	.word	0x400200b8
 8001f60:	40020410 	.word	0x40020410
 8001f64:	40020428 	.word	0x40020428
 8001f68:	40020440 	.word	0x40020440
 8001f6c:	40020458 	.word	0x40020458
 8001f70:	40020470 	.word	0x40020470
 8001f74:	40020488 	.word	0x40020488
 8001f78:	400204a0 	.word	0x400204a0
 8001f7c:	400204b8 	.word	0x400204b8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2201      	movs	r2, #1
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fbe:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fe0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_GPIO_Init+0x234>)
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800201e:	e194      	b.n	800234a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8186 	beq.w	8002344 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x3c>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b12      	cmp	r3, #18
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d00b      	beq.n	80020e4 <HAL_GPIO_Init+0xd8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80e0 	beq.w	8002344 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x238>)
 8002186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x238>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_GPIO_Init+0x238>)
 8002196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a29      	ldr	r2, [pc, #164]	; (8002248 <HAL_GPIO_Init+0x23c>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_GPIO_Init+0x240>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d052      	beq.n	8002274 <HAL_GPIO_Init+0x268>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_GPIO_Init+0x244>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d031      	beq.n	800223a <HAL_GPIO_Init+0x22e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_GPIO_Init+0x248>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <HAL_GPIO_Init+0x22a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x24c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_GPIO_Init+0x250>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_GPIO_Init+0x254>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_GPIO_Init+0x258>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_GPIO_Init+0x25c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_GPIO_Init+0x260>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_GPIO_Init+0x264>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x20e>
 8002216:	2309      	movs	r3, #9
 8002218:	e02d      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800221a:	230a      	movs	r3, #10
 800221c:	e02b      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800221e:	2308      	movs	r3, #8
 8002220:	e029      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002222:	2307      	movs	r3, #7
 8002224:	e027      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002226:	2306      	movs	r3, #6
 8002228:	e025      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800222a:	2305      	movs	r3, #5
 800222c:	e023      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800222e:	2304      	movs	r3, #4
 8002230:	e021      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002232:	2303      	movs	r3, #3
 8002234:	e01f      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002236:	2302      	movs	r3, #2
 8002238:	e01d      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800223a:	2301      	movs	r3, #1
 800223c:	e01b      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800223e:	bf00      	nop
 8002240:	58000080 	.word	0x58000080
 8002244:	58024400 	.word	0x58024400
 8002248:	58000400 	.word	0x58000400
 800224c:	58020000 	.word	0x58020000
 8002250:	58020400 	.word	0x58020400
 8002254:	58020800 	.word	0x58020800
 8002258:	58020c00 	.word	0x58020c00
 800225c:	58021000 	.word	0x58021000
 8002260:	58021400 	.word	0x58021400
 8002264:	58021800 	.word	0x58021800
 8002268:	58021c00 	.word	0x58021c00
 800226c:	58022000 	.word	0x58022000
 8002270:	58022400 	.word	0x58022400
 8002274:	2300      	movs	r3, #0
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002286:	4938      	ldr	r1, [pc, #224]	; (8002368 <HAL_GPIO_Init+0x35c>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f ae63 	bne.w	8002020 <HAL_GPIO_Init+0x14>
  }
}
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	58000400 	.word	0x58000400

0800236c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800237a:	4b75      	ldr	r3, [pc, #468]	; (8002550 <HAL_GPIO_DeInit+0x1e4>)
 800237c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800237e:	e0d9      	b.n	8002534 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80cc 	beq.w	800252e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a6f      	ldr	r2, [pc, #444]	; (8002554 <HAL_GPIO_DeInit+0x1e8>)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_GPIO_DeInit+0x1ec>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d037      	beq.n	8002430 <HAL_GPIO_DeInit+0xc4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a66      	ldr	r2, [pc, #408]	; (800255c <HAL_GPIO_DeInit+0x1f0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d031      	beq.n	800242c <HAL_GPIO_DeInit+0xc0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a65      	ldr	r2, [pc, #404]	; (8002560 <HAL_GPIO_DeInit+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d02b      	beq.n	8002428 <HAL_GPIO_DeInit+0xbc>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a64      	ldr	r2, [pc, #400]	; (8002564 <HAL_GPIO_DeInit+0x1f8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d025      	beq.n	8002424 <HAL_GPIO_DeInit+0xb8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a63      	ldr	r2, [pc, #396]	; (8002568 <HAL_GPIO_DeInit+0x1fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01f      	beq.n	8002420 <HAL_GPIO_DeInit+0xb4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a62      	ldr	r2, [pc, #392]	; (800256c <HAL_GPIO_DeInit+0x200>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d019      	beq.n	800241c <HAL_GPIO_DeInit+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a61      	ldr	r2, [pc, #388]	; (8002570 <HAL_GPIO_DeInit+0x204>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_DeInit+0xac>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a60      	ldr	r2, [pc, #384]	; (8002574 <HAL_GPIO_DeInit+0x208>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_DeInit+0xa8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a5f      	ldr	r2, [pc, #380]	; (8002578 <HAL_GPIO_DeInit+0x20c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_DeInit+0xa4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_GPIO_DeInit+0x210>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_DeInit+0xa0>
 8002408:	2309      	movs	r3, #9
 800240a:	e012      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 800240c:	230a      	movs	r3, #10
 800240e:	e010      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002410:	2308      	movs	r3, #8
 8002412:	e00e      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002414:	2307      	movs	r3, #7
 8002416:	e00c      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002418:	2306      	movs	r3, #6
 800241a:	e00a      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 800241c:	2305      	movs	r3, #5
 800241e:	e008      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002420:	2304      	movs	r3, #4
 8002422:	e006      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002424:	2303      	movs	r3, #3
 8002426:	e004      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002428:	2302      	movs	r3, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_GPIO_DeInit+0xc6>
 8002430:	2300      	movs	r3, #0
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	f002 0203 	and.w	r2, r2, #3
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	4093      	lsls	r3, r2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d136      	bne.n	80024b0 <HAL_GPIO_DeInit+0x144>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002452:	4a40      	ldr	r2, [pc, #256]	; (8002554 <HAL_GPIO_DeInit+0x1e8>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	43da      	mvns	r2, r3
 8002462:	483c      	ldr	r0, [pc, #240]	; (8002554 <HAL_GPIO_DeInit+0x1e8>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	400a      	ands	r2, r1
 800246a:	3302      	adds	r3, #2
 800246c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	401a      	ands	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249a:	4013      	ands	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ac:	4013      	ands	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2103      	movs	r1, #3
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	08d2      	lsrs	r2, r2, #3
 80024e4:	4019      	ands	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2103      	movs	r1, #3
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	2101      	movs	r1, #1
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2103      	movs	r1, #3
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af1f 	bne.w	8002380 <HAL_GPIO_DeInit+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	58000080 	.word	0x58000080
 8002554:	58000400 	.word	0x58000400
 8002558:	58020000 	.word	0x58020000
 800255c:	58020400 	.word	0x58020400
 8002560:	58020800 	.word	0x58020800
 8002564:	58020c00 	.word	0x58020c00
 8002568:	58021000 	.word	0x58021000
 800256c:	58021400 	.word	0x58021400
 8002570:	58021800 	.word	0x58021800
 8002574:	58021c00 	.word	0x58021c00
 8002578:	58022000 	.word	0x58022000
 800257c:	58022400 	.word	0x58022400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e070      	b.n	80026a8 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe ff82 	bl	80014e4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8002616:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002646:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_JPEG_Init+0xfc>)
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_JPEG_Init+0x100>)
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fc95 	bl	8002f90 <JPEG_Set_HuffEnc_Mem>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e018      	b.n	80026a8 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002684:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	0800a3dc 	.word	0x0800a3dc
 80026b4:	0800a41c 	.word	0x0800a41c

080026b8 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb, cBblockNb, cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_JPEG_GetInfo+0x16>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e083      	b.n	80027da <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d103      	bne.n	80026e8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2210      	movs	r2, #16
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e017      	b.n	8002718 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e00c      	b.n	8002718 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d103      	bne.n	8002714 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2230      	movs	r2, #48	; 0x30
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e001      	b.n	8002718 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e060      	b.n	80027da <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	b29a      	uxth	r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b29a      	uxth	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b10      	cmp	r3, #16
 800273a:	d003      	beq.n	8002744 <HAL_JPEG_GetInfo+0x8c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b30      	cmp	r3, #48	; 0x30
 8002742:	d140      	bne.n	80027c6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d109      	bne.n	8002788 <HAL_JPEG_GetInfo+0xd0>
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_JPEG_GetInfo+0xd0>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	e01d      	b.n	80027c4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_JPEG_GetInfo+0xea>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_JPEG_GetInfo+0xea>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	e010      	b.n	80027c4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d109      	bne.n	80027bc <HAL_JPEG_GetInfo+0x104>
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_JPEG_GetInfo+0x104>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e003      	b.n	80027c4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80027c2:	e003      	b.n	80027cc <HAL_JPEG_GetInfo+0x114>
 80027c4:	e002      	b.n	80027cc <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 f985 	bl	8003adc <JPEG_GetQuality>
 80027d2:	4602      	mov	r2, r0
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_JPEG_Decode+0x20>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_JPEG_Decode+0x20>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e071      	b.n	80028ea <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_JPEG_Decode+0x32>
 8002810:	2302      	movs	r3, #2
 8002812:	e06a      	b.n	80028ea <HAL_JPEG_Decode+0x108>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7ff f8e6 	bl	80019ec <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d158      	bne.n	80028e0 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2204      	movs	r2, #4
 8002832:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0206 	orr.w	r2, r3, #6
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fe0a 	bl	8003494 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002880:	e01e      	b.n	80028c0 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d01a      	beq.n	80028c0 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800288a:	f7ff f8af 	bl	80019ec <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <HAL_JPEG_Decode+0xbe>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	f043 0208 	orr.w	r2, r3, #8
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e014      	b.n	80028ea <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fe5b 	bl	800357c <JPEG_Process>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0da      	beq.n	8002882 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e004      	b.n	80028ea <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d116      	bne.n	800293a <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d033      	beq.n	8002994 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
 8002938:	e02c      	b.n	8002994 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d126      	bne.n	8002994 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f043 0306 	orr.w	r3, r3, #6
 8002962:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002980:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b08b      	sub	sp, #44	; 0x2c
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	e020      	b.n	8002a68 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	4413      	add	r3, r2
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3a:	d90f      	bls.n	8002a5c <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e055      	b.n	8002aec <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	440b      	add	r3, r1
 8002a4a:	3201      	adds	r2, #1
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]
      p++;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	3301      	adds	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
      i--;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ee      	bne.n	8002a40 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d9db      	bls.n	8002a26 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	4413      	add	r3, r2
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a3a      	ldr	r2, [r7, #32]
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	617b      	str	r3, [r7, #20]
  p = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8002a8c:	e027      	b.n	8002ade <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	601a      	str	r2, [r3, #0]
      p++;
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	623b      	str	r3, [r7, #32]
      code++;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d0eb      	beq.n	8002a8e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b1f      	cmp	r3, #31
 8002aba:	d901      	bls.n	8002ac0 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e015      	b.n	8002aec <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d301      	bcc.n	8002ad2 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00c      	b.n	8002aec <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
    si++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1dd      	bne.n	8002aa6 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	372c      	adds	r7, #44	; 0x2c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	6018      	str	r0, [r3, #0]
 8002b04:	463b      	mov	r3, r7
 8002b06:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002b18:	f7ff ff79 	bl	8002a0e <JPEG_Bits_To_SizeCodes>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8002b22:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8002b2a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002b2e:	e066      	b.n	8002bfe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8002b36:	e05a      	b.n	8002bee <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002b40:	4413      	add	r3, r2
 8002b42:	3310      	adds	r3, #16
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8002b4a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002b52:	23a0      	movs	r3, #160	; 0xa0
 8002b54:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002b58:	e021      	b.n	8002b9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002b5a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b5e:	2bf0      	cmp	r3, #240	; 0xf0
 8002b60:	d103      	bne.n	8002b6a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8002b62:	23a1      	movs	r3, #161	; 0xa1
 8002b64:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002b68:	e019      	b.n	8002b9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002b6a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8002b78:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8002b84:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	461a      	mov	r2, r3
 8002b92:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002b96:	4413      	add	r3, r2
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002b9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002ba2:	2ba1      	cmp	r3, #161	; 0xa1
 8002ba4:	d901      	bls.n	8002baa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e029      	b.n	8002bfe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002bb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002bbe:	3328      	adds	r3, #40	; 0x28
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002bc6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002bca:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b2d9      	uxtb	r1, r3
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002bde:	4413      	add	r3, r2
 8002be0:	460a      	mov	r2, r1
 8002be2:	701a      	strb	r2, [r3, #0]
      k++;
 8002be4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002be8:	3301      	adds	r3, #1
 8002bea:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d39d      	bcc.n	8002b38 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	463b      	mov	r3, r7
 8002c16:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c20:	f107 0208 	add.w	r2, r7, #8
 8002c24:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8002c28:	f7ff fef1 	bl	8002a0e <JPEG_Bits_To_SizeCodes>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8002c32:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8002c3a:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002c3e:	e03b      	b.n	8002cb8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8002c46:	e030      	b.n	8002caa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002c50:	4413      	add	r3, r2
 8002c52:	3310      	adds	r3, #16
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002c5a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002c5e:	2b0b      	cmp	r3, #11
 8002c60:	d901      	bls.n	8002c66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002c62:	2301      	movs	r3, #1
 8002c64:	e028      	b.n	8002cb8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8002c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c72:	463b      	mov	r3, r7
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002c82:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8002c86:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b2d9      	uxtb	r1, r3
 8002c92:	463b      	mov	r3, r7
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002c9a:	4413      	add	r3, r2
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	701a      	strb	r2, [r3, #0]
      k++;
 8002ca0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8002caa:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002cae:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3c8      	bcc.n	8002c48 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b09a      	sub	sp, #104	; 0x68
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce8:	e00f      	b.n	8002d0a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002d00:	3318      	adds	r3, #24
 8002d02:	663b      	str	r3, [r7, #96]	; 0x60
 8002d04:	e001      	b.n	8002d0a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e05b      	b.n	8002dc2 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d057      	beq.n	8002dc0 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	68b8      	ldr	r0, [r7, #8]
 8002d18:	f7ff ff76 	bl	8002c08 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8002d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d2e:	e048      	b.n	8002dc2 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8002d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002d3a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	3304      	adds	r3, #4
 8002d40:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d44:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002d48:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8002d4e:	e034      	b.n	8002dba <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8002d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d52:	3b01      	subs	r3, #1
 8002d54:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8002d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002d5c:	f107 0214 	add.w	r2, r7, #20
 8002d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6e:	3302      	adds	r3, #2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002d76:	440b      	add	r3, r1
 8002d78:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8002d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d84:	3b01      	subs	r3, #1
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002d88:	f107 0214 	add.w	r2, r7, #20
 8002d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002da2:	440b      	add	r3, r1
 8002da4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4313      	orrs	r3, r2
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	431a      	orrs	r2, r3
 8002db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d8c7      	bhi.n	8002d50 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3768      	adds	r7, #104	; 0x68
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	6018      	str	r0, [r3, #0]
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	6019      	str	r1, [r3, #0]
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	1d3a      	adds	r2, r7, #4
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10a      	bne.n	8002e0e <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e08:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002e0c:	e016      	b.n	8002e3c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002e0e:	f107 030c 	add.w	r3, r7, #12
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002e1a:	1d3a      	adds	r2, r7, #4
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d10a      	bne.n	8002e38 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002e22:	f107 030c 	add.w	r3, r7, #12
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e32:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002e36:	e001      	b.n	8002e3c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e09c      	b.n	8002f76 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8096 	beq.w	8002f74 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002e48:	f107 0214 	add.w	r2, r7, #20
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	4611      	mov	r1, r2
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	f7ff fe50 	bl	8002af8 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8002e5e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8002e66:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002e6a:	e084      	b.n	8002f76 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002e6c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002e70:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002e7a:	e00e      	b.n	8002e9a <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8002e7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002e80:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002e84:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002e86:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002e90:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002e94:	3301      	adds	r3, #1
 8002e96:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002e9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d9ec      	bls.n	8002e7c <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8002ea2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002ea6:	4a36      	ldr	r2, [pc, #216]	; (8002f80 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8002ea8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002eaa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002eae:	3304      	adds	r3, #4
 8002eb0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8002eb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002eb8:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8002eba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002ebc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8002ec6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002eca:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8002ecc:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002ece:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8002ed8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002edc:	4a2b      	ldr	r2, [pc, #172]	; (8002f8c <JPEG_Set_HuffAC_Mem+0x1c0>)
 8002ede:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002ee0:	23a2      	movs	r3, #162	; 0xa2
 8002ee2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8002ee6:	e041      	b.n	8002f6c <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8002ee8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002eec:	3b01      	subs	r3, #1
 8002eee:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8002ef2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002efc:	f107 0214 	add.w	r2, r7, #20
 8002f00:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f0e:	f107 0114 	add.w	r1, r7, #20
 8002f12:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8002f26:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002f30:	f107 0214 	add.w	r2, r7, #20
 8002f34:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f42:	f107 0114 	add.w	r1, r7, #20
 8002f46:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f4a:	3328      	adds	r3, #40	; 0x28
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002f5a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002f64:	431a      	orrs	r2, r3
 8002f66:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f6a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002f6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d8b9      	bhi.n	8002ee8 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	0fd10fd0 	.word	0x0fd10fd0
 8002f84:	0fd30fd2 	.word	0x0fd30fd2
 8002f88:	0fd50fd4 	.word	0x0fd50fd4
 8002f8c:	0fd70fd6 	.word	0x0fd70fd6

08002f90 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f84d 	bl	8003038 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	491f      	ldr	r1, [pc, #124]	; (8003028 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff0e 	bl	8002dcc <JPEG_Set_HuffAC_Mem>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	e030      	b.n	8003020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4918      	ldr	r1, [pc, #96]	; (800302c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fefe 	bl	8002dcc <JPEG_Set_HuffAC_Mem>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	e020      	b.n	8003020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4911      	ldr	r1, [pc, #68]	; (8003030 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fe69 	bl	8002cc2 <JPEG_Set_HuffDC_Mem>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	e010      	b.n	8003020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003006:	461a      	mov	r2, r3
 8003008:	490a      	ldr	r1, [pc, #40]	; (8003034 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fe59 	bl	8002cc2 <JPEG_Set_HuffDC_Mem>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	e000      	b.n	8003020 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	0800a234 	.word	0x0800a234
 800302c:	0800a2e8 	.word	0x0800a2e8
 8003030:	0800a1fc 	.word	0x0800a1fc
 8003034:	0800a218 	.word	0x0800a218

08003038 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003038:	b480      	push	{r7}
 800303a:	b08b      	sub	sp, #44	; 0x2c
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003040:	4b80      	ldr	r3, [pc, #512]	; (8003244 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003042:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <JPEG_Set_Huff_DHTMem+0x210>)
 8003046:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003048:	4b80      	ldr	r3, [pc, #512]	; (800324c <JPEG_Set_Huff_DHTMem+0x214>)
 800304a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <JPEG_Set_Huff_DHTMem+0x218>)
 800304e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003058:	330c      	adds	r3, #12
 800305a:	623b      	str	r3, [r7, #32]
  index = 16;
 800305c:	2310      	movs	r3, #16
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003060:	e01d      	b.n	800309e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	3b01      	subs	r3, #1
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	3b02      	subs	r3, #2
 8003070:	6979      	ldr	r1, [r7, #20]
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003076:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	3b03      	subs	r3, #3
 800307c:	6979      	ldr	r1, [r7, #20]
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003082:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	3a04      	subs	r2, #4
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800308c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	601a      	str	r2, [r3, #0]
    address--;
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	3b04      	subs	r3, #4
 8003096:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	3b04      	subs	r3, #4
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d8de      	bhi.n	8003062 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80030ac:	3318      	adds	r3, #24
 80030ae:	623b      	str	r3, [r7, #32]
  index = 12;
 80030b0:	230c      	movs	r3, #12
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80030b4:	e021      	b.n	80030fa <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3b01      	subs	r3, #1
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4413      	add	r3, r2
 80030be:	7c1b      	ldrb	r3, [r3, #16]
 80030c0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3b02      	subs	r3, #2
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	440b      	add	r3, r1
 80030ca:	7c1b      	ldrb	r3, [r3, #16]
 80030cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80030ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3b03      	subs	r3, #3
 80030d4:	6979      	ldr	r1, [r7, #20]
 80030d6:	440b      	add	r3, r1
 80030d8:	7c1b      	ldrb	r3, [r3, #16]
 80030da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80030dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	3a04      	subs	r2, #4
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	440a      	add	r2, r1
 80030e6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80030e8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	601a      	str	r2, [r3, #0]
    address--;
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	3b04      	subs	r3, #4
 80030f2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3b04      	subs	r3, #4
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d8da      	bhi.n	80030b6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003108:	3328      	adds	r3, #40	; 0x28
 800310a:	623b      	str	r3, [r7, #32]
  index = 16;
 800310c:	2310      	movs	r3, #16
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003110:	e01d      	b.n	800314e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	3b01      	subs	r3, #1
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	3b02      	subs	r3, #2
 8003120:	69f9      	ldr	r1, [r7, #28]
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003126:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	3b03      	subs	r3, #3
 800312c:	69f9      	ldr	r1, [r7, #28]
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003132:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8003134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003136:	3a04      	subs	r2, #4
 8003138:	69f9      	ldr	r1, [r7, #28]
 800313a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800313c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	601a      	str	r2, [r3, #0]
    address--;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	3b04      	subs	r3, #4
 8003146:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	3b04      	subs	r3, #4
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	2b03      	cmp	r3, #3
 8003152:	d8de      	bhi.n	8003112 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800315c:	33cc      	adds	r3, #204	; 0xcc
 800315e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	3b04      	subs	r3, #4
 800318a:	623b      	str	r3, [r7, #32]
  index = 160;
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003190:	e021      	b.n	80031d6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	3b01      	subs	r3, #1
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	4413      	add	r3, r2
 800319a:	7c1b      	ldrb	r3, [r3, #16]
 800319c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3b02      	subs	r3, #2
 80031a2:	69f9      	ldr	r1, [r7, #28]
 80031a4:	440b      	add	r3, r1
 80031a6:	7c1b      	ldrb	r3, [r3, #16]
 80031a8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80031aa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	3b03      	subs	r3, #3
 80031b0:	69f9      	ldr	r1, [r7, #28]
 80031b2:	440b      	add	r3, r1
 80031b4:	7c1b      	ldrb	r3, [r3, #16]
 80031b6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80031b8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	3a04      	subs	r2, #4
 80031be:	69f9      	ldr	r1, [r7, #28]
 80031c0:	440a      	add	r2, r1
 80031c2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80031c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	601a      	str	r2, [r3, #0]
    address--;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	3b04      	subs	r3, #4
 80031ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3b04      	subs	r3, #4
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d8da      	bhi.n	8003192 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80031e4:	33cc      	adds	r3, #204	; 0xcc
 80031e6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	061a      	lsls	r2, r3, #24
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003212:	33dc      	adds	r3, #220	; 0xdc
 8003214:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <JPEG_Set_Huff_DHTMem+0x21c>)
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	7bdb      	ldrb	r3, [r3, #15]
 8003224:	021a      	lsls	r2, r3, #8
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	7b92      	ldrb	r2, [r2, #14]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	3b04      	subs	r3, #4
 800323c:	623b      	str	r3, [r7, #32]
  index = 12;
 800323e:	230c      	movs	r3, #12
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003242:	e027      	b.n	8003294 <JPEG_Set_Huff_DHTMem+0x25c>
 8003244:	0800a234 	.word	0x0800a234
 8003248:	0800a2e8 	.word	0x0800a2e8
 800324c:	0800a1fc 	.word	0x0800a1fc
 8003250:	0800a218 	.word	0x0800a218
 8003254:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	3301      	adds	r3, #1
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003262:	6939      	ldr	r1, [r7, #16]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	440b      	add	r3, r1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800326c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	3b01      	subs	r3, #1
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003278:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	3a02      	subs	r2, #2
 800327e:	6939      	ldr	r1, [r7, #16]
 8003280:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003282:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	601a      	str	r2, [r3, #0]
    address--;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	3b04      	subs	r3, #4
 800328c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3b04      	subs	r3, #4
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2b03      	cmp	r3, #3
 8003298:	d8de      	bhi.n	8003258 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80032a2:	33dc      	adds	r3, #220	; 0xdc
 80032a4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	7c5b      	ldrb	r3, [r3, #17]
 80032b2:	061a      	lsls	r2, r3, #24
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	7c1b      	ldrb	r3, [r3, #16]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80032d0:	33e8      	adds	r3, #232	; 0xe8
 80032d2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <JPEG_Set_Huff_DHTMem+0x458>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	7edb      	ldrb	r3, [r3, #27]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	7e92      	ldrb	r2, [r2, #26]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  *address = value;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	3b04      	subs	r3, #4
 80032fa:	623b      	str	r3, [r7, #32]
  index = 8;
 80032fc:	2308      	movs	r3, #8
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003300:	e021      	b.n	8003346 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	3301      	adds	r3, #1
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	7c1b      	ldrb	r3, [r3, #16]
 800330c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800330e:	6939      	ldr	r1, [r7, #16]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	440b      	add	r3, r1
 8003314:	3310      	adds	r3, #16
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800331a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	3b01      	subs	r3, #1
 8003320:	6939      	ldr	r1, [r7, #16]
 8003322:	440b      	add	r3, r1
 8003324:	7c1b      	ldrb	r3, [r3, #16]
 8003326:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003328:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	3a02      	subs	r2, #2
 800332e:	6939      	ldr	r1, [r7, #16]
 8003330:	440a      	add	r2, r1
 8003332:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003334:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	601a      	str	r2, [r3, #0]
    address--;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	3b04      	subs	r3, #4
 800333e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	3b04      	subs	r3, #4
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2b03      	cmp	r3, #3
 800334a:	d8da      	bhi.n	8003302 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003354:	33e8      	adds	r3, #232	; 0xe8
 8003356:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	061a      	lsls	r2, r3, #24
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	431a      	orrs	r2, r3
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003382:	33f8      	adds	r3, #248	; 0xf8
 8003384:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <JPEG_Set_Huff_DHTMem+0x458>)
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	7bdb      	ldrb	r3, [r3, #15]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	7b92      	ldrb	r2, [r2, #14]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	3b04      	subs	r3, #4
 80033ac:	623b      	str	r3, [r7, #32]
  index = 12;
 80033ae:	230c      	movs	r3, #12
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80033b2:	e01d      	b.n	80033f0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	440b      	add	r3, r1
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80033c8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3b01      	subs	r3, #1
 80033ce:	69b9      	ldr	r1, [r7, #24]
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80033d4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	3a02      	subs	r2, #2
 80033da:	69b9      	ldr	r1, [r7, #24]
 80033dc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80033de:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	601a      	str	r2, [r3, #0]
    address--;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	3b04      	subs	r3, #4
 80033e8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	3b04      	subs	r3, #4
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d8de      	bhi.n	80033b4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80033fe:	33f8      	adds	r3, #248	; 0xf8
 8003400:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	7c5b      	ldrb	r3, [r3, #17]
 800340e:	061a      	lsls	r2, r3, #24
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	431a      	orrs	r2, r3
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	7c1b      	ldrb	r3, [r3, #16]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800342c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8003430:	623b      	str	r3, [r7, #32]
  index = 160;
 8003432:	23a0      	movs	r3, #160	; 0xa0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003436:	e021      	b.n	800347c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	3301      	adds	r3, #1
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	7c1b      	ldrb	r3, [r3, #16]
 8003442:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	440b      	add	r3, r1
 800344a:	3310      	adds	r3, #16
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003450:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	3b01      	subs	r3, #1
 8003456:	69b9      	ldr	r1, [r7, #24]
 8003458:	440b      	add	r3, r1
 800345a:	7c1b      	ldrb	r3, [r3, #16]
 800345c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800345e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	3a02      	subs	r2, #2
 8003464:	69b9      	ldr	r1, [r7, #24]
 8003466:	440a      	add	r2, r1
 8003468:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800346a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	601a      	str	r2, [r3, #0]
    address--;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	3b04      	subs	r3, #4
 8003474:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	3b04      	subs	r3, #4
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	2b03      	cmp	r3, #3
 8003480:	d8da      	bhi.n	8003438 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8003482:	bf00      	nop
 8003484:	372c      	adds	r7, #44	; 0x2c
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	ffff0000 	.word	0xffff0000

08003494 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d108      	bne.n	80034c6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	e007      	b.n	80034d6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003514:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003524:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d108      	bne.n	8003554 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8003552:	e00d      	b.n	8003570 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d107      	bne.n	8003570 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag rised*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d125      	bne.n	80035dc <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01e      	beq.n	80035dc <JPEG_Process+0x60>
    {
      /*Call Header parsing complet callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff f887 	bl	80026b8 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff f9f3 	bl	80029a2 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80035f6:	2108      	movs	r1, #8
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f988 	bl	800390e <JPEG_ReadInputData>
 80035fe:	e00a      	b.n	8003616 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag rised*/
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800360e:	2101      	movs	r1, #1
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f97c 	bl	800390e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003630:	2108      	movs	r1, #8
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f864 	bl	8003700 <JPEG_StoreOutputData>
 8003638:	e00a      	b.n	8003650 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag rised*/
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8003648:	2101      	movs	r1, #1
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f858 	bl	8003700 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800365a:	2b20      	cmp	r3, #32
 800365c:	d14b      	bne.n	80036f6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d107      	bne.n	800368a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003698:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69d9      	ldr	r1, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	461a      	mov	r2, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff f9a2 	bl	80029f6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d103      	bne.n	80036ec <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff f971 	bl	80029cc <HAL_JPEG_DecodeCpltCallback>
 80036ea:	e002      	b.n	80036f2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff f963 	bl	80029b8 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t index, nBwords, nbBytes, dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	429a      	cmp	r2, r3
 800371a:	d34b      	bcc.n	80037b4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e031      	b.n	8003786 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	4413      	add	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0a19      	lsrs	r1, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	3301      	adds	r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	b2ca      	uxtb	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	0c19      	lsrs	r1, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	3302      	adds	r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	b2ca      	uxtb	r2, r1
 8003760:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	0e19      	lsrs	r1, r3, #24
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	3303      	adds	r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	b2ca      	uxtb	r2, r1
 8003774:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1d1a      	adds	r2, r3, #4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3c9      	bcc.n	8003722 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	429a      	cmp	r2, r3
 8003798:	f040 80b5 	bne.w	8003906 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	461a      	mov	r2, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff f925 	bl	80029f6 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80037b2:	e0a8      	b.n	8003906 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	429a      	cmp	r2, r3
 80037be:	f240 80a2 	bls.w	8003906 <JPEG_StoreOutputData+0x206>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nBwords; index++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e031      	b.n	800383a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	4413      	add	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	0a19      	lsrs	r1, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	b2ca      	uxtb	r2, r1
 8003800:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c19      	lsrs	r1, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	3302      	adds	r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	b2ca      	uxtb	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0e19      	lsrs	r1, r3, #24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	3303      	adds	r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	b2ca      	uxtb	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3c9      	bcc.n	80037d6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	429a      	cmp	r2, r3
 800384c:	d10b      	bne.n	8003866 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69d9      	ldr	r1, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	461a      	mov	r2, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff f8cc 	bl	80029f6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003864:	e04f      	b.n	8003906 <JPEG_StoreOutputData+0x206>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nbBytes; index++)
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e015      	b.n	80038ac <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	fa22 f103 	lsr.w	r1, r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	4413      	add	r3, r2
 8003898:	b2ca      	uxtb	r2, r1
 800389a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	3301      	adds	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3e5      	bcc.n	8003880 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69d9      	ldr	r1, [r3, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	461a      	mov	r2, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff f899 	bl	80029f6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1c3 0304 	rsb	r3, r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
      for (index = nbBytes; index < 4UL; index++)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e013      	b.n	8003900 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	fa22 f103 	lsr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	4413      	add	r3, r2
 80038ec:	b2ca      	uxtb	r2, r1
 80038ee:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d9e8      	bls.n	80038d8 <JPEG_StoreOutputData+0x1d8>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b088      	sub	sp, #32
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <JPEG_ReadInputData+0x1c>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800392a:	2101      	movs	r1, #1
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe ffe0 	bl	80028f2 <HAL_JPEG_Pause>
 8003932:	e028      	b.n	8003986 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	d906      	bls.n	800394e <JPEG_ReadInputData+0x40>
  {
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e01b      	b.n	8003986 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	429a      	cmp	r2, r3
 8003958:	d115      	bne.n	8003986 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff f83d 	bl	80029e0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	2b04      	cmp	r3, #4
 800396c:	d905      	bls.n	800397a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
    nbBytes = hjpeg->InDataLength;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 809f 	bne.w	8003ad2 <JPEG_ReadInputData+0x1c4>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 809b 	beq.w	8003ad2 <JPEG_ReadInputData+0x1c4>
  {
    nBwords = nbBytes / 4UL;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	613b      	str	r3, [r7, #16]
    if (nBwords >= nbRequestWords)
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d335      	bcc.n	8003a16 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e02d      	b.n	8003a0c <JPEG_ReadInputData+0xfe>
      {
        inputCount = hjpeg->JpegInCount;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80039d0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6999      	ldr	r1, [r3, #24]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3302      	adds	r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3303      	adds	r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80039f8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d3cd      	bcc.n	80039b0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = Dataword;
      }
    }
  }
}
 8003a14:	e05d      	b.n	8003ad2 <JPEG_ReadInputData+0x1c4>
      if (nBwords > 0UL)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d035      	beq.n	8003a88 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nBwords; index++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e02d      	b.n	8003a7e <JPEG_ReadInputData+0x170>
          inputCount = hjpeg->JpegInCount;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8003a42:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8003a54:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3303      	adds	r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8003a6a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nBwords; index++)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3cd      	bcc.n	8003a22 <JPEG_ReadInputData+0x114>
}
 8003a86:	e024      	b.n	8003ad2 <JPEG_ReadInputData+0x1c4>
        Dataword = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nbBytes; index++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e017      	b.n	8003ac2 <JPEG_ReadInputData+0x1b4>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nbBytes; index++)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d3e3      	bcc.n	8003a92 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = Dataword;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b08b      	sub	sp, #44	; 0x2c
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3350      	adds	r3, #80	; 0x50
 8003aee:	61bb      	str	r3, [r7, #24]

  i = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003af4:	e042      	b.n	8003b7c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e033      	b.n	8003b6a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d103      	bne.n	8003b1e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	3364      	adds	r3, #100	; 0x64
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e022      	b.n	8003b64 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2264      	movs	r2, #100	; 0x64
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b2a:	6a38      	ldr	r0, [r7, #32]
 8003b2c:	69f9      	ldr	r1, [r7, #28]
 8003b2e:	4401      	add	r1, r0
 8003b30:	4818      	ldr	r0, [pc, #96]	; (8003b94 <JPEG_GetQuality+0xb8>)
 8003b32:	5c41      	ldrb	r1, [r0, r1]
 8003b34:	440a      	add	r2, r1
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b64      	cmp	r3, #100	; 0x64
 8003b42:	d807      	bhi.n	8003b54 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4413      	add	r3, r2
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	e007      	b.n	8003b64 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4413      	add	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d9c8      	bls.n	8003b02 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	3304      	adds	r3, #4
 8003b74:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	2b3c      	cmp	r3, #60	; 0x3c
 8003b80:	d9b9      	bls.n	8003af6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	099b      	lsrs	r3, r3, #6
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	372c      	adds	r7, #44	; 0x2c
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	0800a39c 	.word	0x0800a39c

08003b98 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_PWREx_ConfigSupply+0x6c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d008      	beq.n	8003bbe <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_PWREx_ConfigSupply+0x6c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01d      	b.n	8003bfa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_PWREx_ConfigSupply+0x6c>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	490f      	ldr	r1, [pc, #60]	; (8003c04 <HAL_PWREx_ConfigSupply+0x6c>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bce:	f7fd ff0d 	bl	80019ec <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003bd4:	e009      	b.n	8003bea <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003bd6:	f7fd ff09 	bl	80019ec <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be4:	d901      	bls.n	8003bea <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e007      	b.n	8003bfa <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_PWREx_ConfigSupply+0x6c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	d1ee      	bne.n	8003bd6 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	58024800 	.word	0x58024800

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e3a4      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c28:	4b9a      	ldr	r3, [pc, #616]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c32:	4b98      	ldr	r3, [pc, #608]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d007      	beq.n	8003c4e <HAL_RCC_OscConfig+0x46>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b18      	cmp	r3, #24
 8003c42:	d110      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5e>
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d06c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x12c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d168      	bne.n	8003d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e37e      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x76>
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a87      	ldr	r2, [pc, #540]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e02e      	b.n	8003cdc <HAL_RCC_OscConfig+0xd4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x98>
 8003c86:	4b83      	ldr	r3, [pc, #524]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a82      	ldr	r2, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7f      	ldr	r2, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xd4>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xbc>
 8003caa:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a79      	ldr	r2, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a76      	ldr	r2, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xd4>
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a72      	ldr	r2, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6f      	ldr	r2, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fe82 	bl	80019ec <HAL_GetTick>
 8003ce8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd fe7e 	bl	80019ec <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e332      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cfe:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xe4>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fe6e 	bl	80019ec <HAL_GetTick>
 8003d10:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd fe6a 	bl	80019ec <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e31e      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d26:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x10c>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80b0 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_RCC_OscConfig+0x162>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b18      	cmp	r3, #24
 8003d5e:	d149      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1ec>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d144      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x17a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e2f0      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0219 	bic.w	r2, r3, #25
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4941      	ldr	r1, [pc, #260]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fe2a 	bl	80019ec <HAL_GetTick>
 8003d98:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fe26 	bl	80019ec <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e2da      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dba:	f7fd fe45 	bl	8001a48 <HAL_GetREVID>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d80a      	bhi.n	8003dde <HAL_RCC_OscConfig+0x1d6>
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	492f      	ldr	r1, [pc, #188]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ddc:	e062      	b.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	4929      	ldr	r1, [pc, #164]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df2:	e057      	b.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d038      	beq.n	8003e6e <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 0219 	bic.w	r2, r3, #25
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4922      	ldr	r1, [pc, #136]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fded 	bl	80019ec <HAL_GetTick>
 8003e12:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd fde9 	bl	80019ec <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e29d      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	f7fd fe08 	bl	8001a48 <HAL_GetREVID>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d80a      	bhi.n	8003e58 <HAL_RCC_OscConfig+0x250>
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	031b      	lsls	r3, r3, #12
 8003e50:	4910      	ldr	r1, [pc, #64]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
 8003e56:	e025      	b.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e01a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x28c>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fdb7 	bl	80019ec <HAL_GetTick>
 8003e7e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fd fdb3 	bl	80019ec <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d903      	bls.n	8003e98 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e267      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
 8003e94:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e98:	4ba0      	ldr	r3, [pc, #640]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 808f 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b9a      	ldr	r3, [pc, #616]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eba:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ebc:	4b97      	ldr	r3, [pc, #604]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2d0>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b18      	cmp	r3, #24
 8003ecc:	d12d      	bne.n	8003f2a <HAL_RCC_OscConfig+0x322>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d128      	bne.n	8003f2a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed8:	4b90      	ldr	r3, [pc, #576]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2e8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e239      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef0:	f7fd fdaa 	bl	8001a48 <HAL_GetREVID>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d80a      	bhi.n	8003f14 <HAL_RCC_OscConfig+0x30c>
 8003efe:	4b87      	ldr	r3, [pc, #540]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	4983      	ldr	r1, [pc, #524]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f12:	e05d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f14:	4b81      	ldr	r3, [pc, #516]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	497e      	ldr	r1, [pc, #504]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f28:	e052      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f32:	4b7a      	ldr	r3, [pc, #488]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a79      	ldr	r2, [pc, #484]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fd55 	bl	80019ec <HAL_GetTick>
 8003f42:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f46:	f7fd fd51 	bl	80019ec <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e205      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f58:	4b70      	ldr	r3, [pc, #448]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f64:	f7fd fd70 	bl	8001a48 <HAL_GetREVID>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d80a      	bhi.n	8003f88 <HAL_RCC_OscConfig+0x380>
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	4966      	ldr	r1, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
 8003f86:	e023      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
 8003f88:	4b64      	ldr	r3, [pc, #400]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	4961      	ldr	r1, [pc, #388]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
 8003f9c:	e018      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f9e:	4b5f      	ldr	r3, [pc, #380]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5e      	ldr	r2, [pc, #376]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fd1f 	bl	80019ec <HAL_GetTick>
 8003fae:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fd1b 	bl	80019ec <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1cf      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fc4:	4b55      	ldr	r3, [pc, #340]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d036      	beq.n	800404a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe4:	4b4d      	ldr	r3, [pc, #308]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	4a4c      	ldr	r2, [pc, #304]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fd fcfc 	bl	80019ec <HAL_GetTick>
 8003ff4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fcf8 	bl	80019ec <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1ac      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCC_OscConfig+0x514>)
 800400c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3f0>
 8004016:	e018      	b.n	800404a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004018:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_RCC_OscConfig+0x514>)
 800401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401c:	4a3f      	ldr	r2, [pc, #252]	; (800411c <HAL_RCC_OscConfig+0x514>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd fce2 	bl	80019ec <HAL_GetTick>
 8004028:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402c:	f7fd fcde 	bl	80019ec <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e192      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d036      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d019      	beq.n	8004092 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2e      	ldr	r2, [pc, #184]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800406a:	f7fd fcbf 	bl	80019ec <HAL_GetTick>
 800406e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004072:	f7fd fcbb 	bl	80019ec <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e16f      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x46a>
 8004090:	e018      	b.n	80040c4 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800409e:	f7fd fca5 	bl	80019ec <HAL_GetTick>
 80040a2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040a6:	f7fd fca1 	bl	80019ec <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e155      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_RCC_OscConfig+0x514>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8086 	beq.w	80041de <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_OscConfig+0x518>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_RCC_OscConfig+0x518>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040de:	f7fd fc85 	bl	80019ec <HAL_GetTick>
 80040e2:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fd fc81 	bl	80019ec <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e135      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x518>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10b      	bne.n	8004124 <HAL_RCC_OscConfig+0x51c>
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_OscConfig+0x514>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a02      	ldr	r2, [pc, #8]	; (800411c <HAL_RCC_OscConfig+0x514>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	e032      	b.n	8004180 <HAL_RCC_OscConfig+0x578>
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
 8004120:	58024800 	.word	0x58024800
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10c      	bne.n	8004146 <HAL_RCC_OscConfig+0x53e>
 800412c:	4b8f      	ldr	r3, [pc, #572]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a8e      	ldr	r2, [pc, #568]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	4b8c      	ldr	r3, [pc, #560]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a8b      	ldr	r2, [pc, #556]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	e01c      	b.n	8004180 <HAL_RCC_OscConfig+0x578>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x560>
 800414e:	4b87      	ldr	r3, [pc, #540]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a86      	ldr	r2, [pc, #536]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	4b84      	ldr	r3, [pc, #528]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a83      	ldr	r2, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x578>
 8004168:	4b80      	ldr	r3, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a7f      	ldr	r2, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	4b7d      	ldr	r3, [pc, #500]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a7c      	ldr	r2, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800417a:	f023 0304 	bic.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd fc30 	bl	80019ec <HAL_GetTick>
 800418c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd fc2c 	bl	80019ec <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0de      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041a6:	4b71      	ldr	r3, [pc, #452]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCC_OscConfig+0x588>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fc1a 	bl	80019ec <HAL_GetTick>
 80041b8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd fc16 	bl	80019ec <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c8      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041d2:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80bd 	beq.w	8004362 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041e8:	4b60      	ldr	r3, [pc, #384]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f0:	2b18      	cmp	r3, #24
 80041f2:	f000 80b4 	beq.w	800435e <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	f040 8095 	bne.w	800432a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a59      	ldr	r2, [pc, #356]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fbee 	bl	80019ec <HAL_GetTick>
 8004210:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fd fbea 	bl	80019ec <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e09e      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004226:	4b51      	ldr	r3, [pc, #324]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004232:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <HAL_RCC_OscConfig+0x768>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	430a      	orrs	r2, r1
 8004246:	4949      	ldr	r1, [pc, #292]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004248:	4313      	orrs	r3, r2
 800424a:	628b      	str	r3, [r1, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	3b01      	subs	r3, #1
 8004252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	3b01      	subs	r3, #1
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	b29b      	uxth	r3, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	3b01      	subs	r3, #1
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800427c:	493b      	ldr	r1, [pc, #236]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800427e:	4313      	orrs	r3, r2
 8004280:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004282:	4b3a      	ldr	r3, [pc, #232]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a39      	ldr	r2, [pc, #228]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004292:	4b38      	ldr	r3, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x76c>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800429a:	00d2      	lsls	r2, r2, #3
 800429c:	4933      	ldr	r1, [pc, #204]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042a2:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f023 020c 	bic.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	492f      	ldr	r1, [pc, #188]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f023 0202 	bic.w	r2, r3, #2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	492a      	ldr	r1, [pc, #168]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4a28      	ldr	r2, [pc, #160]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	4a22      	ldr	r2, [pc, #136]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4a1f      	ldr	r2, [pc, #124]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_RCC_OscConfig+0x764>)
 80042fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd fb73 	bl	80019ec <HAL_GetTick>
 8004306:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fd fb6f 	bl	80019ec <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e023      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x702>
 8004328:	e01b      	b.n	8004362 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_OscConfig+0x764>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a0f      	ldr	r2, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fb59 	bl	80019ec <HAL_GetTick>
 800433a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fd fb55 	bl	80019ec <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e009      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_RCC_OscConfig+0x764>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0x736>
 800435c:	e001      	b.n	8004362 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	58024400 	.word	0x58024400
 8004370:	fffffc0c 	.word	0xfffffc0c
 8004374:	ffff0007 	.word	0xffff0007

08004378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e18d      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d910      	bls.n	80043bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 020f 	bic.w	r2, r3, #15
 80043a2:	4985      	ldr	r1, [pc, #532]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e175      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043d8:	4b78      	ldr	r3, [pc, #480]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	4975      	ldr	r1, [pc, #468]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004402:	429a      	cmp	r2, r3
 8004404:	d908      	bls.n	8004418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	496a      	ldr	r1, [pc, #424]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b64      	ldr	r3, [pc, #400]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004430:	429a      	cmp	r2, r3
 8004432:	d908      	bls.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	495e      	ldr	r1, [pc, #376]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004442:	4313      	orrs	r3, r2
 8004444:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d010      	beq.n	8004474 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445e:	429a      	cmp	r2, r3
 8004460:	d908      	bls.n	8004474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004462:	4b56      	ldr	r3, [pc, #344]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	4953      	ldr	r1, [pc, #332]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004470:	4313      	orrs	r3, r2
 8004472:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	429a      	cmp	r2, r3
 800448e:	d908      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b4a      	ldr	r3, [pc, #296]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f023 020f 	bic.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4947      	ldr	r1, [pc, #284]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d055      	beq.n	800455a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4940      	ldr	r1, [pc, #256]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c8:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d121      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0e7      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d115      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044f8:	4b30      	ldr	r3, [pc, #192]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0cf      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0c7      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f023 0207 	bic.w	r2, r3, #7
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4925      	ldr	r1, [pc, #148]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd fa5f 	bl	80019ec <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004530:	e00a      	b.n	8004548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004532:	f7fd fa5b 	bl	80019ec <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0af      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	429a      	cmp	r2, r3
 8004558:	d1eb      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	429a      	cmp	r2, r3
 8004574:	d208      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f023 020f 	bic.w	r2, r3, #15
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	490e      	ldr	r1, [pc, #56]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004584:	4313      	orrs	r3, r2
 8004586:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d214      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 020f 	bic.w	r2, r3, #15
 800459e:	4906      	ldr	r1, [pc, #24]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e077      	b.n	80046a8 <HAL_RCC_ClockConfig+0x330>
 80045b8:	52002000 	.word	0x52002000
 80045bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045d8:	429a      	cmp	r2, r3
 80045da:	d208      	bcs.n	80045ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045dc:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	4931      	ldr	r1, [pc, #196]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004606:	429a      	cmp	r2, r3
 8004608:	d208      	bcs.n	800461c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800460a:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4926      	ldr	r1, [pc, #152]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004618:	4313      	orrs	r3, r2
 800461a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004634:	429a      	cmp	r2, r3
 8004636:	d208      	bcs.n	800464a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	491a      	ldr	r1, [pc, #104]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004646:	4313      	orrs	r3, r2
 8004648:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004662:	429a      	cmp	r2, r3
 8004664:	d208      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	490f      	ldr	r1, [pc, #60]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004674:	4313      	orrs	r3, r2
 8004676:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004678:	f000 f822 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800467c:	4601      	mov	r1, r0
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_RCC_ClockConfig+0x338>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x33c>)
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa21 f303 	lsr.w	r3, r1, r3
 8004694:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <HAL_RCC_ClockConfig+0x340>)
 8004696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCC_ClockConfig+0x344>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd f95b 	bl	8001958 <HAL_InitTick>
 80046a2:	4603      	mov	r3, r0
 80046a4:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80046a6:	7afb      	ldrb	r3, [r7, #11]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	58024400 	.word	0x58024400
 80046b4:	0800a1ec 	.word	0x0800a1ec
 80046b8:	24000080 	.word	0x24000080
 80046bc:	24000088 	.word	0x24000088

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c6:	4baf      	ldr	r3, [pc, #700]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ce:	2b18      	cmp	r3, #24
 80046d0:	f200 814e 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x2b0>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004741 	.word	0x08004741
 80046e0:	08004971 	.word	0x08004971
 80046e4:	08004971 	.word	0x08004971
 80046e8:	08004971 	.word	0x08004971
 80046ec:	08004971 	.word	0x08004971
 80046f0:	08004971 	.word	0x08004971
 80046f4:	08004971 	.word	0x08004971
 80046f8:	08004971 	.word	0x08004971
 80046fc:	08004767 	.word	0x08004767
 8004700:	08004971 	.word	0x08004971
 8004704:	08004971 	.word	0x08004971
 8004708:	08004971 	.word	0x08004971
 800470c:	08004971 	.word	0x08004971
 8004710:	08004971 	.word	0x08004971
 8004714:	08004971 	.word	0x08004971
 8004718:	08004971 	.word	0x08004971
 800471c:	0800476d 	.word	0x0800476d
 8004720:	08004971 	.word	0x08004971
 8004724:	08004971 	.word	0x08004971
 8004728:	08004971 	.word	0x08004971
 800472c:	08004971 	.word	0x08004971
 8004730:	08004971 	.word	0x08004971
 8004734:	08004971 	.word	0x08004971
 8004738:	08004971 	.word	0x08004971
 800473c:	08004773 	.word	0x08004773
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004740:	4b90      	ldr	r3, [pc, #576]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800474c:	4b8d      	ldr	r3, [pc, #564]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	08db      	lsrs	r3, r3, #3
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	4a8c      	ldr	r2, [pc, #560]	; (8004988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800475e:	e10a      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004760:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004762:	61bb      	str	r3, [r7, #24]
    break;
 8004764:	e107      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004766:	4b89      	ldr	r3, [pc, #548]	; (800498c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004768:	61bb      	str	r3, [r7, #24]
    break;
 800476a:	e104      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800476c:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800476e:	61bb      	str	r3, [r7, #24]
    break;
 8004770:	e101      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004772:	4b84      	ldr	r3, [pc, #528]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800477c:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004786:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004788:	4b7e      	ldr	r3, [pc, #504]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004792:	4b7c      	ldr	r3, [pc, #496]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	08db      	lsrs	r3, r3, #3
 8004798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80da 	beq.w	800496a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d05a      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x1b2>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d302      	bcc.n	80047c6 <HAL_RCC_GetSysClockFreq+0x106>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d078      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80047c4:	e099      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c6:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02d      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fc:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004810:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800482c:	e087      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004838:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004998 <HAL_RCC_GetSysClockFreq+0x2d8>
 800483c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004850:	ed97 6a02 	vldr	s12, [r7, #8]
 8004854:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004870:	e065      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800499c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004894:	ed97 6a02 	vldr	s12, [r7, #8]
 8004898:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004994 <HAL_RCC_GetSysClockFreq+0x2d4>
 800489c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b4:	e043      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80049a0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80048c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c8:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80048dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004994 <HAL_RCC_GetSysClockFreq+0x2d4>
 80048e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f8:	e021      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004904:	eddf 6a25 	vldr	s13, [pc, #148]	; 800499c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004920:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004994 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	0a5b      	lsrs	r3, r3, #9
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	3301      	adds	r3, #1
 800494a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004956:	edd7 6a07 	vldr	s13, [r7, #28]
 800495a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004962:	ee17 3a90 	vmov	r3, s15
 8004966:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004968:	e005      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
    break;
 800496e:	e002      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004972:	61bb      	str	r3, [r7, #24]
    break;
 8004974:	bf00      	nop
  }

  return sysclockfreq;
 8004976:	69bb      	ldr	r3, [r7, #24]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3724      	adds	r7, #36	; 0x24
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	58024400 	.word	0x58024400
 8004988:	03d09000 	.word	0x03d09000
 800498c:	003d0900 	.word	0x003d0900
 8004990:	017d7840 	.word	0x017d7840
 8004994:	46000000 	.word	0x46000000
 8004998:	4c742400 	.word	0x4c742400
 800499c:	4a742400 	.word	0x4a742400
 80049a0:	4bbebc20 	.word	0x4bbebc20

080049a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a8:	f001 f9e2 	bl	8005d70 <HAL_RCCEx_GetD1SysClockFreq>
 80049ac:	4601      	mov	r1, r0
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	fa21 f303 	lsr.w	r3, r1, r3
 80049c2:	4a05      	ldr	r2, [pc, #20]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80049c4:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80049c8:	681b      	ldr	r3, [r3, #0]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0800a1ec 	.word	0x0800a1ec
 80049d8:	24000084 	.word	0x24000084

080049dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049e0:	f7ff ffe0 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049e4:	4601      	mov	r1, r0
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049f2:	5cd3      	ldrb	r3, [r2, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	58024400 	.word	0x58024400
 8004a04:	0800a1ec 	.word	0x0800a1ec

08004a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a0c:	f7ff ffca 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 8004a10:	4601      	mov	r1, r0
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a1e:	5cd3      	ldrb	r3, [r2, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	0800a1ec 	.word	0x0800a1ec

08004a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d03d      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a58:	d013      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d802      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004a64:	e01f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a70:	d01c      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a74:	4baf      	ldr	r3, [pc, #700]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4aae      	ldr	r2, [pc, #696]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a80:	e015      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f98d 	bl	8005da8 <RCCEx_PLL2_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fa36 	bl	8005f0c <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ab4:	4b9f      	ldr	r3, [pc, #636]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac0:	499c      	ldr	r1, [pc, #624]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d826      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004afd 	.word	0x08004afd
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b35 	.word	0x08004b35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4b8d      	ldr	r3, [pc, #564]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a8c      	ldr	r2, [pc, #560]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f949 	bl	8005da8 <RCCEx_PLL2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e00c      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f9f2 	bl	8005f0c <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
      break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b3c:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	f023 0207 	bic.w	r2, r3, #7
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	497a      	ldr	r1, [pc, #488]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d03e      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d01c      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d804      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d00d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b74:	e01e      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004b76:	2bc0      	cmp	r3, #192	; 0xc0
 8004b78:	d01f      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d01e      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b80:	e018      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b82:	4b6c      	ldr	r3, [pc, #432]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4a6b      	ldr	r2, [pc, #428]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b8e:	e017      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f906 	bl	8005da8 <RCCEx_PLL2_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3324      	adds	r3, #36	; 0x24
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f9af 	bl	8005f0c <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bb2:	e005      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb8:	e002      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4958      	ldr	r1, [pc, #352]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	650b      	str	r3, [r1, #80]	; 0x50
 8004bd8:	e001      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d044      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf4:	d01f      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfa:	d805      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c04:	d00e      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004c06:	e01f      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004c08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c0c:	d01f      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c12:	d01e      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c14:	e018      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a46      	ldr	r2, [pc, #280]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c22:	e017      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 f8bc 	bl	8005da8 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c34:	e00e      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f965 	bl	8005f0c <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c68:	4932      	ldr	r1, [pc, #200]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d044      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c8a:	d01f      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c90:	d805      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004c96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c9a:	d00e      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c9c:	e01f      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ca2:	d01f      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca8:	d01e      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004caa:	e018      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb8:	e017      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 f871 	bl	8005da8 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cca:	e00e      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 f91a 	bl	8005f0c <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cf0:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfe:	490d      	ldr	r1, [pc, #52]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	658b      	str	r3, [r1, #88]	; 0x58
 8004d04:	e001      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d035      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d00c      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d802      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01b      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004d26:	e017      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d00c      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004d2c:	2b30      	cmp	r3, #48	; 0x30
 8004d2e:	d018      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004d30:	e012      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d38:	4baf      	ldr	r3, [pc, #700]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4aae      	ldr	r2, [pc, #696]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d44:	e00e      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f82b 	bl	8005da8 <RCCEx_PLL2_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d6a:	4ba3      	ldr	r3, [pc, #652]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	49a0      	ldr	r1, [pc, #640]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d7c:	e001      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d042      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d96:	d01f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9c:	d805      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d00e      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004da8:	e01f      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dae:	d01f      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db4:	d01e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004db6:	e018      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db8:	4b8f      	ldr	r3, [pc, #572]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4a8e      	ldr	r2, [pc, #568]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dc4:	e017      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 ffeb 	bl	8005da8 <RCCEx_PLL2_Config>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dd6:	e00e      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 f894 	bl	8005f0c <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004de8:	e005      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004df0:	bf00      	nop
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004dfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	497b      	ldr	r1, [pc, #492]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	650b      	str	r3, [r1, #80]	; 0x50
 8004e0e:	e001      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d042      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e28:	d01b      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2e:	d805      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d022      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004e3a:	e01b      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e40:	d01d      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e46:	d01c      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004e48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4c:	d01b      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004e4e:	e011      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ffa6 	bl	8005da8 <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e60:	e012      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 f84f 	bl	8005f0c <RCCEx_PLL3_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e72:	e009      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
      break;
 8004e78:	e006      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e004      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e8e:	4b5a      	ldr	r3, [pc, #360]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	4957      	ldr	r1, [pc, #348]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	650b      	str	r3, [r1, #80]	; 0x50
 8004ea0:	e001      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d044      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d01b      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec2:	d805      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ece:	e01b      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d01d      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eda:	d01c      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004edc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ee0:	d01b      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ee2:	e011      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 ff5c 	bl	8005da8 <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ef4:	e012      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 f805 	bl	8005f0c <RCCEx_PLL3_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f06:	e009      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e006      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f22:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f30:	4931      	ldr	r1, [pc, #196]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	658b      	str	r3, [r1, #88]	; 0x58
 8004f36:	e001      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02d      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f50:	d005      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d009      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f5c:	e00f      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f6a:	e00c      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ff18 	bl	8005da8 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f7c:	e003      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
      break;
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f98:	4917      	ldr	r1, [pc, #92]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f9e:	e001      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d81b      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004ffd 	.word	0x08004ffd
 8004fc4:	08004fd1 	.word	0x08004fd1
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	08004ffd 	.word	0x08004ffd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fdc:	e00f      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fedf 	bl	8005da8 <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fee:	e006      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005004:	4bba      	ldr	r3, [pc, #744]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	f023 0203 	bic.w	r2, r3, #3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	49b7      	ldr	r1, [pc, #732]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005016:	e001      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8086 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502a:	4bb2      	ldr	r3, [pc, #712]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4ab1      	ldr	r2, [pc, #708]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005036:	f7fc fcd9 	bl	80019ec <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503c:	e009      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fc fcd5 	bl	80019ec <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	; 0x64
 800504a:	d902      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	75fb      	strb	r3, [r7, #23]
        break;
 8005050:	e005      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005052:	4ba8      	ldr	r3, [pc, #672]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0ef      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d166      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005064:	4ba2      	ldr	r3, [pc, #648]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800506e:	4053      	eors	r3, r2
 8005070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005078:	4b9d      	ldr	r3, [pc, #628]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005082:	4b9b      	ldr	r3, [pc, #620]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a9a      	ldr	r2, [pc, #616]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800508e:	4b98      	ldr	r3, [pc, #608]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	4a97      	ldr	r2, [pc, #604]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005098:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800509a:	4a95      	ldr	r2, [pc, #596]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d115      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc fc9e 	bl	80019ec <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fc fc9a 	bl	80019ec <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d902      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	75fb      	strb	r3, [r7, #23]
            break;
 80050ca:	e005      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050cc:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ed      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d126      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ec:	d10d      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80050ee:	4b80      	ldr	r3, [pc, #512]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050fc:	0919      	lsrs	r1, r3, #4
 80050fe:	4b7e      	ldr	r3, [pc, #504]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005100:	400b      	ands	r3, r1
 8005102:	497b      	ldr	r1, [pc, #492]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
 8005108:	e005      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800510a:	4b79      	ldr	r3, [pc, #484]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4a78      	ldr	r2, [pc, #480]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005110:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005124:	4972      	ldr	r1, [pc, #456]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	670b      	str	r3, [r1, #112]	; 0x70
 800512a:	e004      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	75bb      	strb	r3, [r7, #22]
 8005130:	e001      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005132:	7dfb      	ldrb	r3, [r7, #23]
 8005134:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d07d      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	2b28      	cmp	r3, #40	; 0x28
 8005148:	d866      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	0800521f 	.word	0x0800521f
 8005154:	08005219 	.word	0x08005219
 8005158:	08005219 	.word	0x08005219
 800515c:	08005219 	.word	0x08005219
 8005160:	08005219 	.word	0x08005219
 8005164:	08005219 	.word	0x08005219
 8005168:	08005219 	.word	0x08005219
 800516c:	08005219 	.word	0x08005219
 8005170:	080051f5 	.word	0x080051f5
 8005174:	08005219 	.word	0x08005219
 8005178:	08005219 	.word	0x08005219
 800517c:	08005219 	.word	0x08005219
 8005180:	08005219 	.word	0x08005219
 8005184:	08005219 	.word	0x08005219
 8005188:	08005219 	.word	0x08005219
 800518c:	08005219 	.word	0x08005219
 8005190:	08005207 	.word	0x08005207
 8005194:	08005219 	.word	0x08005219
 8005198:	08005219 	.word	0x08005219
 800519c:	08005219 	.word	0x08005219
 80051a0:	08005219 	.word	0x08005219
 80051a4:	08005219 	.word	0x08005219
 80051a8:	08005219 	.word	0x08005219
 80051ac:	08005219 	.word	0x08005219
 80051b0:	0800521f 	.word	0x0800521f
 80051b4:	08005219 	.word	0x08005219
 80051b8:	08005219 	.word	0x08005219
 80051bc:	08005219 	.word	0x08005219
 80051c0:	08005219 	.word	0x08005219
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005219 	.word	0x08005219
 80051d0:	0800521f 	.word	0x0800521f
 80051d4:	08005219 	.word	0x08005219
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005219 	.word	0x08005219
 80051e4:	08005219 	.word	0x08005219
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800521f 	.word	0x0800521f
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fdd4 	bl	8005da8 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005204:	e00c      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fe7d 	bl	8005f0c <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800521e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005226:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	492f      	ldr	r1, [pc, #188]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	654b      	str	r3, [r1, #84]	; 0x54
 8005238:	e001      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d037      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524e:	2b05      	cmp	r3, #5
 8005250:	d820      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800529b 	.word	0x0800529b
 800525c:	08005271 	.word	0x08005271
 8005260:	08005283 	.word	0x08005283
 8005264:	0800529b 	.word	0x0800529b
 8005268:	0800529b 	.word	0x0800529b
 800526c:	0800529b 	.word	0x0800529b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd96 	bl	8005da8 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005280:	e00c      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fe3f 	bl	8005f0c <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005292:	e003      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
      break;
 8005298:	e000      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800529a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	f023 0207 	bic.w	r2, r3, #7
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	4910      	ldr	r1, [pc, #64]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	654b      	str	r3, [r1, #84]	; 0x54
 80052b4:	e001      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d040      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d827      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005327 	.word	0x08005327
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005327 	.word	0x08005327
 80052e8:	08005327 	.word	0x08005327
 80052ec:	08005327 	.word	0x08005327
 80052f0:	58024400 	.word	0x58024400
 80052f4:	58024800 	.word	0x58024800
 80052f8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fd50 	bl	8005da8 <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800530c:	e00c      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3324      	adds	r3, #36	; 0x24
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fdf9 	bl	8005f0c <RCCEx_PLL3_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
      break;
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532e:	4bb3      	ldr	r3, [pc, #716]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f023 0207 	bic.w	r2, r3, #7
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	49af      	ldr	r1, [pc, #700]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	658b      	str	r3, [r1, #88]	; 0x58
 8005342:	e001      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d044      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800535e:	d01b      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d805      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800536a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005370:	e01b      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d01d      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800537c:	d01c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800537e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005382:	d01b      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005384:	e011      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fd0b 	bl	8005da8 <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005396:	e012      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fdb4 	bl	8005f0c <RCCEx_PLL3_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053a8:	e009      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	75fb      	strb	r3, [r7, #23]
      break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c4:	4b8d      	ldr	r3, [pc, #564]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d2:	498a      	ldr	r1, [pc, #552]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	654b      	str	r3, [r1, #84]	; 0x54
 80053d8:	e001      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d044      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	d01b      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d805      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d022      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005406:	e01b      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d01d      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800540e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005412:	d01c      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005418:	d01b      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800541a:	e011      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fcc0 	bl	8005da8 <RCCEx_PLL2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800542c:	e012      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3324      	adds	r3, #36	; 0x24
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fd69 	bl	8005f0c <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800543e:	e009      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
      break;
 8005444:	e006      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005446:	bf00      	nop
 8005448:	e004      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800544a:	bf00      	nop
 800544c:	e002      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005468:	4964      	ldr	r1, [pc, #400]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800546a:	4313      	orrs	r3, r2
 800546c:	658b      	str	r3, [r1, #88]	; 0x58
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b00      	cmp	r3, #0
 800547e:	d044      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800548a:	d01b      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800548c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005490:	d805      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d022      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800549c:	e01b      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d01d      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80054a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054a8:	d01c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80054aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054ae:	d01b      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054b0:	e011      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fc75 	bl	8005da8 <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054c2:	e012      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fd1e 	bl	8005f0c <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054d4:	e009      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	e006      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80054dc:	bf00      	nop
 80054de:	e004      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80054e0:	bf00      	nop
 80054e2:	e002      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80054e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054f0:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fe:	493f      	ldr	r1, [pc, #252]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	658b      	str	r3, [r1, #88]	; 0x58
 8005504:	e001      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005520:	d10b      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3324      	adds	r3, #36	; 0x24
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fcef 	bl	8005f0c <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75bb      	strb	r3, [r7, #22]
 8005538:	e009      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800553a:	4b30      	ldr	r3, [pc, #192]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005548:	492c      	ldr	r1, [pc, #176]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d10b      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3324      	adds	r3, #36	; 0x24
 800556a:	2102      	movs	r1, #2
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fccd 	bl	8005f0c <RCCEx_PLL3_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	75bb      	strb	r3, [r7, #22]
 800557c:	e009      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800557e:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558c:	491b      	ldr	r1, [pc, #108]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d032      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d00d      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80055aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ae:	d016      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d111      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fbf4 	bl	8005da8 <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055c4:	e00c      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3324      	adds	r3, #36	; 0x24
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fc9d 	bl	8005f0c <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055d6:	e003      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	75fb      	strb	r3, [r7, #23]
      break;
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80055de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055f4:	4901      	ldr	r1, [pc, #4]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	658b      	str	r3, [r1, #88]	; 0x58
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02f      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800561a:	d00c      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800561c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005620:	d015      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005626:	d10f      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005628:	4b79      	ldr	r3, [pc, #484]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a78      	ldr	r2, [pc, #480]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800562e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005634:	e00c      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3324      	adds	r3, #36	; 0x24
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fc65 	bl	8005f0c <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005646:	e003      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	e000      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800564e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005656:	4b6e      	ldr	r3, [pc, #440]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005664:	496a      	ldr	r1, [pc, #424]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	654b      	str	r3, [r1, #84]	; 0x54
 800566a:	e001      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d029      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d007      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800568a:	e00f      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568c:	4b60      	ldr	r3, [pc, #384]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a5f      	ldr	r2, [pc, #380]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005698:	e00b      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	2102      	movs	r1, #2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fb81 	bl	8005da8 <RCCEx_PLL2_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056aa:	e002      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      break;
 80056b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056b8:	4b55      	ldr	r3, [pc, #340]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	4952      	ldr	r1, [pc, #328]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056ca:	e001      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	2102      	movs	r1, #2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fc12 	bl	8005f0c <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02f      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005706:	d00c      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8005708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570c:	d802      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005712:	e00d      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	d00f      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800571a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571e:	d00e      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	4a3a      	ldr	r2, [pc, #232]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800572e:	e007      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
      break;
 8005734:	e004      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800573e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005752:	492f      	ldr	r1, [pc, #188]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	654b      	str	r3, [r1, #84]	; 0x54
 8005758:	e001      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800576a:	4b29      	ldr	r3, [pc, #164]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4926      	ldr	r1, [pc, #152]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005788:	4b21      	ldr	r3, [pc, #132]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005796:	491e      	ldr	r1, [pc, #120]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057a8:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b4:	4916      	ldr	r1, [pc, #88]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d0:	6113      	str	r3, [r2, #16]
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057dc:	490c      	ldr	r1, [pc, #48]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da08      	bge.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f6:	4906      	ldr	r1, [pc, #24]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80057fc:	7dbb      	ldrb	r3, [r7, #22]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	58024400 	.word	0x58024400

08005814 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005818:	f7ff f8c4 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 800581c:	4601      	mov	r1, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800582a:	5cd3      	ldrb	r3, [r2, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	0800a1ec 	.word	0x0800a1ec

08005840 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005848:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005852:	4b9b      	ldr	r3, [pc, #620]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	0b1b      	lsrs	r3, r3, #12
 8005858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585c:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800585e:	4b98      	ldr	r3, [pc, #608]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005868:	4b95      	ldr	r3, [pc, #596]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	08db      	lsrs	r3, r3, #3
 800586e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005880:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 810a 	beq.w	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d05a      	beq.n	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005892:	2b01      	cmp	r3, #1
 8005894:	d302      	bcc.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005896:	2b02      	cmp	r3, #2
 8005898:	d078      	beq.n	800598c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800589a:	e099      	b.n	80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800589c:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02d      	beq.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a8:	4b85      	ldr	r3, [pc, #532]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	4a84      	ldr	r2, [pc, #528]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005902:	e087      	b.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b6a      	ldr	r3, [pc, #424]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a03 	vldr	s12, [r7, #12]
 800592a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005946:	e065      	b.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595a:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596a:	ed97 6a03 	vldr	s12, [r7, #12]
 800596e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800598a:	e043      	b.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800599a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599e:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ce:	e021      	b.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	0a5b      	lsrs	r3, r3, #9
 8005a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 2a90 	vmov	r2, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	0c1b      	lsrs	r3, r3, #16
 8005a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a68:	ee17 2a90 	vmov	r2, s15
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a70:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a96:	ee17 2a90 	vmov	r2, s15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	3724      	adds	r7, #36	; 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	46000000 	.word	0x46000000
 8005acc:	4c742400 	.word	0x4c742400
 8005ad0:	4a742400 	.word	0x4a742400
 8005ad4:	4bbebc20 	.word	0x4bbebc20

08005ad8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae0:	4b9d      	ldr	r3, [pc, #628]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005aea:	4b9b      	ldr	r3, [pc, #620]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	0d1b      	lsrs	r3, r3, #20
 8005af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af4:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005af6:	4b98      	ldr	r3, [pc, #608]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b00:	4b95      	ldr	r3, [pc, #596]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 810a 	beq.w	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d05a      	beq.n	8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d302      	bcc.n	8005b34 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d078      	beq.n	8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005b32:	e099      	b.n	8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b34:	4b88      	ldr	r3, [pc, #544]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02d      	beq.n	8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b40:	4b85      	ldr	r3, [pc, #532]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	4a84      	ldr	r2, [pc, #528]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6a:	4b7b      	ldr	r3, [pc, #492]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b9a:	e087      	b.n	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bae:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bde:	e065      	b.n	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf2:	4b59      	ldr	r3, [pc, #356]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c22:	e043      	b.n	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c36:	4b48      	ldr	r3, [pc, #288]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c66:	e021      	b.n	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005caa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005cac:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd2:	ee17 2a90 	vmov	r2, s15
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005cda:	4b1f      	ldr	r3, [pc, #124]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d00:	ee17 2a90 	vmov	r2, s15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2e:	ee17 2a90 	vmov	r2, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d36:	e008      	b.n	8005d4a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	03d09000 	.word	0x03d09000
 8005d60:	46000000 	.word	0x46000000
 8005d64:	4c742400 	.word	0x4c742400
 8005d68:	4a742400 	.word	0x4a742400
 8005d6c:	4bbebc20 	.word	0x4bbebc20

08005d70 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d74:	f7fe fca4 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8005d78:	4601      	mov	r1, r0
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	4a06      	ldr	r2, [pc, #24]	; (8005da0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005d86:	5cd3      	ldrb	r3, [r2, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa21 f303 	lsr.w	r3, r1, r3
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005d92:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d94:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005d96:	681b      	ldr	r3, [r3, #0]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	0800a1ec 	.word	0x0800a1ec
 8005da4:	24000080 	.word	0x24000080

08005da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005db6:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d101      	bne.n	8005dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e099      	b.n	8005efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dc6:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4e      	ldr	r2, [pc, #312]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd2:	f7fb fe0b 	bl	80019ec <HAL_GetTick>
 8005dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dda:	f7fb fe07 	bl	80019ec <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e086      	b.n	8005efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dec:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f0      	bne.n	8005dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	493f      	ldr	r1, [pc, #252]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	025b      	lsls	r3, r3, #9
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e3c:	4931      	ldr	r1, [pc, #196]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e42:	4b30      	ldr	r3, [pc, #192]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	492d      	ldr	r1, [pc, #180]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f023 0220 	bic.w	r2, r3, #32
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	4928      	ldr	r1, [pc, #160]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e66:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	f023 0310 	bic.w	r3, r3, #16
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e76:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <RCCEx_PLL2_Config+0x160>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	69d2      	ldr	r2, [r2, #28]
 8005e7e:	00d2      	lsls	r2, r2, #3
 8005e80:	4920      	ldr	r1, [pc, #128]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e8c:	f043 0310 	orr.w	r3, r3, #16
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ea4:	e00f      	b.n	8005ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d106      	bne.n	8005eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eb8:	e005      	b.n	8005ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed2:	f7fb fd8b 	bl	80019ec <HAL_GetTick>
 8005ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ed8:	e008      	b.n	8005eec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005eda:	f7fb fd87 	bl	80019ec <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e006      	b.n	8005efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <RCCEx_PLL2_Config+0x15c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
 8005f08:	ffff0007 	.word	0xffff0007

08005f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f1a:	4b53      	ldr	r3, [pc, #332]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d101      	bne.n	8005f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e099      	b.n	800605e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f2a:	4b4f      	ldr	r3, [pc, #316]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4e      	ldr	r2, [pc, #312]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fb fd59 	bl	80019ec <HAL_GetTick>
 8005f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f3e:	f7fb fd55 	bl	80019ec <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e086      	b.n	800605e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f50:	4b45      	ldr	r3, [pc, #276]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f0      	bne.n	8005f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f5c:	4b42      	ldr	r3, [pc, #264]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	051b      	lsls	r3, r3, #20
 8005f6a:	493f      	ldr	r1, [pc, #252]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	025b      	lsls	r3, r3, #9
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fa0:	4931      	ldr	r1, [pc, #196]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fa6:	4b30      	ldr	r3, [pc, #192]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	492d      	ldr	r1, [pc, #180]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	4928      	ldr	r1, [pc, #160]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	4a26      	ldr	r2, [pc, #152]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	4b24      	ldr	r3, [pc, #144]	; (800606c <RCCEx_PLL3_Config+0x160>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	69d2      	ldr	r2, [r2, #28]
 8005fe2:	00d2      	lsls	r2, r2, #3
 8005fe4:	4920      	ldr	r1, [pc, #128]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fea:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006008:	e00f      	b.n	800602a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d106      	bne.n	800601e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006010:	4b15      	ldr	r3, [pc, #84]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a14      	ldr	r2, [pc, #80]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800601c:	e005      	b.n	800602a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a11      	ldr	r2, [pc, #68]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800602a:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a0e      	ldr	r2, [pc, #56]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006036:	f7fb fcd9 	bl	80019ec <HAL_GetTick>
 800603a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800603c:	e008      	b.n	8006050 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800603e:	f7fb fcd5 	bl	80019ec <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <RCCEx_PLL3_Config+0x15c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0f0      	beq.n	800603e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400
 800606c:	ffff0007 	.word	0xffff0007

08006070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e042      	b.n	8006108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fb fa47 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2224      	movs	r2, #36	; 0x24
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 facc 	bl	8006650 <UART_SetConfig>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e022      	b.n	8006108 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f002 fc3e 	bl	800894c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f002 fcc5 	bl	8008a90 <UART_CheckIdleState>
 8006106:	4603      	mov	r3, r0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e02b      	b.n	800617a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2224      	movs	r2, #36	; 0x24
 8006126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fa5c 	bl	8001610 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->gState = HAL_UART_STATE_RESET;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b08a      	sub	sp, #40	; 0x28
 8006186:	af02      	add	r7, sp, #8
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006198:	2b20      	cmp	r3, #32
 800619a:	f040 80bd 	bne.w	8006318 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_UART_Receive+0x28>
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0b5      	b.n	800631a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_UART_Receive+0x3a>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0ae      	b.n	800631a <HAL_UART_Receive+0x198>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2222      	movs	r2, #34	; 0x22
 80061d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80061d4:	f7fb fc0a 	bl	80019ec <HAL_GetTick>
 80061d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	d10e      	bne.n	8006212 <HAL_UART_Receive+0x90>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_UART_Receive+0x86>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006202:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006206:	e02d      	b.n	8006264 <HAL_UART_Receive+0xe2>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	22ff      	movs	r2, #255	; 0xff
 800620c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006210:	e028      	b.n	8006264 <HAL_UART_Receive+0xe2>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <HAL_UART_Receive+0xb4>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Receive+0xaa>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800622a:	e01b      	b.n	8006264 <HAL_UART_Receive+0xe2>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	227f      	movs	r2, #127	; 0x7f
 8006230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006234:	e016      	b.n	8006264 <HAL_UART_Receive+0xe2>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623e:	d10d      	bne.n	800625c <HAL_UART_Receive+0xda>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_UART_Receive+0xd0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	227f      	movs	r2, #127	; 0x7f
 800624c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006250:	e008      	b.n	8006264 <HAL_UART_Receive+0xe2>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	223f      	movs	r2, #63	; 0x3f
 8006256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800625a:	e003      	b.n	8006264 <HAL_UART_Receive+0xe2>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800626a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006274:	d108      	bne.n	8006288 <HAL_UART_Receive+0x106>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d104      	bne.n	8006288 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e003      	b.n	8006290 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006290:	e032      	b.n	80062f8 <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	2120      	movs	r1, #32
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f002 fc3f 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e036      	b.n	800631a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10c      	bne.n	80062cc <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	8a7b      	ldrh	r3, [r7, #18]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3302      	adds	r3, #2
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e00c      	b.n	80062e6 <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	8a7b      	ldrh	r3, [r7, #18]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4013      	ands	r3, r2
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	3301      	adds	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1c6      	bne.n	8006292 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	f640 030f 	movw	r3, #2063	; 0x80f
 800634a:	4013      	ands	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d118      	bne.n	8006386 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8145 	beq.w	8006606 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
      }
      return;
 8006384:	e13f      	b.n	8006606 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80e8 	beq.w	800655e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4ba1      	ldr	r3, [pc, #644]	; (8006618 <HAL_UART_IRQHandler+0x2f4>)
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4ba0      	ldr	r3, [pc, #640]	; (800661c <HAL_UART_IRQHandler+0x2f8>)
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80dd 	beq.w	800655e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <HAL_UART_IRQHandler+0xac>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <HAL_UART_IRQHandler+0xd8>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2202      	movs	r2, #2
 80063ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d010      	beq.n	8006428 <HAL_UART_IRQHandler+0x104>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2204      	movs	r2, #4
 8006416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f043 0202 	orr.w	r2, r3, #2
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d015      	beq.n	800645e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4b76      	ldr	r3, [pc, #472]	; (8006618 <HAL_UART_IRQHandler+0x2f4>)
 8006440:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2208      	movs	r2, #8
 800644c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	f043 0208 	orr.w	r2, r3, #8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006464:	2b00      	cmp	r3, #0
 8006466:	d011      	beq.n	800648c <HAL_UART_IRQHandler+0x168>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800647a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f043 0220 	orr.w	r2, r3, #32
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80b9 	beq.w	800660a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d004      	beq.n	80064e6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d031      	beq.n	800654a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 fb9a 	bl	8008c20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d123      	bne.n	8006542 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006508:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006516:	4a42      	ldr	r2, [pc, #264]	; (8006620 <HAL_UART_IRQHandler+0x2fc>)
 8006518:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800651e:	4618      	mov	r0, r3
 8006520:	f7fb fbde 	bl	8001ce0 <HAL_DMA_Abort_IT>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e00f      	b.n	800655a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f87c 	bl	8006638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	e00b      	b.n	800655a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f878 	bl	8006638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e007      	b.n	800655a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f874 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006558:	e057      	b.n	800660a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655a:	bf00      	nop
    return;
 800655c:	e055      	b.n	800660a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <HAL_UART_IRQHandler+0x260>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800657a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 fba3 	bl	8008cc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006582:	e045      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d012      	beq.n	80065b4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d031      	beq.n	800660e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
    }
    return;
 80065b2:	e02c      	b.n	800660e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_UART_IRQHandler+0x2ac>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f002 fb63 	bl	8008c94 <UART_EndTransmit_IT>
    return;
 80065ce:	e01f      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_UART_IRQHandler+0x2c8>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f002 fb83 	bl	8008cf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ea:	e011      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_UART_IRQHandler+0x2ec>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da09      	bge.n	8006610 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 fb6d 	bl	8008cdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006602:	bf00      	nop
 8006604:	e004      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006606:	bf00      	nop
 8006608:	e002      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
    return;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <HAL_UART_IRQHandler+0x2ec>
    return;
 800660e:	bf00      	nop
  }
}
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	10000001 	.word	0x10000001
 800661c:	04000120 	.word	0x04000120
 8006620:	08008c69 	.word	0x08008c69

08006624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	0000      	movs	r0, r0
	...

08006650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006650:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006654:	b090      	sub	sp, #64	; 0x40
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006664:	2300      	movs	r3, #0
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	4313      	orrs	r3, r2
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006686:	4313      	orrs	r3, r2
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4bc1      	ldr	r3, [pc, #772]	; (8006998 <UART_SetConfig+0x348>)
 8006692:	4013      	ands	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800669a:	430b      	orrs	r3, r1
 800669c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4ab7      	ldr	r2, [pc, #732]	; (800699c <UART_SetConfig+0x34c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ca:	4313      	orrs	r3, r2
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	4bb2      	ldr	r3, [pc, #712]	; (80069a0 <UART_SetConfig+0x350>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066de:	430b      	orrs	r3, r1
 80066e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f023 010f 	bic.w	r1, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4aa9      	ldr	r2, [pc, #676]	; (80069a4 <UART_SetConfig+0x354>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d177      	bne.n	80067f2 <UART_SetConfig+0x1a2>
 8006702:	4ba9      	ldr	r3, [pc, #676]	; (80069a8 <UART_SetConfig+0x358>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670a:	2b28      	cmp	r3, #40	; 0x28
 800670c:	d86c      	bhi.n	80067e8 <UART_SetConfig+0x198>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0xc4>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067e9 	.word	0x080067e9
 800671c:	080067e9 	.word	0x080067e9
 8006720:	080067e9 	.word	0x080067e9
 8006724:	080067e9 	.word	0x080067e9
 8006728:	080067e9 	.word	0x080067e9
 800672c:	080067e9 	.word	0x080067e9
 8006730:	080067e9 	.word	0x080067e9
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067e9 	.word	0x080067e9
 800673c:	080067e9 	.word	0x080067e9
 8006740:	080067e9 	.word	0x080067e9
 8006744:	080067e9 	.word	0x080067e9
 8006748:	080067e9 	.word	0x080067e9
 800674c:	080067e9 	.word	0x080067e9
 8006750:	080067e9 	.word	0x080067e9
 8006754:	080067c9 	.word	0x080067c9
 8006758:	080067e9 	.word	0x080067e9
 800675c:	080067e9 	.word	0x080067e9
 8006760:	080067e9 	.word	0x080067e9
 8006764:	080067e9 	.word	0x080067e9
 8006768:	080067e9 	.word	0x080067e9
 800676c:	080067e9 	.word	0x080067e9
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067d1 	.word	0x080067d1
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080067e9 	.word	0x080067e9
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067e9 	.word	0x080067e9
 800678c:	080067e9 	.word	0x080067e9
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067d9 	.word	0x080067d9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067be:	e233      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067c6:	e22f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ce:	e22b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067d6:	e227      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067de:	e223      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067e6:	e21f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ee:	bf00      	nop
 80067f0:	e21a      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6d      	ldr	r2, [pc, #436]	; (80069ac <UART_SetConfig+0x35c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d132      	bne.n	8006862 <UART_SetConfig+0x212>
 80067fc:	4b6a      	ldr	r3, [pc, #424]	; (80069a8 <UART_SetConfig+0x358>)
 80067fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	2b05      	cmp	r3, #5
 8006806:	d827      	bhi.n	8006858 <UART_SetConfig+0x208>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x1c0>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800682e:	e1fb      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006836:	e1f7      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800683e:	e1f3      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006846:	e1ef      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800684e:	e1eb      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006856:	e1e7      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800685e:	bf00      	nop
 8006860:	e1e2      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a52      	ldr	r2, [pc, #328]	; (80069b0 <UART_SetConfig+0x360>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d132      	bne.n	80068d2 <UART_SetConfig+0x282>
 800686c:	4b4e      	ldr	r3, [pc, #312]	; (80069a8 <UART_SetConfig+0x358>)
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	2b05      	cmp	r3, #5
 8006876:	d827      	bhi.n	80068c8 <UART_SetConfig+0x278>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x230>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006899 	.word	0x08006899
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068a9 	.word	0x080068a9
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	2300      	movs	r3, #0
 800689a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800689e:	e1c3      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068a6:	e1bf      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ae:	e1bb      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068b6:	e1b7      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068be:	e1b3      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068c6:	e1af      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ce:	bf00      	nop
 80068d0:	e1aa      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a37      	ldr	r2, [pc, #220]	; (80069b4 <UART_SetConfig+0x364>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d132      	bne.n	8006942 <UART_SetConfig+0x2f2>
 80068dc:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <UART_SetConfig+0x358>)
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	2b05      	cmp	r3, #5
 80068e6:	d827      	bhi.n	8006938 <UART_SetConfig+0x2e8>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x2a0>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006909 	.word	0x08006909
 80068f4:	08006911 	.word	0x08006911
 80068f8:	08006919 	.word	0x08006919
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006929 	.word	0x08006929
 8006904:	08006931 	.word	0x08006931
 8006908:	2300      	movs	r3, #0
 800690a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800690e:	e18b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006916:	e187      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800691e:	e183      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006926:	e17f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006928:	2320      	movs	r3, #32
 800692a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800692e:	e17b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006930:	2340      	movs	r3, #64	; 0x40
 8006932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006936:	e177      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800693e:	bf00      	nop
 8006940:	e172      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <UART_SetConfig+0x368>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d144      	bne.n	80069d6 <UART_SetConfig+0x386>
 800694c:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <UART_SetConfig+0x358>)
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	2b05      	cmp	r3, #5
 8006956:	d839      	bhi.n	80069cc <UART_SetConfig+0x37c>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x310>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	080069bd 	.word	0x080069bd
 8006974:	080069c5 	.word	0x080069c5
 8006978:	2300      	movs	r3, #0
 800697a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800697e:	e153      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006986:	e14f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800698e:	e14b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006996:	e147      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006998:	cfff69f3 	.word	0xcfff69f3
 800699c:	58000c00 	.word	0x58000c00
 80069a0:	11fff4ff 	.word	0x11fff4ff
 80069a4:	40011000 	.word	0x40011000
 80069a8:	58024400 	.word	0x58024400
 80069ac:	40004400 	.word	0x40004400
 80069b0:	40004800 	.word	0x40004800
 80069b4:	40004c00 	.word	0x40004c00
 80069b8:	40005000 	.word	0x40005000
 80069bc:	2320      	movs	r3, #32
 80069be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069c2:	e131      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ca:	e12d      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069d2:	bf00      	nop
 80069d4:	e128      	b.n	8006c28 <UART_SetConfig+0x5d8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4ac3      	ldr	r2, [pc, #780]	; (8006ce8 <UART_SetConfig+0x698>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d178      	bne.n	8006ad2 <UART_SetConfig+0x482>
 80069e0:	4bc2      	ldr	r3, [pc, #776]	; (8006cec <UART_SetConfig+0x69c>)
 80069e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e8:	2b28      	cmp	r3, #40	; 0x28
 80069ea:	d86d      	bhi.n	8006ac8 <UART_SetConfig+0x478>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <UART_SetConfig+0x3a4>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a99 	.word	0x08006a99
 80069f8:	08006ac9 	.word	0x08006ac9
 80069fc:	08006ac9 	.word	0x08006ac9
 8006a00:	08006ac9 	.word	0x08006ac9
 8006a04:	08006ac9 	.word	0x08006ac9
 8006a08:	08006ac9 	.word	0x08006ac9
 8006a0c:	08006ac9 	.word	0x08006ac9
 8006a10:	08006ac9 	.word	0x08006ac9
 8006a14:	08006aa1 	.word	0x08006aa1
 8006a18:	08006ac9 	.word	0x08006ac9
 8006a1c:	08006ac9 	.word	0x08006ac9
 8006a20:	08006ac9 	.word	0x08006ac9
 8006a24:	08006ac9 	.word	0x08006ac9
 8006a28:	08006ac9 	.word	0x08006ac9
 8006a2c:	08006ac9 	.word	0x08006ac9
 8006a30:	08006ac9 	.word	0x08006ac9
 8006a34:	08006aa9 	.word	0x08006aa9
 8006a38:	08006ac9 	.word	0x08006ac9
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006ac9 	.word	0x08006ac9
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006ac9 	.word	0x08006ac9
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ac9 	.word	0x08006ac9
 8006a54:	08006ab1 	.word	0x08006ab1
 8006a58:	08006ac9 	.word	0x08006ac9
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006ac9 	.word	0x08006ac9
 8006a68:	08006ac9 	.word	0x08006ac9
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006ab9 	.word	0x08006ab9
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006ac9 	.word	0x08006ac9
 8006a80:	08006ac9 	.word	0x08006ac9
 8006a84:	08006ac9 	.word	0x08006ac9
 8006a88:	08006ac9 	.word	0x08006ac9
 8006a8c:	08006ac9 	.word	0x08006ac9
 8006a90:	08006ac9 	.word	0x08006ac9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	e0c3      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aa6:	e0bf      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aae:	e0bb      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ab6:	e0b7      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ab8:	2320      	movs	r3, #32
 8006aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006abe:	e0b3      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ac6:	e0af      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ace:	bf00      	nop
 8006ad0:	e0aa      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a86      	ldr	r2, [pc, #536]	; (8006cf0 <UART_SetConfig+0x6a0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d132      	bne.n	8006b42 <UART_SetConfig+0x4f2>
 8006adc:	4b83      	ldr	r3, [pc, #524]	; (8006cec <UART_SetConfig+0x69c>)
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d827      	bhi.n	8006b38 <UART_SetConfig+0x4e8>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x4a0>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e08b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	e087      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b1e:	e083      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b26:	e07f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b2e:	e07b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b36:	e077      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b3e:	bf00      	nop
 8006b40:	e072      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6b      	ldr	r2, [pc, #428]	; (8006cf4 <UART_SetConfig+0x6a4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d132      	bne.n	8006bb2 <UART_SetConfig+0x562>
 8006b4c:	4b67      	ldr	r3, [pc, #412]	; (8006cec <UART_SetConfig+0x69c>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	d827      	bhi.n	8006ba8 <UART_SetConfig+0x558>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x510>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b79 	.word	0x08006b79
 8006b64:	08006b81 	.word	0x08006b81
 8006b68:	08006b89 	.word	0x08006b89
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006b99 	.word	0x08006b99
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b7e:	e053      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b80:	2304      	movs	r3, #4
 8006b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b86:	e04f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b8e:	e04b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b96:	e047      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b9e:	e043      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ba6:	e03f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bae:	bf00      	nop
 8006bb0:	e03a      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a50      	ldr	r2, [pc, #320]	; (8006cf8 <UART_SetConfig+0x6a8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d132      	bne.n	8006c22 <UART_SetConfig+0x5d2>
 8006bbc:	4b4b      	ldr	r3, [pc, #300]	; (8006cec <UART_SetConfig+0x69c>)
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d827      	bhi.n	8006c18 <UART_SetConfig+0x5c8>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0x580>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	2302      	movs	r3, #2
 8006bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bee:	e01b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bf6:	e017      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bfe:	e013      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c06:	e00f      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c0e:	e00b      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c16:	e007      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c1e:	bf00      	nop
 8006c20:	e002      	b.n	8006c28 <UART_SetConfig+0x5d8>
 8006c22:	2380      	movs	r3, #128	; 0x80
 8006c24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a32      	ldr	r2, [pc, #200]	; (8006cf8 <UART_SetConfig+0x6a8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f040 86f7 	bne.w	8007a22 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	f000 80c0 	beq.w	8006dbe <UART_SetConfig+0x76e>
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	dc04      	bgt.n	8006c4c <UART_SetConfig+0x5fc>
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x610>
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d065      	beq.n	8006d16 <UART_SetConfig+0x6c6>
 8006c4a:	e27a      	b.n	8007142 <UART_SetConfig+0xaf2>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	f000 81b0 	beq.w	8006fb2 <UART_SetConfig+0x962>
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	f000 821e 	beq.w	8007094 <UART_SetConfig+0xa44>
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	f000 8104 	beq.w	8006e66 <UART_SetConfig+0x816>
 8006c5e:	e270      	b.n	8007142 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c60:	f7fe fdd8 	bl	8005814 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d04e      	beq.n	8006d0c <UART_SetConfig+0x6bc>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d048      	beq.n	8006d08 <UART_SetConfig+0x6b8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d042      	beq.n	8006d04 <UART_SetConfig+0x6b4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d03c      	beq.n	8006d00 <UART_SetConfig+0x6b0>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d036      	beq.n	8006cfc <UART_SetConfig+0x6ac>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d026      	beq.n	8006ce4 <UART_SetConfig+0x694>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d020      	beq.n	8006ce0 <UART_SetConfig+0x690>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	d01a      	beq.n	8006cdc <UART_SetConfig+0x68c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d014      	beq.n	8006cd8 <UART_SetConfig+0x688>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	d00e      	beq.n	8006cd4 <UART_SetConfig+0x684>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b0a      	cmp	r3, #10
 8006cbc:	d008      	beq.n	8006cd0 <UART_SetConfig+0x680>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2b0b      	cmp	r3, #11
 8006cc4:	d102      	bne.n	8006ccc <UART_SetConfig+0x67c>
 8006cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cca:	e020      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e01e      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	e01c      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	e01a      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006cd8:	2320      	movs	r3, #32
 8006cda:	e018      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	e016      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	e014      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006ce4:	230a      	movs	r3, #10
 8006ce6:	e012      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006ce8:	40011400 	.word	0x40011400
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	40007800 	.word	0x40007800
 8006cf4:	40007c00 	.word	0x40007c00
 8006cf8:	58000c00 	.word	0x58000c00
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	e006      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006d00:	2306      	movs	r3, #6
 8006d02:	e004      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006d04:	2304      	movs	r3, #4
 8006d06:	e002      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e000      	b.n	8006d0e <UART_SetConfig+0x6be>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d14:	e219      	b.n	800714a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d16:	f107 0318 	add.w	r3, r7, #24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fd90 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d044      	beq.n	8006db4 <UART_SetConfig+0x764>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d03e      	beq.n	8006db0 <UART_SetConfig+0x760>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d038      	beq.n	8006dac <UART_SetConfig+0x75c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d032      	beq.n	8006da8 <UART_SetConfig+0x758>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d02c      	beq.n	8006da4 <UART_SetConfig+0x754>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b05      	cmp	r3, #5
 8006d50:	d026      	beq.n	8006da0 <UART_SetConfig+0x750>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	d020      	beq.n	8006d9c <UART_SetConfig+0x74c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b07      	cmp	r3, #7
 8006d60:	d01a      	beq.n	8006d98 <UART_SetConfig+0x748>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d014      	beq.n	8006d94 <UART_SetConfig+0x744>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d00e      	beq.n	8006d90 <UART_SetConfig+0x740>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b0a      	cmp	r3, #10
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x73c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b0b      	cmp	r3, #11
 8006d80:	d102      	bne.n	8006d88 <UART_SetConfig+0x738>
 8006d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d86:	e016      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e014      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	e012      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	e010      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d94:	2320      	movs	r3, #32
 8006d96:	e00e      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	e00c      	b.n	8006db6 <UART_SetConfig+0x766>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	e00a      	b.n	8006db6 <UART_SetConfig+0x766>
 8006da0:	230a      	movs	r3, #10
 8006da2:	e008      	b.n	8006db6 <UART_SetConfig+0x766>
 8006da4:	2308      	movs	r3, #8
 8006da6:	e006      	b.n	8006db6 <UART_SetConfig+0x766>
 8006da8:	2306      	movs	r3, #6
 8006daa:	e004      	b.n	8006db6 <UART_SetConfig+0x766>
 8006dac:	2304      	movs	r3, #4
 8006dae:	e002      	b.n	8006db6 <UART_SetConfig+0x766>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e000      	b.n	8006db6 <UART_SetConfig+0x766>
 8006db4:	2301      	movs	r3, #1
 8006db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dbc:	e1c5      	b.n	800714a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbe:	f107 030c 	add.w	r3, r7, #12
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fe88 	bl	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d044      	beq.n	8006e5c <UART_SetConfig+0x80c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d03e      	beq.n	8006e58 <UART_SetConfig+0x808>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d038      	beq.n	8006e54 <UART_SetConfig+0x804>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d032      	beq.n	8006e50 <UART_SetConfig+0x800>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d02c      	beq.n	8006e4c <UART_SetConfig+0x7fc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d026      	beq.n	8006e48 <UART_SetConfig+0x7f8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d020      	beq.n	8006e44 <UART_SetConfig+0x7f4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	d01a      	beq.n	8006e40 <UART_SetConfig+0x7f0>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d014      	beq.n	8006e3c <UART_SetConfig+0x7ec>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d00e      	beq.n	8006e38 <UART_SetConfig+0x7e8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b0a      	cmp	r3, #10
 8006e20:	d008      	beq.n	8006e34 <UART_SetConfig+0x7e4>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	2b0b      	cmp	r3, #11
 8006e28:	d102      	bne.n	8006e30 <UART_SetConfig+0x7e0>
 8006e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2e:	e016      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e014      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	e012      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	e010      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	e00e      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e40:	2310      	movs	r3, #16
 8006e42:	e00c      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e44:	230c      	movs	r3, #12
 8006e46:	e00a      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e48:	230a      	movs	r3, #10
 8006e4a:	e008      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	e006      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e50:	2306      	movs	r3, #6
 8006e52:	e004      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e54:	2304      	movs	r3, #4
 8006e56:	e002      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e000      	b.n	8006e5e <UART_SetConfig+0x80e>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e64:	e171      	b.n	800714a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e66:	4b7a      	ldr	r3, [pc, #488]	; (8007050 <UART_SetConfig+0xa00>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d054      	beq.n	8006f1c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e72:	4b77      	ldr	r3, [pc, #476]	; (8007050 <UART_SetConfig+0xa00>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	4a75      	ldr	r2, [pc, #468]	; (8007054 <UART_SetConfig+0xa04>)
 8006e7e:	40da      	lsrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d044      	beq.n	8006f12 <UART_SetConfig+0x8c2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d03e      	beq.n	8006f0e <UART_SetConfig+0x8be>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d038      	beq.n	8006f0a <UART_SetConfig+0x8ba>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d032      	beq.n	8006f06 <UART_SetConfig+0x8b6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d02c      	beq.n	8006f02 <UART_SetConfig+0x8b2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b05      	cmp	r3, #5
 8006eae:	d026      	beq.n	8006efe <UART_SetConfig+0x8ae>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b06      	cmp	r3, #6
 8006eb6:	d020      	beq.n	8006efa <UART_SetConfig+0x8aa>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d01a      	beq.n	8006ef6 <UART_SetConfig+0x8a6>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d014      	beq.n	8006ef2 <UART_SetConfig+0x8a2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d00e      	beq.n	8006eee <UART_SetConfig+0x89e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b0a      	cmp	r3, #10
 8006ed6:	d008      	beq.n	8006eea <UART_SetConfig+0x89a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	2b0b      	cmp	r3, #11
 8006ede:	d102      	bne.n	8006ee6 <UART_SetConfig+0x896>
 8006ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee4:	e016      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e014      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	e012      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	e010      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	e00e      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	e00c      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006efa:	230c      	movs	r3, #12
 8006efc:	e00a      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006efe:	230a      	movs	r3, #10
 8006f00:	e008      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006f02:	2308      	movs	r3, #8
 8006f04:	e006      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006f06:	2306      	movs	r3, #6
 8006f08:	e004      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	e002      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e000      	b.n	8006f14 <UART_SetConfig+0x8c4>
 8006f12:	2301      	movs	r3, #1
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006f1a:	e116      	b.n	800714a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d043      	beq.n	8006fac <UART_SetConfig+0x95c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d03d      	beq.n	8006fa8 <UART_SetConfig+0x958>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d037      	beq.n	8006fa4 <UART_SetConfig+0x954>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d031      	beq.n	8006fa0 <UART_SetConfig+0x950>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d02b      	beq.n	8006f9c <UART_SetConfig+0x94c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	d025      	beq.n	8006f98 <UART_SetConfig+0x948>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	2b06      	cmp	r3, #6
 8006f52:	d01f      	beq.n	8006f94 <UART_SetConfig+0x944>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	d019      	beq.n	8006f90 <UART_SetConfig+0x940>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d013      	beq.n	8006f8c <UART_SetConfig+0x93c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	d00d      	beq.n	8006f88 <UART_SetConfig+0x938>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	2b0a      	cmp	r3, #10
 8006f72:	d007      	beq.n	8006f84 <UART_SetConfig+0x934>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	2b0b      	cmp	r3, #11
 8006f7a:	d101      	bne.n	8006f80 <UART_SetConfig+0x930>
 8006f7c:	4b36      	ldr	r3, [pc, #216]	; (8007058 <UART_SetConfig+0xa08>)
 8006f7e:	e016      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f80:	4b34      	ldr	r3, [pc, #208]	; (8007054 <UART_SetConfig+0xa04>)
 8006f82:	e014      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f84:	4b35      	ldr	r3, [pc, #212]	; (800705c <UART_SetConfig+0xa0c>)
 8006f86:	e012      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f88:	4b35      	ldr	r3, [pc, #212]	; (8007060 <UART_SetConfig+0xa10>)
 8006f8a:	e010      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f8c:	4b35      	ldr	r3, [pc, #212]	; (8007064 <UART_SetConfig+0xa14>)
 8006f8e:	e00e      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f90:	4b35      	ldr	r3, [pc, #212]	; (8007068 <UART_SetConfig+0xa18>)
 8006f92:	e00c      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f94:	4b35      	ldr	r3, [pc, #212]	; (800706c <UART_SetConfig+0xa1c>)
 8006f96:	e00a      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f98:	4b35      	ldr	r3, [pc, #212]	; (8007070 <UART_SetConfig+0xa20>)
 8006f9a:	e008      	b.n	8006fae <UART_SetConfig+0x95e>
 8006f9c:	4b35      	ldr	r3, [pc, #212]	; (8007074 <UART_SetConfig+0xa24>)
 8006f9e:	e006      	b.n	8006fae <UART_SetConfig+0x95e>
 8006fa0:	4b35      	ldr	r3, [pc, #212]	; (8007078 <UART_SetConfig+0xa28>)
 8006fa2:	e004      	b.n	8006fae <UART_SetConfig+0x95e>
 8006fa4:	4b35      	ldr	r3, [pc, #212]	; (800707c <UART_SetConfig+0xa2c>)
 8006fa6:	e002      	b.n	8006fae <UART_SetConfig+0x95e>
 8006fa8:	4b35      	ldr	r3, [pc, #212]	; (8007080 <UART_SetConfig+0xa30>)
 8006faa:	e000      	b.n	8006fae <UART_SetConfig+0x95e>
 8006fac:	4b29      	ldr	r3, [pc, #164]	; (8007054 <UART_SetConfig+0xa04>)
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb0:	e0cb      	b.n	800714a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d046      	beq.n	8007048 <UART_SetConfig+0x9f8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d040      	beq.n	8007044 <UART_SetConfig+0x9f4>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d03a      	beq.n	8007040 <UART_SetConfig+0x9f0>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d034      	beq.n	800703c <UART_SetConfig+0x9ec>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d02e      	beq.n	8007038 <UART_SetConfig+0x9e8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d028      	beq.n	8007034 <UART_SetConfig+0x9e4>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d022      	beq.n	8007030 <UART_SetConfig+0x9e0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b07      	cmp	r3, #7
 8006ff0:	d01c      	beq.n	800702c <UART_SetConfig+0x9dc>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d016      	beq.n	8007028 <UART_SetConfig+0x9d8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d00f      	beq.n	8007022 <UART_SetConfig+0x9d2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b0a      	cmp	r3, #10
 8007008:	d008      	beq.n	800701c <UART_SetConfig+0x9cc>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b0b      	cmp	r3, #11
 8007010:	d102      	bne.n	8007018 <UART_SetConfig+0x9c8>
 8007012:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007016:	e018      	b.n	800704a <UART_SetConfig+0x9fa>
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <UART_SetConfig+0xa18>)
 800701a:	e016      	b.n	800704a <UART_SetConfig+0x9fa>
 800701c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007020:	e013      	b.n	800704a <UART_SetConfig+0x9fa>
 8007022:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007026:	e010      	b.n	800704a <UART_SetConfig+0x9fa>
 8007028:	4b16      	ldr	r3, [pc, #88]	; (8007084 <UART_SetConfig+0xa34>)
 800702a:	e00e      	b.n	800704a <UART_SetConfig+0x9fa>
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <UART_SetConfig+0xa08>)
 800702e:	e00c      	b.n	800704a <UART_SetConfig+0x9fa>
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <UART_SetConfig+0xa38>)
 8007032:	e00a      	b.n	800704a <UART_SetConfig+0x9fa>
 8007034:	4b15      	ldr	r3, [pc, #84]	; (800708c <UART_SetConfig+0xa3c>)
 8007036:	e008      	b.n	800704a <UART_SetConfig+0x9fa>
 8007038:	4b08      	ldr	r3, [pc, #32]	; (800705c <UART_SetConfig+0xa0c>)
 800703a:	e006      	b.n	800704a <UART_SetConfig+0x9fa>
 800703c:	4b14      	ldr	r3, [pc, #80]	; (8007090 <UART_SetConfig+0xa40>)
 800703e:	e004      	b.n	800704a <UART_SetConfig+0x9fa>
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <UART_SetConfig+0xa10>)
 8007042:	e002      	b.n	800704a <UART_SetConfig+0x9fa>
 8007044:	4b07      	ldr	r3, [pc, #28]	; (8007064 <UART_SetConfig+0xa14>)
 8007046:	e000      	b.n	800704a <UART_SetConfig+0x9fa>
 8007048:	4b07      	ldr	r3, [pc, #28]	; (8007068 <UART_SetConfig+0xa18>)
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800704c:	e07d      	b.n	800714a <UART_SetConfig+0xafa>
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	0003d090 	.word	0x0003d090
 800705c:	0007a120 	.word	0x0007a120
 8007060:	000f4240 	.word	0x000f4240
 8007064:	001e8480 	.word	0x001e8480
 8007068:	003d0900 	.word	0x003d0900
 800706c:	00516155 	.word	0x00516155
 8007070:	0061a800 	.word	0x0061a800
 8007074:	007a1200 	.word	0x007a1200
 8007078:	00a2c2aa 	.word	0x00a2c2aa
 800707c:	00f42400 	.word	0x00f42400
 8007080:	01e84800 	.word	0x01e84800
 8007084:	0001e848 	.word	0x0001e848
 8007088:	00051615 	.word	0x00051615
 800708c:	00061a80 	.word	0x00061a80
 8007090:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d04e      	beq.n	800713a <UART_SetConfig+0xaea>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d047      	beq.n	8007134 <UART_SetConfig+0xae4>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d040      	beq.n	800712e <UART_SetConfig+0xade>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d039      	beq.n	8007128 <UART_SetConfig+0xad8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d032      	beq.n	8007122 <UART_SetConfig+0xad2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d02b      	beq.n	800711c <UART_SetConfig+0xacc>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b06      	cmp	r3, #6
 80070ca:	d024      	beq.n	8007116 <UART_SetConfig+0xac6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b07      	cmp	r3, #7
 80070d2:	d01d      	beq.n	8007110 <UART_SetConfig+0xac0>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d016      	beq.n	800710a <UART_SetConfig+0xaba>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d00f      	beq.n	8007104 <UART_SetConfig+0xab4>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b0a      	cmp	r3, #10
 80070ea:	d008      	beq.n	80070fe <UART_SetConfig+0xaae>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b0b      	cmp	r3, #11
 80070f2:	d101      	bne.n	80070f8 <UART_SetConfig+0xaa8>
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	e022      	b.n	800713e <UART_SetConfig+0xaee>
 80070f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fc:	e01f      	b.n	800713e <UART_SetConfig+0xaee>
 80070fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007102:	e01c      	b.n	800713e <UART_SetConfig+0xaee>
 8007104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007108:	e019      	b.n	800713e <UART_SetConfig+0xaee>
 800710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710e:	e016      	b.n	800713e <UART_SetConfig+0xaee>
 8007110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007114:	e013      	b.n	800713e <UART_SetConfig+0xaee>
 8007116:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800711a:	e010      	b.n	800713e <UART_SetConfig+0xaee>
 800711c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007120:	e00d      	b.n	800713e <UART_SetConfig+0xaee>
 8007122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007126:	e00a      	b.n	800713e <UART_SetConfig+0xaee>
 8007128:	f241 5355 	movw	r3, #5461	; 0x1555
 800712c:	e007      	b.n	800713e <UART_SetConfig+0xaee>
 800712e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007132:	e004      	b.n	800713e <UART_SetConfig+0xaee>
 8007134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007138:	e001      	b.n	800713e <UART_SetConfig+0xaee>
 800713a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007140:	e003      	b.n	800714a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007148:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	2b00      	cmp	r3, #0
 800714e:	f001 83e8 	beq.w	8008922 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	4413      	add	r3, r2
 800715c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800715e:	429a      	cmp	r2, r3
 8007160:	d305      	bcc.n	800716e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800716a:	429a      	cmp	r2, r3
 800716c:	d904      	bls.n	8007178 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007174:	f001 bbd5 	b.w	8008922 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007178:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800717c:	2b08      	cmp	r3, #8
 800717e:	f000 8154 	beq.w	800742a <UART_SetConfig+0xdda>
 8007182:	2b08      	cmp	r3, #8
 8007184:	dc06      	bgt.n	8007194 <UART_SetConfig+0xb44>
 8007186:	2b02      	cmp	r3, #2
 8007188:	d00f      	beq.n	80071aa <UART_SetConfig+0xb5a>
 800718a:	2b04      	cmp	r3, #4
 800718c:	f000 80ac 	beq.w	80072e8 <UART_SetConfig+0xc98>
 8007190:	f000 bc30 	b.w	80079f4 <UART_SetConfig+0x13a4>
 8007194:	2b20      	cmp	r3, #32
 8007196:	f000 832d 	beq.w	80077f4 <UART_SetConfig+0x11a4>
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	f000 83a5 	beq.w	80078ea <UART_SetConfig+0x129a>
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	f000 81e3 	beq.w	800756c <UART_SetConfig+0xf1c>
 80071a6:	f000 bc25 	b.w	80079f4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071aa:	f7fe fb33 	bl	8005814 <HAL_RCCEx_GetD3PCLK1Freq>
 80071ae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	4618      	mov	r0, r3
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d067      	beq.n	8007290 <UART_SetConfig+0xc40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d05e      	beq.n	8007286 <UART_SetConfig+0xc36>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d055      	beq.n	800727c <UART_SetConfig+0xc2c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d04c      	beq.n	8007272 <UART_SetConfig+0xc22>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d043      	beq.n	8007268 <UART_SetConfig+0xc18>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	2b05      	cmp	r3, #5
 80071e6:	d03a      	beq.n	800725e <UART_SetConfig+0xc0e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d031      	beq.n	8007254 <UART_SetConfig+0xc04>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	2b07      	cmp	r3, #7
 80071f6:	d028      	beq.n	800724a <UART_SetConfig+0xbfa>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d01f      	beq.n	8007240 <UART_SetConfig+0xbf0>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	2b09      	cmp	r3, #9
 8007206:	d016      	beq.n	8007236 <UART_SetConfig+0xbe6>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	2b0a      	cmp	r3, #10
 800720e:	d00d      	beq.n	800722c <UART_SetConfig+0xbdc>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b0b      	cmp	r3, #11
 8007216:	d104      	bne.n	8007222 <UART_SetConfig+0xbd2>
 8007218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800721c:	f04f 0400 	mov.w	r4, #0
 8007220:	e03a      	b.n	8007298 <UART_SetConfig+0xc48>
 8007222:	f04f 0301 	mov.w	r3, #1
 8007226:	f04f 0400 	mov.w	r4, #0
 800722a:	e035      	b.n	8007298 <UART_SetConfig+0xc48>
 800722c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007230:	f04f 0400 	mov.w	r4, #0
 8007234:	e030      	b.n	8007298 <UART_SetConfig+0xc48>
 8007236:	f04f 0340 	mov.w	r3, #64	; 0x40
 800723a:	f04f 0400 	mov.w	r4, #0
 800723e:	e02b      	b.n	8007298 <UART_SetConfig+0xc48>
 8007240:	f04f 0320 	mov.w	r3, #32
 8007244:	f04f 0400 	mov.w	r4, #0
 8007248:	e026      	b.n	8007298 <UART_SetConfig+0xc48>
 800724a:	f04f 0310 	mov.w	r3, #16
 800724e:	f04f 0400 	mov.w	r4, #0
 8007252:	e021      	b.n	8007298 <UART_SetConfig+0xc48>
 8007254:	f04f 030c 	mov.w	r3, #12
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	e01c      	b.n	8007298 <UART_SetConfig+0xc48>
 800725e:	f04f 030a 	mov.w	r3, #10
 8007262:	f04f 0400 	mov.w	r4, #0
 8007266:	e017      	b.n	8007298 <UART_SetConfig+0xc48>
 8007268:	f04f 0308 	mov.w	r3, #8
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	e012      	b.n	8007298 <UART_SetConfig+0xc48>
 8007272:	f04f 0306 	mov.w	r3, #6
 8007276:	f04f 0400 	mov.w	r4, #0
 800727a:	e00d      	b.n	8007298 <UART_SetConfig+0xc48>
 800727c:	f04f 0304 	mov.w	r3, #4
 8007280:	f04f 0400 	mov.w	r4, #0
 8007284:	e008      	b.n	8007298 <UART_SetConfig+0xc48>
 8007286:	f04f 0302 	mov.w	r3, #2
 800728a:	f04f 0400 	mov.w	r4, #0
 800728e:	e003      	b.n	8007298 <UART_SetConfig+0xc48>
 8007290:	f04f 0301 	mov.w	r3, #1
 8007294:	f04f 0400 	mov.w	r4, #0
 8007298:	461a      	mov	r2, r3
 800729a:	4623      	mov	r3, r4
 800729c:	f7f9 f870 	bl	8000380 <__aeabi_uldivmod>
 80072a0:	4603      	mov	r3, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	4619      	mov	r1, r3
 80072a6:	4622      	mov	r2, r4
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	f04f 0400 	mov.w	r4, #0
 80072b0:	0214      	lsls	r4, r2, #8
 80072b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80072b6:	020b      	lsls	r3, r1, #8
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6852      	ldr	r2, [r2, #4]
 80072bc:	0852      	lsrs	r2, r2, #1
 80072be:	4611      	mov	r1, r2
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	eb13 0b01 	adds.w	fp, r3, r1
 80072c8:	eb44 0c02 	adc.w	ip, r4, r2
 80072cc:	4658      	mov	r0, fp
 80072ce:	4661      	mov	r1, ip
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f04f 0400 	mov.w	r4, #0
 80072d8:	461a      	mov	r2, r3
 80072da:	4623      	mov	r3, r4
 80072dc:	f7f9 f850 	bl	8000380 <__aeabi_uldivmod>
 80072e0:	4603      	mov	r3, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072e6:	e389      	b.n	80079fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e8:	f107 0318 	add.w	r3, r7, #24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe faa7 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d067      	beq.n	80073d2 <UART_SetConfig+0xd82>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b01      	cmp	r3, #1
 8007308:	d05e      	beq.n	80073c8 <UART_SetConfig+0xd78>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	2b02      	cmp	r3, #2
 8007310:	d055      	beq.n	80073be <UART_SetConfig+0xd6e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b03      	cmp	r3, #3
 8007318:	d04c      	beq.n	80073b4 <UART_SetConfig+0xd64>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b04      	cmp	r3, #4
 8007320:	d043      	beq.n	80073aa <UART_SetConfig+0xd5a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b05      	cmp	r3, #5
 8007328:	d03a      	beq.n	80073a0 <UART_SetConfig+0xd50>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b06      	cmp	r3, #6
 8007330:	d031      	beq.n	8007396 <UART_SetConfig+0xd46>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	2b07      	cmp	r3, #7
 8007338:	d028      	beq.n	800738c <UART_SetConfig+0xd3c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2b08      	cmp	r3, #8
 8007340:	d01f      	beq.n	8007382 <UART_SetConfig+0xd32>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b09      	cmp	r3, #9
 8007348:	d016      	beq.n	8007378 <UART_SetConfig+0xd28>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b0a      	cmp	r3, #10
 8007350:	d00d      	beq.n	800736e <UART_SetConfig+0xd1e>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b0b      	cmp	r3, #11
 8007358:	d104      	bne.n	8007364 <UART_SetConfig+0xd14>
 800735a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	e03a      	b.n	80073da <UART_SetConfig+0xd8a>
 8007364:	f04f 0301 	mov.w	r3, #1
 8007368:	f04f 0400 	mov.w	r4, #0
 800736c:	e035      	b.n	80073da <UART_SetConfig+0xd8a>
 800736e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007372:	f04f 0400 	mov.w	r4, #0
 8007376:	e030      	b.n	80073da <UART_SetConfig+0xd8a>
 8007378:	f04f 0340 	mov.w	r3, #64	; 0x40
 800737c:	f04f 0400 	mov.w	r4, #0
 8007380:	e02b      	b.n	80073da <UART_SetConfig+0xd8a>
 8007382:	f04f 0320 	mov.w	r3, #32
 8007386:	f04f 0400 	mov.w	r4, #0
 800738a:	e026      	b.n	80073da <UART_SetConfig+0xd8a>
 800738c:	f04f 0310 	mov.w	r3, #16
 8007390:	f04f 0400 	mov.w	r4, #0
 8007394:	e021      	b.n	80073da <UART_SetConfig+0xd8a>
 8007396:	f04f 030c 	mov.w	r3, #12
 800739a:	f04f 0400 	mov.w	r4, #0
 800739e:	e01c      	b.n	80073da <UART_SetConfig+0xd8a>
 80073a0:	f04f 030a 	mov.w	r3, #10
 80073a4:	f04f 0400 	mov.w	r4, #0
 80073a8:	e017      	b.n	80073da <UART_SetConfig+0xd8a>
 80073aa:	f04f 0308 	mov.w	r3, #8
 80073ae:	f04f 0400 	mov.w	r4, #0
 80073b2:	e012      	b.n	80073da <UART_SetConfig+0xd8a>
 80073b4:	f04f 0306 	mov.w	r3, #6
 80073b8:	f04f 0400 	mov.w	r4, #0
 80073bc:	e00d      	b.n	80073da <UART_SetConfig+0xd8a>
 80073be:	f04f 0304 	mov.w	r3, #4
 80073c2:	f04f 0400 	mov.w	r4, #0
 80073c6:	e008      	b.n	80073da <UART_SetConfig+0xd8a>
 80073c8:	f04f 0302 	mov.w	r3, #2
 80073cc:	f04f 0400 	mov.w	r4, #0
 80073d0:	e003      	b.n	80073da <UART_SetConfig+0xd8a>
 80073d2:	f04f 0301 	mov.w	r3, #1
 80073d6:	f04f 0400 	mov.w	r4, #0
 80073da:	461a      	mov	r2, r3
 80073dc:	4623      	mov	r3, r4
 80073de:	f7f8 ffcf 	bl	8000380 <__aeabi_uldivmod>
 80073e2:	4603      	mov	r3, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	4619      	mov	r1, r3
 80073e8:	4622      	mov	r2, r4
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	f04f 0400 	mov.w	r4, #0
 80073f2:	0214      	lsls	r4, r2, #8
 80073f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80073f8:	020b      	lsls	r3, r1, #8
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6852      	ldr	r2, [r2, #4]
 80073fe:	0852      	lsrs	r2, r2, #1
 8007400:	4611      	mov	r1, r2
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	eb13 0b01 	adds.w	fp, r3, r1
 800740a:	eb44 0c02 	adc.w	ip, r4, r2
 800740e:	4658      	mov	r0, fp
 8007410:	4661      	mov	r1, ip
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f04f 0400 	mov.w	r4, #0
 800741a:	461a      	mov	r2, r3
 800741c:	4623      	mov	r3, r4
 800741e:	f7f8 ffaf 	bl	8000380 <__aeabi_uldivmod>
 8007422:	4603      	mov	r3, r0
 8007424:	460c      	mov	r4, r1
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007428:	e2e8      	b.n	80079fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800742a:	f107 030c 	add.w	r3, r7, #12
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fb52 	bl	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4618      	mov	r0, r3
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d067      	beq.n	8007514 <UART_SetConfig+0xec4>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b01      	cmp	r3, #1
 800744a:	d05e      	beq.n	800750a <UART_SetConfig+0xeba>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b02      	cmp	r3, #2
 8007452:	d055      	beq.n	8007500 <UART_SetConfig+0xeb0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	2b03      	cmp	r3, #3
 800745a:	d04c      	beq.n	80074f6 <UART_SetConfig+0xea6>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2b04      	cmp	r3, #4
 8007462:	d043      	beq.n	80074ec <UART_SetConfig+0xe9c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	2b05      	cmp	r3, #5
 800746a:	d03a      	beq.n	80074e2 <UART_SetConfig+0xe92>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	2b06      	cmp	r3, #6
 8007472:	d031      	beq.n	80074d8 <UART_SetConfig+0xe88>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b07      	cmp	r3, #7
 800747a:	d028      	beq.n	80074ce <UART_SetConfig+0xe7e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b08      	cmp	r3, #8
 8007482:	d01f      	beq.n	80074c4 <UART_SetConfig+0xe74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b09      	cmp	r3, #9
 800748a:	d016      	beq.n	80074ba <UART_SetConfig+0xe6a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d00d      	beq.n	80074b0 <UART_SetConfig+0xe60>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b0b      	cmp	r3, #11
 800749a:	d104      	bne.n	80074a6 <UART_SetConfig+0xe56>
 800749c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a0:	f04f 0400 	mov.w	r4, #0
 80074a4:	e03a      	b.n	800751c <UART_SetConfig+0xecc>
 80074a6:	f04f 0301 	mov.w	r3, #1
 80074aa:	f04f 0400 	mov.w	r4, #0
 80074ae:	e035      	b.n	800751c <UART_SetConfig+0xecc>
 80074b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80074b4:	f04f 0400 	mov.w	r4, #0
 80074b8:	e030      	b.n	800751c <UART_SetConfig+0xecc>
 80074ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80074be:	f04f 0400 	mov.w	r4, #0
 80074c2:	e02b      	b.n	800751c <UART_SetConfig+0xecc>
 80074c4:	f04f 0320 	mov.w	r3, #32
 80074c8:	f04f 0400 	mov.w	r4, #0
 80074cc:	e026      	b.n	800751c <UART_SetConfig+0xecc>
 80074ce:	f04f 0310 	mov.w	r3, #16
 80074d2:	f04f 0400 	mov.w	r4, #0
 80074d6:	e021      	b.n	800751c <UART_SetConfig+0xecc>
 80074d8:	f04f 030c 	mov.w	r3, #12
 80074dc:	f04f 0400 	mov.w	r4, #0
 80074e0:	e01c      	b.n	800751c <UART_SetConfig+0xecc>
 80074e2:	f04f 030a 	mov.w	r3, #10
 80074e6:	f04f 0400 	mov.w	r4, #0
 80074ea:	e017      	b.n	800751c <UART_SetConfig+0xecc>
 80074ec:	f04f 0308 	mov.w	r3, #8
 80074f0:	f04f 0400 	mov.w	r4, #0
 80074f4:	e012      	b.n	800751c <UART_SetConfig+0xecc>
 80074f6:	f04f 0306 	mov.w	r3, #6
 80074fa:	f04f 0400 	mov.w	r4, #0
 80074fe:	e00d      	b.n	800751c <UART_SetConfig+0xecc>
 8007500:	f04f 0304 	mov.w	r3, #4
 8007504:	f04f 0400 	mov.w	r4, #0
 8007508:	e008      	b.n	800751c <UART_SetConfig+0xecc>
 800750a:	f04f 0302 	mov.w	r3, #2
 800750e:	f04f 0400 	mov.w	r4, #0
 8007512:	e003      	b.n	800751c <UART_SetConfig+0xecc>
 8007514:	f04f 0301 	mov.w	r3, #1
 8007518:	f04f 0400 	mov.w	r4, #0
 800751c:	461a      	mov	r2, r3
 800751e:	4623      	mov	r3, r4
 8007520:	f7f8 ff2e 	bl	8000380 <__aeabi_uldivmod>
 8007524:	4603      	mov	r3, r0
 8007526:	460c      	mov	r4, r1
 8007528:	4619      	mov	r1, r3
 800752a:	4622      	mov	r2, r4
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	f04f 0400 	mov.w	r4, #0
 8007534:	0214      	lsls	r4, r2, #8
 8007536:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800753a:	020b      	lsls	r3, r1, #8
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	0852      	lsrs	r2, r2, #1
 8007542:	4611      	mov	r1, r2
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	eb13 0b01 	adds.w	fp, r3, r1
 800754c:	eb44 0c02 	adc.w	ip, r4, r2
 8007550:	4658      	mov	r0, fp
 8007552:	4661      	mov	r1, ip
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f04f 0400 	mov.w	r4, #0
 800755c:	461a      	mov	r2, r3
 800755e:	4623      	mov	r3, r4
 8007560:	f7f8 ff0e 	bl	8000380 <__aeabi_uldivmod>
 8007564:	4603      	mov	r3, r0
 8007566:	460c      	mov	r4, r1
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800756a:	e247      	b.n	80079fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756c:	4b96      	ldr	r3, [pc, #600]	; (80077c8 <UART_SetConfig+0x1178>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80a3 	beq.w	80076c0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757a:	4b93      	ldr	r3, [pc, #588]	; (80077c8 <UART_SetConfig+0x1178>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	08db      	lsrs	r3, r3, #3
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	4a91      	ldr	r2, [pc, #580]	; (80077cc <UART_SetConfig+0x117c>)
 8007586:	fa22 f303 	lsr.w	r3, r2, r3
 800758a:	4618      	mov	r0, r3
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d067      	beq.n	8007668 <UART_SetConfig+0x1018>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b01      	cmp	r3, #1
 800759e:	d05e      	beq.n	800765e <UART_SetConfig+0x100e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d055      	beq.n	8007654 <UART_SetConfig+0x1004>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d04c      	beq.n	800764a <UART_SetConfig+0xffa>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d043      	beq.n	8007640 <UART_SetConfig+0xff0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d03a      	beq.n	8007636 <UART_SetConfig+0xfe6>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d031      	beq.n	800762c <UART_SetConfig+0xfdc>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b07      	cmp	r3, #7
 80075ce:	d028      	beq.n	8007622 <UART_SetConfig+0xfd2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d01f      	beq.n	8007618 <UART_SetConfig+0xfc8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b09      	cmp	r3, #9
 80075de:	d016      	beq.n	800760e <UART_SetConfig+0xfbe>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d00d      	beq.n	8007604 <UART_SetConfig+0xfb4>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b0b      	cmp	r3, #11
 80075ee:	d104      	bne.n	80075fa <UART_SetConfig+0xfaa>
 80075f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f4:	f04f 0400 	mov.w	r4, #0
 80075f8:	e03a      	b.n	8007670 <UART_SetConfig+0x1020>
 80075fa:	f04f 0301 	mov.w	r3, #1
 80075fe:	f04f 0400 	mov.w	r4, #0
 8007602:	e035      	b.n	8007670 <UART_SetConfig+0x1020>
 8007604:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007608:	f04f 0400 	mov.w	r4, #0
 800760c:	e030      	b.n	8007670 <UART_SetConfig+0x1020>
 800760e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007612:	f04f 0400 	mov.w	r4, #0
 8007616:	e02b      	b.n	8007670 <UART_SetConfig+0x1020>
 8007618:	f04f 0320 	mov.w	r3, #32
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	e026      	b.n	8007670 <UART_SetConfig+0x1020>
 8007622:	f04f 0310 	mov.w	r3, #16
 8007626:	f04f 0400 	mov.w	r4, #0
 800762a:	e021      	b.n	8007670 <UART_SetConfig+0x1020>
 800762c:	f04f 030c 	mov.w	r3, #12
 8007630:	f04f 0400 	mov.w	r4, #0
 8007634:	e01c      	b.n	8007670 <UART_SetConfig+0x1020>
 8007636:	f04f 030a 	mov.w	r3, #10
 800763a:	f04f 0400 	mov.w	r4, #0
 800763e:	e017      	b.n	8007670 <UART_SetConfig+0x1020>
 8007640:	f04f 0308 	mov.w	r3, #8
 8007644:	f04f 0400 	mov.w	r4, #0
 8007648:	e012      	b.n	8007670 <UART_SetConfig+0x1020>
 800764a:	f04f 0306 	mov.w	r3, #6
 800764e:	f04f 0400 	mov.w	r4, #0
 8007652:	e00d      	b.n	8007670 <UART_SetConfig+0x1020>
 8007654:	f04f 0304 	mov.w	r3, #4
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	e008      	b.n	8007670 <UART_SetConfig+0x1020>
 800765e:	f04f 0302 	mov.w	r3, #2
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e003      	b.n	8007670 <UART_SetConfig+0x1020>
 8007668:	f04f 0301 	mov.w	r3, #1
 800766c:	f04f 0400 	mov.w	r4, #0
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	f7f8 fe84 	bl	8000380 <__aeabi_uldivmod>
 8007678:	4603      	mov	r3, r0
 800767a:	460c      	mov	r4, r1
 800767c:	4619      	mov	r1, r3
 800767e:	4622      	mov	r2, r4
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	f04f 0400 	mov.w	r4, #0
 8007688:	0214      	lsls	r4, r2, #8
 800768a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800768e:	020b      	lsls	r3, r1, #8
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6852      	ldr	r2, [r2, #4]
 8007694:	0852      	lsrs	r2, r2, #1
 8007696:	4611      	mov	r1, r2
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	eb13 0b01 	adds.w	fp, r3, r1
 80076a0:	eb44 0c02 	adc.w	ip, r4, r2
 80076a4:	4658      	mov	r0, fp
 80076a6:	4661      	mov	r1, ip
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f04f 0400 	mov.w	r4, #0
 80076b0:	461a      	mov	r2, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	f7f8 fe64 	bl	8000380 <__aeabi_uldivmod>
 80076b8:	4603      	mov	r3, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80076be:	e19d      	b.n	80079fc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d05b      	beq.n	8007780 <UART_SetConfig+0x1130>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d053      	beq.n	8007778 <UART_SetConfig+0x1128>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d04b      	beq.n	8007770 <UART_SetConfig+0x1120>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d043      	beq.n	8007768 <UART_SetConfig+0x1118>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d03b      	beq.n	8007760 <UART_SetConfig+0x1110>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d033      	beq.n	8007758 <UART_SetConfig+0x1108>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	d02b      	beq.n	8007750 <UART_SetConfig+0x1100>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	d023      	beq.n	8007748 <UART_SetConfig+0x10f8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b08      	cmp	r3, #8
 8007706:	d01b      	beq.n	8007740 <UART_SetConfig+0x10f0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b09      	cmp	r3, #9
 800770e:	d013      	beq.n	8007738 <UART_SetConfig+0x10e8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	2b0a      	cmp	r3, #10
 8007716:	d00b      	beq.n	8007730 <UART_SetConfig+0x10e0>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b0b      	cmp	r3, #11
 800771e:	d103      	bne.n	8007728 <UART_SetConfig+0x10d8>
 8007720:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <UART_SetConfig+0x117c>)
 8007722:	f04f 0400 	mov.w	r4, #0
 8007726:	e02e      	b.n	8007786 <UART_SetConfig+0x1136>
 8007728:	4b29      	ldr	r3, [pc, #164]	; (80077d0 <UART_SetConfig+0x1180>)
 800772a:	f04f 0403 	mov.w	r4, #3
 800772e:	e02a      	b.n	8007786 <UART_SetConfig+0x1136>
 8007730:	4b28      	ldr	r3, [pc, #160]	; (80077d4 <UART_SetConfig+0x1184>)
 8007732:	f04f 0400 	mov.w	r4, #0
 8007736:	e026      	b.n	8007786 <UART_SetConfig+0x1136>
 8007738:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <UART_SetConfig+0x1188>)
 800773a:	f04f 0400 	mov.w	r4, #0
 800773e:	e022      	b.n	8007786 <UART_SetConfig+0x1136>
 8007740:	4b26      	ldr	r3, [pc, #152]	; (80077dc <UART_SetConfig+0x118c>)
 8007742:	f04f 0400 	mov.w	r4, #0
 8007746:	e01e      	b.n	8007786 <UART_SetConfig+0x1136>
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <UART_SetConfig+0x1190>)
 800774a:	f04f 0400 	mov.w	r4, #0
 800774e:	e01a      	b.n	8007786 <UART_SetConfig+0x1136>
 8007750:	a419      	add	r4, pc, #100	; (adr r4, 80077b8 <UART_SetConfig+0x1168>)
 8007752:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007756:	e016      	b.n	8007786 <UART_SetConfig+0x1136>
 8007758:	4b22      	ldr	r3, [pc, #136]	; (80077e4 <UART_SetConfig+0x1194>)
 800775a:	f04f 0400 	mov.w	r4, #0
 800775e:	e012      	b.n	8007786 <UART_SetConfig+0x1136>
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <UART_SetConfig+0x1198>)
 8007762:	f04f 0400 	mov.w	r4, #0
 8007766:	e00e      	b.n	8007786 <UART_SetConfig+0x1136>
 8007768:	a415      	add	r4, pc, #84	; (adr r4, 80077c0 <UART_SetConfig+0x1170>)
 800776a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800776e:	e00a      	b.n	8007786 <UART_SetConfig+0x1136>
 8007770:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <UART_SetConfig+0x119c>)
 8007772:	f04f 0400 	mov.w	r4, #0
 8007776:	e006      	b.n	8007786 <UART_SetConfig+0x1136>
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <UART_SetConfig+0x11a0>)
 800777a:	f04f 0401 	mov.w	r4, #1
 800777e:	e002      	b.n	8007786 <UART_SetConfig+0x1136>
 8007780:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <UART_SetConfig+0x1180>)
 8007782:	f04f 0403 	mov.w	r4, #3
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6852      	ldr	r2, [r2, #4]
 800778a:	0852      	lsrs	r2, r2, #1
 800778c:	4611      	mov	r1, r2
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	eb13 0b01 	adds.w	fp, r3, r1
 8007796:	eb44 0c02 	adc.w	ip, r4, r2
 800779a:	4658      	mov	r0, fp
 800779c:	4661      	mov	r1, ip
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f04f 0400 	mov.w	r4, #0
 80077a6:	461a      	mov	r2, r3
 80077a8:	4623      	mov	r3, r4
 80077aa:	f7f8 fde9 	bl	8000380 <__aeabi_uldivmod>
 80077ae:	4603      	mov	r3, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077b4:	e122      	b.n	80079fc <UART_SetConfig+0x13ac>
 80077b6:	bf00      	nop
 80077b8:	51615500 	.word	0x51615500
 80077bc:	00000000 	.word	0x00000000
 80077c0:	a2c2aa00 	.word	0xa2c2aa00
 80077c4:	00000000 	.word	0x00000000
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	d0900000 	.word	0xd0900000
 80077d4:	07a12000 	.word	0x07a12000
 80077d8:	0f424000 	.word	0x0f424000
 80077dc:	1e848000 	.word	0x1e848000
 80077e0:	3d090000 	.word	0x3d090000
 80077e4:	61a80000 	.word	0x61a80000
 80077e8:	7a120000 	.word	0x7a120000
 80077ec:	f4240000 	.word	0xf4240000
 80077f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05b      	beq.n	80078b4 <UART_SetConfig+0x1264>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b01      	cmp	r3, #1
 8007802:	d053      	beq.n	80078ac <UART_SetConfig+0x125c>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b02      	cmp	r3, #2
 800780a:	d04b      	beq.n	80078a4 <UART_SetConfig+0x1254>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b03      	cmp	r3, #3
 8007812:	d043      	beq.n	800789c <UART_SetConfig+0x124c>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b04      	cmp	r3, #4
 800781a:	d03b      	beq.n	8007894 <UART_SetConfig+0x1244>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2b05      	cmp	r3, #5
 8007822:	d033      	beq.n	800788c <UART_SetConfig+0x123c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b06      	cmp	r3, #6
 800782a:	d02b      	beq.n	8007884 <UART_SetConfig+0x1234>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	2b07      	cmp	r3, #7
 8007832:	d023      	beq.n	800787c <UART_SetConfig+0x122c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	2b08      	cmp	r3, #8
 800783a:	d01b      	beq.n	8007874 <UART_SetConfig+0x1224>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b09      	cmp	r3, #9
 8007842:	d013      	beq.n	800786c <UART_SetConfig+0x121c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b0a      	cmp	r3, #10
 800784a:	d00b      	beq.n	8007864 <UART_SetConfig+0x1214>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	2b0b      	cmp	r3, #11
 8007852:	d103      	bne.n	800785c <UART_SetConfig+0x120c>
 8007854:	4bc0      	ldr	r3, [pc, #768]	; (8007b58 <UART_SetConfig+0x1508>)
 8007856:	f04f 0400 	mov.w	r4, #0
 800785a:	e02e      	b.n	80078ba <UART_SetConfig+0x126a>
 800785c:	4bbf      	ldr	r3, [pc, #764]	; (8007b5c <UART_SetConfig+0x150c>)
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	e02a      	b.n	80078ba <UART_SetConfig+0x126a>
 8007864:	4bbe      	ldr	r3, [pc, #760]	; (8007b60 <UART_SetConfig+0x1510>)
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	e026      	b.n	80078ba <UART_SetConfig+0x126a>
 800786c:	4bbd      	ldr	r3, [pc, #756]	; (8007b64 <UART_SetConfig+0x1514>)
 800786e:	f04f 0400 	mov.w	r4, #0
 8007872:	e022      	b.n	80078ba <UART_SetConfig+0x126a>
 8007874:	4bbc      	ldr	r3, [pc, #752]	; (8007b68 <UART_SetConfig+0x1518>)
 8007876:	f04f 0400 	mov.w	r4, #0
 800787a:	e01e      	b.n	80078ba <UART_SetConfig+0x126a>
 800787c:	4bbb      	ldr	r3, [pc, #748]	; (8007b6c <UART_SetConfig+0x151c>)
 800787e:	f04f 0400 	mov.w	r4, #0
 8007882:	e01a      	b.n	80078ba <UART_SetConfig+0x126a>
 8007884:	a4b0      	add	r4, pc, #704	; (adr r4, 8007b48 <UART_SetConfig+0x14f8>)
 8007886:	e9d4 3400 	ldrd	r3, r4, [r4]
 800788a:	e016      	b.n	80078ba <UART_SetConfig+0x126a>
 800788c:	4bb8      	ldr	r3, [pc, #736]	; (8007b70 <UART_SetConfig+0x1520>)
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	e012      	b.n	80078ba <UART_SetConfig+0x126a>
 8007894:	4bb7      	ldr	r3, [pc, #732]	; (8007b74 <UART_SetConfig+0x1524>)
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	e00e      	b.n	80078ba <UART_SetConfig+0x126a>
 800789c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007b50 <UART_SetConfig+0x1500>)
 800789e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80078a2:	e00a      	b.n	80078ba <UART_SetConfig+0x126a>
 80078a4:	4bb4      	ldr	r3, [pc, #720]	; (8007b78 <UART_SetConfig+0x1528>)
 80078a6:	f04f 0400 	mov.w	r4, #0
 80078aa:	e006      	b.n	80078ba <UART_SetConfig+0x126a>
 80078ac:	4bb3      	ldr	r3, [pc, #716]	; (8007b7c <UART_SetConfig+0x152c>)
 80078ae:	f04f 0400 	mov.w	r4, #0
 80078b2:	e002      	b.n	80078ba <UART_SetConfig+0x126a>
 80078b4:	4ba9      	ldr	r3, [pc, #676]	; (8007b5c <UART_SetConfig+0x150c>)
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6852      	ldr	r2, [r2, #4]
 80078be:	0852      	lsrs	r2, r2, #1
 80078c0:	4611      	mov	r1, r2
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	eb13 0b01 	adds.w	fp, r3, r1
 80078ca:	eb44 0c02 	adc.w	ip, r4, r2
 80078ce:	4658      	mov	r0, fp
 80078d0:	4661      	mov	r1, ip
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f04f 0400 	mov.w	r4, #0
 80078da:	461a      	mov	r2, r3
 80078dc:	4623      	mov	r3, r4
 80078de:	f7f8 fd4f 	bl	8000380 <__aeabi_uldivmod>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078e8:	e088      	b.n	80079fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d064      	beq.n	80079bc <UART_SetConfig+0x136c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d05b      	beq.n	80079b2 <UART_SetConfig+0x1362>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d052      	beq.n	80079a8 <UART_SetConfig+0x1358>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b03      	cmp	r3, #3
 8007908:	d04a      	beq.n	80079a0 <UART_SetConfig+0x1350>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b04      	cmp	r3, #4
 8007910:	d041      	beq.n	8007996 <UART_SetConfig+0x1346>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b05      	cmp	r3, #5
 8007918:	d039      	beq.n	800798e <UART_SetConfig+0x133e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b06      	cmp	r3, #6
 8007920:	d031      	beq.n	8007986 <UART_SetConfig+0x1336>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b07      	cmp	r3, #7
 8007928:	d028      	beq.n	800797c <UART_SetConfig+0x132c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b08      	cmp	r3, #8
 8007930:	d01f      	beq.n	8007972 <UART_SetConfig+0x1322>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b09      	cmp	r3, #9
 8007938:	d016      	beq.n	8007968 <UART_SetConfig+0x1318>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b0a      	cmp	r3, #10
 8007940:	d00d      	beq.n	800795e <UART_SetConfig+0x130e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b0b      	cmp	r3, #11
 8007948:	d104      	bne.n	8007954 <UART_SetConfig+0x1304>
 800794a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	e037      	b.n	80079c4 <UART_SetConfig+0x1374>
 8007954:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007958:	f04f 0400 	mov.w	r4, #0
 800795c:	e032      	b.n	80079c4 <UART_SetConfig+0x1374>
 800795e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007962:	f04f 0400 	mov.w	r4, #0
 8007966:	e02d      	b.n	80079c4 <UART_SetConfig+0x1374>
 8007968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	e028      	b.n	80079c4 <UART_SetConfig+0x1374>
 8007972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	e023      	b.n	80079c4 <UART_SetConfig+0x1374>
 800797c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	e01e      	b.n	80079c4 <UART_SetConfig+0x1374>
 8007986:	4b7e      	ldr	r3, [pc, #504]	; (8007b80 <UART_SetConfig+0x1530>)
 8007988:	f04f 0400 	mov.w	r4, #0
 800798c:	e01a      	b.n	80079c4 <UART_SetConfig+0x1374>
 800798e:	4b7d      	ldr	r3, [pc, #500]	; (8007b84 <UART_SetConfig+0x1534>)
 8007990:	f04f 0400 	mov.w	r4, #0
 8007994:	e016      	b.n	80079c4 <UART_SetConfig+0x1374>
 8007996:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	e011      	b.n	80079c4 <UART_SetConfig+0x1374>
 80079a0:	4b79      	ldr	r3, [pc, #484]	; (8007b88 <UART_SetConfig+0x1538>)
 80079a2:	f04f 0400 	mov.w	r4, #0
 80079a6:	e00d      	b.n	80079c4 <UART_SetConfig+0x1374>
 80079a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079ac:	f04f 0400 	mov.w	r4, #0
 80079b0:	e008      	b.n	80079c4 <UART_SetConfig+0x1374>
 80079b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079b6:	f04f 0400 	mov.w	r4, #0
 80079ba:	e003      	b.n	80079c4 <UART_SetConfig+0x1374>
 80079bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079c0:	f04f 0400 	mov.w	r4, #0
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	0852      	lsrs	r2, r2, #1
 80079ca:	4611      	mov	r1, r2
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	eb13 0b01 	adds.w	fp, r3, r1
 80079d4:	eb44 0c02 	adc.w	ip, r4, r2
 80079d8:	4658      	mov	r0, fp
 80079da:	4661      	mov	r1, ip
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	461a      	mov	r2, r3
 80079e6:	4623      	mov	r3, r4
 80079e8:	f7f8 fcca 	bl	8000380 <__aeabi_uldivmod>
 80079ec:	4603      	mov	r3, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079f2:	e003      	b.n	80079fc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80079fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a02:	d309      	bcc.n	8007a18 <UART_SetConfig+0x13c8>
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d205      	bcs.n	8007a18 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a12:	60da      	str	r2, [r3, #12]
 8007a14:	f000 bf85 	b.w	8008922 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	f000 bf80 	b.w	8008922 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2a:	f040 83da 	bne.w	80081e2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007a2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	f200 83b3 	bhi.w	800819e <UART_SetConfig+0x1b4e>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <UART_SetConfig+0x13f0>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007b8d 	.word	0x08007b8d
 8007a44:	08007c45 	.word	0x08007c45
 8007a48:	0800819f 	.word	0x0800819f
 8007a4c:	0800819f 	.word	0x0800819f
 8007a50:	08007cfd 	.word	0x08007cfd
 8007a54:	0800819f 	.word	0x0800819f
 8007a58:	0800819f 	.word	0x0800819f
 8007a5c:	0800819f 	.word	0x0800819f
 8007a60:	08007db9 	.word	0x08007db9
 8007a64:	0800819f 	.word	0x0800819f
 8007a68:	0800819f 	.word	0x0800819f
 8007a6c:	0800819f 	.word	0x0800819f
 8007a70:	0800819f 	.word	0x0800819f
 8007a74:	0800819f 	.word	0x0800819f
 8007a78:	0800819f 	.word	0x0800819f
 8007a7c:	0800819f 	.word	0x0800819f
 8007a80:	08007e75 	.word	0x08007e75
 8007a84:	0800819f 	.word	0x0800819f
 8007a88:	0800819f 	.word	0x0800819f
 8007a8c:	0800819f 	.word	0x0800819f
 8007a90:	0800819f 	.word	0x0800819f
 8007a94:	0800819f 	.word	0x0800819f
 8007a98:	0800819f 	.word	0x0800819f
 8007a9c:	0800819f 	.word	0x0800819f
 8007aa0:	0800819f 	.word	0x0800819f
 8007aa4:	0800819f 	.word	0x0800819f
 8007aa8:	0800819f 	.word	0x0800819f
 8007aac:	0800819f 	.word	0x0800819f
 8007ab0:	0800819f 	.word	0x0800819f
 8007ab4:	0800819f 	.word	0x0800819f
 8007ab8:	0800819f 	.word	0x0800819f
 8007abc:	0800819f 	.word	0x0800819f
 8007ac0:	08007fe7 	.word	0x08007fe7
 8007ac4:	0800819f 	.word	0x0800819f
 8007ac8:	0800819f 	.word	0x0800819f
 8007acc:	0800819f 	.word	0x0800819f
 8007ad0:	0800819f 	.word	0x0800819f
 8007ad4:	0800819f 	.word	0x0800819f
 8007ad8:	0800819f 	.word	0x0800819f
 8007adc:	0800819f 	.word	0x0800819f
 8007ae0:	0800819f 	.word	0x0800819f
 8007ae4:	0800819f 	.word	0x0800819f
 8007ae8:	0800819f 	.word	0x0800819f
 8007aec:	0800819f 	.word	0x0800819f
 8007af0:	0800819f 	.word	0x0800819f
 8007af4:	0800819f 	.word	0x0800819f
 8007af8:	0800819f 	.word	0x0800819f
 8007afc:	0800819f 	.word	0x0800819f
 8007b00:	0800819f 	.word	0x0800819f
 8007b04:	0800819f 	.word	0x0800819f
 8007b08:	0800819f 	.word	0x0800819f
 8007b0c:	0800819f 	.word	0x0800819f
 8007b10:	0800819f 	.word	0x0800819f
 8007b14:	0800819f 	.word	0x0800819f
 8007b18:	0800819f 	.word	0x0800819f
 8007b1c:	0800819f 	.word	0x0800819f
 8007b20:	0800819f 	.word	0x0800819f
 8007b24:	0800819f 	.word	0x0800819f
 8007b28:	0800819f 	.word	0x0800819f
 8007b2c:	0800819f 	.word	0x0800819f
 8007b30:	0800819f 	.word	0x0800819f
 8007b34:	0800819f 	.word	0x0800819f
 8007b38:	0800819f 	.word	0x0800819f
 8007b3c:	0800819f 	.word	0x0800819f
 8007b40:	080080dd 	.word	0x080080dd
 8007b44:	f3af 8000 	nop.w
 8007b48:	05161500 	.word	0x05161500
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	0a2c2a00 	.word	0x0a2c2a00
 8007b54:	00000000 	.word	0x00000000
 8007b58:	003d0900 	.word	0x003d0900
 8007b5c:	3d090000 	.word	0x3d090000
 8007b60:	007a1200 	.word	0x007a1200
 8007b64:	00f42400 	.word	0x00f42400
 8007b68:	01e84800 	.word	0x01e84800
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	061a8000 	.word	0x061a8000
 8007b74:	07a12000 	.word	0x07a12000
 8007b78:	0f424000 	.word	0x0f424000
 8007b7c:	1e848000 	.word	0x1e848000
 8007b80:	000aaa00 	.word	0x000aaa00
 8007b84:	000ccc00 	.word	0x000ccc00
 8007b88:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8c:	f7fc ff26 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 8007b90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d044      	beq.n	8007c24 <UART_SetConfig+0x15d4>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d03e      	beq.n	8007c20 <UART_SetConfig+0x15d0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d038      	beq.n	8007c1c <UART_SetConfig+0x15cc>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d032      	beq.n	8007c18 <UART_SetConfig+0x15c8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d02c      	beq.n	8007c14 <UART_SetConfig+0x15c4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d026      	beq.n	8007c10 <UART_SetConfig+0x15c0>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d020      	beq.n	8007c0c <UART_SetConfig+0x15bc>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b07      	cmp	r3, #7
 8007bd0:	d01a      	beq.n	8007c08 <UART_SetConfig+0x15b8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d014      	beq.n	8007c04 <UART_SetConfig+0x15b4>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	d00e      	beq.n	8007c00 <UART_SetConfig+0x15b0>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b0a      	cmp	r3, #10
 8007be8:	d008      	beq.n	8007bfc <UART_SetConfig+0x15ac>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b0b      	cmp	r3, #11
 8007bf0:	d102      	bne.n	8007bf8 <UART_SetConfig+0x15a8>
 8007bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bf6:	e016      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e014      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	e012      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	e010      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c04:	2320      	movs	r3, #32
 8007c06:	e00e      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	e00c      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c0c:	230c      	movs	r3, #12
 8007c0e:	e00a      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c10:	230a      	movs	r3, #10
 8007c12:	e008      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c14:	2308      	movs	r3, #8
 8007c16:	e006      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c18:	2306      	movs	r3, #6
 8007c1a:	e004      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	e002      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e000      	b.n	8007c26 <UART_SetConfig+0x15d6>
 8007c24:	2301      	movs	r3, #1
 8007c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2c:	005a      	lsls	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c42:	e2b0      	b.n	80081a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c44:	f7fc fee0 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 8007c48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d044      	beq.n	8007cdc <UART_SetConfig+0x168c>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d03e      	beq.n	8007cd8 <UART_SetConfig+0x1688>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d038      	beq.n	8007cd4 <UART_SetConfig+0x1684>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d032      	beq.n	8007cd0 <UART_SetConfig+0x1680>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d02c      	beq.n	8007ccc <UART_SetConfig+0x167c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	d026      	beq.n	8007cc8 <UART_SetConfig+0x1678>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d020      	beq.n	8007cc4 <UART_SetConfig+0x1674>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	2b07      	cmp	r3, #7
 8007c88:	d01a      	beq.n	8007cc0 <UART_SetConfig+0x1670>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d014      	beq.n	8007cbc <UART_SetConfig+0x166c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d00e      	beq.n	8007cb8 <UART_SetConfig+0x1668>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	2b0a      	cmp	r3, #10
 8007ca0:	d008      	beq.n	8007cb4 <UART_SetConfig+0x1664>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	2b0b      	cmp	r3, #11
 8007ca8:	d102      	bne.n	8007cb0 <UART_SetConfig+0x1660>
 8007caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cae:	e016      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e014      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cb4:	2380      	movs	r3, #128	; 0x80
 8007cb6:	e012      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cb8:	2340      	movs	r3, #64	; 0x40
 8007cba:	e010      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	e00e      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	e00c      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	e00a      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cc8:	230a      	movs	r3, #10
 8007cca:	e008      	b.n	8007cde <UART_SetConfig+0x168e>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	e006      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cd0:	2306      	movs	r3, #6
 8007cd2:	e004      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	e002      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e000      	b.n	8007cde <UART_SetConfig+0x168e>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	005a      	lsls	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	441a      	add	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cfa:	e254      	b.n	80081a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfc:	f107 0318 	add.w	r3, r7, #24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fd fd9d 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d044      	beq.n	8007d9a <UART_SetConfig+0x174a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d03e      	beq.n	8007d96 <UART_SetConfig+0x1746>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d038      	beq.n	8007d92 <UART_SetConfig+0x1742>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d032      	beq.n	8007d8e <UART_SetConfig+0x173e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d02c      	beq.n	8007d8a <UART_SetConfig+0x173a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	d026      	beq.n	8007d86 <UART_SetConfig+0x1736>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d020      	beq.n	8007d82 <UART_SetConfig+0x1732>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	d01a      	beq.n	8007d7e <UART_SetConfig+0x172e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d014      	beq.n	8007d7a <UART_SetConfig+0x172a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	d00e      	beq.n	8007d76 <UART_SetConfig+0x1726>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b0a      	cmp	r3, #10
 8007d5e:	d008      	beq.n	8007d72 <UART_SetConfig+0x1722>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b0b      	cmp	r3, #11
 8007d66:	d102      	bne.n	8007d6e <UART_SetConfig+0x171e>
 8007d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d6c:	e016      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e014      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	e012      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	e010      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d7a:	2320      	movs	r3, #32
 8007d7c:	e00e      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d7e:	2310      	movs	r3, #16
 8007d80:	e00c      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d82:	230c      	movs	r3, #12
 8007d84:	e00a      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d86:	230a      	movs	r3, #10
 8007d88:	e008      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	e006      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d8e:	2306      	movs	r3, #6
 8007d90:	e004      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d92:	2304      	movs	r3, #4
 8007d94:	e002      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e000      	b.n	8007d9c <UART_SetConfig+0x174c>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	005a      	lsls	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	441a      	add	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007db6:	e1f6      	b.n	80081a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fd fe8b 	bl	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d044      	beq.n	8007e56 <UART_SetConfig+0x1806>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d03e      	beq.n	8007e52 <UART_SetConfig+0x1802>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d038      	beq.n	8007e4e <UART_SetConfig+0x17fe>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d032      	beq.n	8007e4a <UART_SetConfig+0x17fa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d02c      	beq.n	8007e46 <UART_SetConfig+0x17f6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d026      	beq.n	8007e42 <UART_SetConfig+0x17f2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b06      	cmp	r3, #6
 8007dfa:	d020      	beq.n	8007e3e <UART_SetConfig+0x17ee>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b07      	cmp	r3, #7
 8007e02:	d01a      	beq.n	8007e3a <UART_SetConfig+0x17ea>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d014      	beq.n	8007e36 <UART_SetConfig+0x17e6>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d00e      	beq.n	8007e32 <UART_SetConfig+0x17e2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b0a      	cmp	r3, #10
 8007e1a:	d008      	beq.n	8007e2e <UART_SetConfig+0x17de>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b0b      	cmp	r3, #11
 8007e22:	d102      	bne.n	8007e2a <UART_SetConfig+0x17da>
 8007e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e28:	e016      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e014      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	e012      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	e010      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e36:	2320      	movs	r3, #32
 8007e38:	e00e      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e3a:	2310      	movs	r3, #16
 8007e3c:	e00c      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	e00a      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e42:	230a      	movs	r3, #10
 8007e44:	e008      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e46:	2308      	movs	r3, #8
 8007e48:	e006      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e4a:	2306      	movs	r3, #6
 8007e4c:	e004      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e4e:	2304      	movs	r3, #4
 8007e50:	e002      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e000      	b.n	8007e58 <UART_SetConfig+0x1808>
 8007e56:	2301      	movs	r3, #1
 8007e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5c:	005a      	lsls	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	441a      	add	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e72:	e198      	b.n	80081a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e74:	4b87      	ldr	r3, [pc, #540]	; (8008094 <UART_SetConfig+0x1a44>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d05e      	beq.n	8007f3e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e80:	4b84      	ldr	r3, [pc, #528]	; (8008094 <UART_SetConfig+0x1a44>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a83      	ldr	r2, [pc, #524]	; (8008098 <UART_SetConfig+0x1a48>)
 8007e8c:	40da      	lsrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d044      	beq.n	8007f20 <UART_SetConfig+0x18d0>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d03e      	beq.n	8007f1c <UART_SetConfig+0x18cc>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d038      	beq.n	8007f18 <UART_SetConfig+0x18c8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d032      	beq.n	8007f14 <UART_SetConfig+0x18c4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d02c      	beq.n	8007f10 <UART_SetConfig+0x18c0>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d026      	beq.n	8007f0c <UART_SetConfig+0x18bc>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d020      	beq.n	8007f08 <UART_SetConfig+0x18b8>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	d01a      	beq.n	8007f04 <UART_SetConfig+0x18b4>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d014      	beq.n	8007f00 <UART_SetConfig+0x18b0>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b09      	cmp	r3, #9
 8007edc:	d00e      	beq.n	8007efc <UART_SetConfig+0x18ac>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b0a      	cmp	r3, #10
 8007ee4:	d008      	beq.n	8007ef8 <UART_SetConfig+0x18a8>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	2b0b      	cmp	r3, #11
 8007eec:	d102      	bne.n	8007ef4 <UART_SetConfig+0x18a4>
 8007eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ef2:	e016      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e014      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	e012      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	e010      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f00:	2320      	movs	r3, #32
 8007f02:	e00e      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f04:	2310      	movs	r3, #16
 8007f06:	e00c      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	e00a      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f0c:	230a      	movs	r3, #10
 8007f0e:	e008      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f10:	2308      	movs	r3, #8
 8007f12:	e006      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f14:	2306      	movs	r3, #6
 8007f16:	e004      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	e002      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e000      	b.n	8007f22 <UART_SetConfig+0x18d2>
 8007f20:	2301      	movs	r3, #1
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	005a      	lsls	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	441a      	add	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007f3c:	e133      	b.n	80081a6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d043      	beq.n	8007fce <UART_SetConfig+0x197e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d03d      	beq.n	8007fca <UART_SetConfig+0x197a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d037      	beq.n	8007fc6 <UART_SetConfig+0x1976>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d031      	beq.n	8007fc2 <UART_SetConfig+0x1972>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d02b      	beq.n	8007fbe <UART_SetConfig+0x196e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d025      	beq.n	8007fba <UART_SetConfig+0x196a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b06      	cmp	r3, #6
 8007f74:	d01f      	beq.n	8007fb6 <UART_SetConfig+0x1966>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b07      	cmp	r3, #7
 8007f7c:	d019      	beq.n	8007fb2 <UART_SetConfig+0x1962>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d013      	beq.n	8007fae <UART_SetConfig+0x195e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d00d      	beq.n	8007faa <UART_SetConfig+0x195a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b0a      	cmp	r3, #10
 8007f94:	d007      	beq.n	8007fa6 <UART_SetConfig+0x1956>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b0b      	cmp	r3, #11
 8007f9c:	d101      	bne.n	8007fa2 <UART_SetConfig+0x1952>
 8007f9e:	4b3f      	ldr	r3, [pc, #252]	; (800809c <UART_SetConfig+0x1a4c>)
 8007fa0:	e016      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fa2:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <UART_SetConfig+0x1a50>)
 8007fa4:	e014      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fa6:	4b3f      	ldr	r3, [pc, #252]	; (80080a4 <UART_SetConfig+0x1a54>)
 8007fa8:	e012      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007faa:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <UART_SetConfig+0x1a58>)
 8007fac:	e010      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fae:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <UART_SetConfig+0x1a5c>)
 8007fb0:	e00e      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fb2:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <UART_SetConfig+0x1a60>)
 8007fb4:	e00c      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fb6:	4b3f      	ldr	r3, [pc, #252]	; (80080b4 <UART_SetConfig+0x1a64>)
 8007fb8:	e00a      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <UART_SetConfig+0x1a68>)
 8007fbc:	e008      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fbe:	4b3f      	ldr	r3, [pc, #252]	; (80080bc <UART_SetConfig+0x1a6c>)
 8007fc0:	e006      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fc2:	4b3f      	ldr	r3, [pc, #252]	; (80080c0 <UART_SetConfig+0x1a70>)
 8007fc4:	e004      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fc6:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <UART_SetConfig+0x1a74>)
 8007fc8:	e002      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fca:	4b33      	ldr	r3, [pc, #204]	; (8008098 <UART_SetConfig+0x1a48>)
 8007fcc:	e000      	b.n	8007fd0 <UART_SetConfig+0x1980>
 8007fce:	4b34      	ldr	r3, [pc, #208]	; (80080a0 <UART_SetConfig+0x1a50>)
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	0852      	lsrs	r2, r2, #1
 8007fd6:	441a      	add	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fe4:	e0df      	b.n	80081a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d045      	beq.n	800807a <UART_SetConfig+0x1a2a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d03f      	beq.n	8008076 <UART_SetConfig+0x1a26>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d039      	beq.n	8008072 <UART_SetConfig+0x1a22>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b03      	cmp	r3, #3
 8008004:	d033      	beq.n	800806e <UART_SetConfig+0x1a1e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b04      	cmp	r3, #4
 800800c:	d02d      	beq.n	800806a <UART_SetConfig+0x1a1a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b05      	cmp	r3, #5
 8008014:	d027      	beq.n	8008066 <UART_SetConfig+0x1a16>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b06      	cmp	r3, #6
 800801c:	d021      	beq.n	8008062 <UART_SetConfig+0x1a12>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b07      	cmp	r3, #7
 8008024:	d01b      	beq.n	800805e <UART_SetConfig+0x1a0e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	2b08      	cmp	r3, #8
 800802c:	d015      	beq.n	800805a <UART_SetConfig+0x1a0a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	2b09      	cmp	r3, #9
 8008034:	d00f      	beq.n	8008056 <UART_SetConfig+0x1a06>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	2b0a      	cmp	r3, #10
 800803c:	d008      	beq.n	8008050 <UART_SetConfig+0x1a00>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b0b      	cmp	r3, #11
 8008044:	d102      	bne.n	800804c <UART_SetConfig+0x19fc>
 8008046:	f647 2312 	movw	r3, #31250	; 0x7a12
 800804a:	e017      	b.n	800807c <UART_SetConfig+0x1a2c>
 800804c:	4b18      	ldr	r3, [pc, #96]	; (80080b0 <UART_SetConfig+0x1a60>)
 800804e:	e015      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008050:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008054:	e012      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008056:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <UART_SetConfig+0x1a78>)
 8008058:	e010      	b.n	800807c <UART_SetConfig+0x1a2c>
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <UART_SetConfig+0x1a7c>)
 800805c:	e00e      	b.n	800807c <UART_SetConfig+0x1a2c>
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <UART_SetConfig+0x1a4c>)
 8008060:	e00c      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <UART_SetConfig+0x1a80>)
 8008064:	e00a      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <UART_SetConfig+0x1a84>)
 8008068:	e008      	b.n	800807c <UART_SetConfig+0x1a2c>
 800806a:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <UART_SetConfig+0x1a54>)
 800806c:	e006      	b.n	800807c <UART_SetConfig+0x1a2c>
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <UART_SetConfig+0x1a88>)
 8008070:	e004      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <UART_SetConfig+0x1a58>)
 8008074:	e002      	b.n	800807c <UART_SetConfig+0x1a2c>
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <UART_SetConfig+0x1a5c>)
 8008078:	e000      	b.n	800807c <UART_SetConfig+0x1a2c>
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <UART_SetConfig+0x1a60>)
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6852      	ldr	r2, [r2, #4]
 8008080:	0852      	lsrs	r2, r2, #1
 8008082:	441a      	add	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	fbb2 f3f3 	udiv	r3, r2, r3
 800808c:	b29b      	uxth	r3, r3
 800808e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008090:	e089      	b.n	80081a6 <UART_SetConfig+0x1b56>
 8008092:	bf00      	nop
 8008094:	58024400 	.word	0x58024400
 8008098:	03d09000 	.word	0x03d09000
 800809c:	0007a120 	.word	0x0007a120
 80080a0:	07a12000 	.word	0x07a12000
 80080a4:	000f4240 	.word	0x000f4240
 80080a8:	001e8480 	.word	0x001e8480
 80080ac:	003d0900 	.word	0x003d0900
 80080b0:	007a1200 	.word	0x007a1200
 80080b4:	00a2c2aa 	.word	0x00a2c2aa
 80080b8:	00c35000 	.word	0x00c35000
 80080bc:	00f42400 	.word	0x00f42400
 80080c0:	01458554 	.word	0x01458554
 80080c4:	01e84800 	.word	0x01e84800
 80080c8:	0001e848 	.word	0x0001e848
 80080cc:	0003d090 	.word	0x0003d090
 80080d0:	000a2c2a 	.word	0x000a2c2a
 80080d4:	000c3500 	.word	0x000c3500
 80080d8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d04f      	beq.n	8008184 <UART_SetConfig+0x1b34>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d048      	beq.n	800817e <UART_SetConfig+0x1b2e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d041      	beq.n	8008178 <UART_SetConfig+0x1b28>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d03a      	beq.n	8008172 <UART_SetConfig+0x1b22>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	2b04      	cmp	r3, #4
 8008102:	d033      	beq.n	800816c <UART_SetConfig+0x1b1c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b05      	cmp	r3, #5
 800810a:	d02c      	beq.n	8008166 <UART_SetConfig+0x1b16>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b06      	cmp	r3, #6
 8008112:	d025      	beq.n	8008160 <UART_SetConfig+0x1b10>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b07      	cmp	r3, #7
 800811a:	d01e      	beq.n	800815a <UART_SetConfig+0x1b0a>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b08      	cmp	r3, #8
 8008122:	d017      	beq.n	8008154 <UART_SetConfig+0x1b04>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b09      	cmp	r3, #9
 800812a:	d010      	beq.n	800814e <UART_SetConfig+0x1afe>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b0a      	cmp	r3, #10
 8008132:	d009      	beq.n	8008148 <UART_SetConfig+0x1af8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b0b      	cmp	r3, #11
 800813a:	d102      	bne.n	8008142 <UART_SetConfig+0x1af2>
 800813c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008140:	e022      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008146:	e01f      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800814c:	e01c      	b.n	8008188 <UART_SetConfig+0x1b38>
 800814e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008152:	e019      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008158:	e016      	b.n	8008188 <UART_SetConfig+0x1b38>
 800815a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800815e:	e013      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008160:	f241 5354 	movw	r3, #5460	; 0x1554
 8008164:	e010      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008166:	f641 1398 	movw	r3, #6552	; 0x1998
 800816a:	e00d      	b.n	8008188 <UART_SetConfig+0x1b38>
 800816c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008170:	e00a      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008172:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008176:	e007      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800817c:	e004      	b.n	8008188 <UART_SetConfig+0x1b38>
 800817e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008182:	e001      	b.n	8008188 <UART_SetConfig+0x1b38>
 8008184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6852      	ldr	r2, [r2, #4]
 800818c:	0852      	lsrs	r2, r2, #1
 800818e:	441a      	add	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	b29b      	uxth	r3, r3
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800819c:	e003      	b.n	80081a6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80081a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	2b0f      	cmp	r3, #15
 80081aa:	d916      	bls.n	80081da <UART_SetConfig+0x1b8a>
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b2:	d212      	bcs.n	80081da <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f023 030f 	bic.w	r3, r3, #15
 80081bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081cc:	4313      	orrs	r3, r2
 80081ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081d6:	60da      	str	r2, [r3, #12]
 80081d8:	e3a3      	b.n	8008922 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e0:	e39f      	b.n	8008922 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80081e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	f200 8388 	bhi.w	80088fc <UART_SetConfig+0x22ac>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x1ba4>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	080082f9 	.word	0x080082f9
 80081f8:	080083af 	.word	0x080083af
 80081fc:	080088fd 	.word	0x080088fd
 8008200:	080088fd 	.word	0x080088fd
 8008204:	08008465 	.word	0x08008465
 8008208:	080088fd 	.word	0x080088fd
 800820c:	080088fd 	.word	0x080088fd
 8008210:	080088fd 	.word	0x080088fd
 8008214:	0800851f 	.word	0x0800851f
 8008218:	080088fd 	.word	0x080088fd
 800821c:	080088fd 	.word	0x080088fd
 8008220:	080088fd 	.word	0x080088fd
 8008224:	080088fd 	.word	0x080088fd
 8008228:	080088fd 	.word	0x080088fd
 800822c:	080088fd 	.word	0x080088fd
 8008230:	080088fd 	.word	0x080088fd
 8008234:	080085d9 	.word	0x080085d9
 8008238:	080088fd 	.word	0x080088fd
 800823c:	080088fd 	.word	0x080088fd
 8008240:	080088fd 	.word	0x080088fd
 8008244:	080088fd 	.word	0x080088fd
 8008248:	080088fd 	.word	0x080088fd
 800824c:	080088fd 	.word	0x080088fd
 8008250:	080088fd 	.word	0x080088fd
 8008254:	080088fd 	.word	0x080088fd
 8008258:	080088fd 	.word	0x080088fd
 800825c:	080088fd 	.word	0x080088fd
 8008260:	080088fd 	.word	0x080088fd
 8008264:	080088fd 	.word	0x080088fd
 8008268:	080088fd 	.word	0x080088fd
 800826c:	080088fd 	.word	0x080088fd
 8008270:	080088fd 	.word	0x080088fd
 8008274:	08008749 	.word	0x08008749
 8008278:	080088fd 	.word	0x080088fd
 800827c:	080088fd 	.word	0x080088fd
 8008280:	080088fd 	.word	0x080088fd
 8008284:	080088fd 	.word	0x080088fd
 8008288:	080088fd 	.word	0x080088fd
 800828c:	080088fd 	.word	0x080088fd
 8008290:	080088fd 	.word	0x080088fd
 8008294:	080088fd 	.word	0x080088fd
 8008298:	080088fd 	.word	0x080088fd
 800829c:	080088fd 	.word	0x080088fd
 80082a0:	080088fd 	.word	0x080088fd
 80082a4:	080088fd 	.word	0x080088fd
 80082a8:	080088fd 	.word	0x080088fd
 80082ac:	080088fd 	.word	0x080088fd
 80082b0:	080088fd 	.word	0x080088fd
 80082b4:	080088fd 	.word	0x080088fd
 80082b8:	080088fd 	.word	0x080088fd
 80082bc:	080088fd 	.word	0x080088fd
 80082c0:	080088fd 	.word	0x080088fd
 80082c4:	080088fd 	.word	0x080088fd
 80082c8:	080088fd 	.word	0x080088fd
 80082cc:	080088fd 	.word	0x080088fd
 80082d0:	080088fd 	.word	0x080088fd
 80082d4:	080088fd 	.word	0x080088fd
 80082d8:	080088fd 	.word	0x080088fd
 80082dc:	080088fd 	.word	0x080088fd
 80082e0:	080088fd 	.word	0x080088fd
 80082e4:	080088fd 	.word	0x080088fd
 80082e8:	080088fd 	.word	0x080088fd
 80082ec:	080088fd 	.word	0x080088fd
 80082f0:	080088fd 	.word	0x080088fd
 80082f4:	0800883d 	.word	0x0800883d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f8:	f7fc fb70 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 80082fc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d044      	beq.n	8008390 <UART_SetConfig+0x1d40>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b01      	cmp	r3, #1
 800830c:	d03e      	beq.n	800838c <UART_SetConfig+0x1d3c>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	2b02      	cmp	r3, #2
 8008314:	d038      	beq.n	8008388 <UART_SetConfig+0x1d38>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b03      	cmp	r3, #3
 800831c:	d032      	beq.n	8008384 <UART_SetConfig+0x1d34>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b04      	cmp	r3, #4
 8008324:	d02c      	beq.n	8008380 <UART_SetConfig+0x1d30>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b05      	cmp	r3, #5
 800832c:	d026      	beq.n	800837c <UART_SetConfig+0x1d2c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b06      	cmp	r3, #6
 8008334:	d020      	beq.n	8008378 <UART_SetConfig+0x1d28>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b07      	cmp	r3, #7
 800833c:	d01a      	beq.n	8008374 <UART_SetConfig+0x1d24>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b08      	cmp	r3, #8
 8008344:	d014      	beq.n	8008370 <UART_SetConfig+0x1d20>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b09      	cmp	r3, #9
 800834c:	d00e      	beq.n	800836c <UART_SetConfig+0x1d1c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b0a      	cmp	r3, #10
 8008354:	d008      	beq.n	8008368 <UART_SetConfig+0x1d18>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b0b      	cmp	r3, #11
 800835c:	d102      	bne.n	8008364 <UART_SetConfig+0x1d14>
 800835e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008362:	e016      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008364:	2301      	movs	r3, #1
 8008366:	e014      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	e012      	b.n	8008392 <UART_SetConfig+0x1d42>
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	e010      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008370:	2320      	movs	r3, #32
 8008372:	e00e      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008374:	2310      	movs	r3, #16
 8008376:	e00c      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008378:	230c      	movs	r3, #12
 800837a:	e00a      	b.n	8008392 <UART_SetConfig+0x1d42>
 800837c:	230a      	movs	r3, #10
 800837e:	e008      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008380:	2308      	movs	r3, #8
 8008382:	e006      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008384:	2306      	movs	r3, #6
 8008386:	e004      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008388:	2304      	movs	r3, #4
 800838a:	e002      	b.n	8008392 <UART_SetConfig+0x1d42>
 800838c:	2302      	movs	r3, #2
 800838e:	e000      	b.n	8008392 <UART_SetConfig+0x1d42>
 8008390:	2301      	movs	r3, #1
 8008392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008394:	fbb2 f2f3 	udiv	r2, r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	441a      	add	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083ac:	e2aa      	b.n	8008904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ae:	f7fc fb2b 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 80083b2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d044      	beq.n	8008446 <UART_SetConfig+0x1df6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d03e      	beq.n	8008442 <UART_SetConfig+0x1df2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d038      	beq.n	800843e <UART_SetConfig+0x1dee>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d032      	beq.n	800843a <UART_SetConfig+0x1dea>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d02c      	beq.n	8008436 <UART_SetConfig+0x1de6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d026      	beq.n	8008432 <UART_SetConfig+0x1de2>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	d020      	beq.n	800842e <UART_SetConfig+0x1dde>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b07      	cmp	r3, #7
 80083f2:	d01a      	beq.n	800842a <UART_SetConfig+0x1dda>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	d014      	beq.n	8008426 <UART_SetConfig+0x1dd6>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b09      	cmp	r3, #9
 8008402:	d00e      	beq.n	8008422 <UART_SetConfig+0x1dd2>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b0a      	cmp	r3, #10
 800840a:	d008      	beq.n	800841e <UART_SetConfig+0x1dce>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b0b      	cmp	r3, #11
 8008412:	d102      	bne.n	800841a <UART_SetConfig+0x1dca>
 8008414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008418:	e016      	b.n	8008448 <UART_SetConfig+0x1df8>
 800841a:	2301      	movs	r3, #1
 800841c:	e014      	b.n	8008448 <UART_SetConfig+0x1df8>
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	e012      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	e010      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008426:	2320      	movs	r3, #32
 8008428:	e00e      	b.n	8008448 <UART_SetConfig+0x1df8>
 800842a:	2310      	movs	r3, #16
 800842c:	e00c      	b.n	8008448 <UART_SetConfig+0x1df8>
 800842e:	230c      	movs	r3, #12
 8008430:	e00a      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008432:	230a      	movs	r3, #10
 8008434:	e008      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008436:	2308      	movs	r3, #8
 8008438:	e006      	b.n	8008448 <UART_SetConfig+0x1df8>
 800843a:	2306      	movs	r3, #6
 800843c:	e004      	b.n	8008448 <UART_SetConfig+0x1df8>
 800843e:	2304      	movs	r3, #4
 8008440:	e002      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008442:	2302      	movs	r3, #2
 8008444:	e000      	b.n	8008448 <UART_SetConfig+0x1df8>
 8008446:	2301      	movs	r3, #1
 8008448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844a:	fbb2 f2f3 	udiv	r2, r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	085b      	lsrs	r3, r3, #1
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	fbb2 f3f3 	udiv	r3, r2, r3
 800845e:	b29b      	uxth	r3, r3
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008462:	e24f      	b.n	8008904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008464:	f107 0318 	add.w	r3, r7, #24
 8008468:	4618      	mov	r0, r3
 800846a:	f7fd f9e9 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d044      	beq.n	8008502 <UART_SetConfig+0x1eb2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b01      	cmp	r3, #1
 800847e:	d03e      	beq.n	80084fe <UART_SetConfig+0x1eae>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b02      	cmp	r3, #2
 8008486:	d038      	beq.n	80084fa <UART_SetConfig+0x1eaa>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b03      	cmp	r3, #3
 800848e:	d032      	beq.n	80084f6 <UART_SetConfig+0x1ea6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b04      	cmp	r3, #4
 8008496:	d02c      	beq.n	80084f2 <UART_SetConfig+0x1ea2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b05      	cmp	r3, #5
 800849e:	d026      	beq.n	80084ee <UART_SetConfig+0x1e9e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d020      	beq.n	80084ea <UART_SetConfig+0x1e9a>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d01a      	beq.n	80084e6 <UART_SetConfig+0x1e96>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d014      	beq.n	80084e2 <UART_SetConfig+0x1e92>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d00e      	beq.n	80084de <UART_SetConfig+0x1e8e>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d008      	beq.n	80084da <UART_SetConfig+0x1e8a>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b0b      	cmp	r3, #11
 80084ce:	d102      	bne.n	80084d6 <UART_SetConfig+0x1e86>
 80084d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084d4:	e016      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e014      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	e012      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	e010      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084e2:	2320      	movs	r3, #32
 80084e4:	e00e      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084e6:	2310      	movs	r3, #16
 80084e8:	e00c      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084ea:	230c      	movs	r3, #12
 80084ec:	e00a      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084ee:	230a      	movs	r3, #10
 80084f0:	e008      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084f2:	2308      	movs	r3, #8
 80084f4:	e006      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084f6:	2306      	movs	r3, #6
 80084f8:	e004      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084fa:	2304      	movs	r3, #4
 80084fc:	e002      	b.n	8008504 <UART_SetConfig+0x1eb4>
 80084fe:	2302      	movs	r3, #2
 8008500:	e000      	b.n	8008504 <UART_SetConfig+0x1eb4>
 8008502:	2301      	movs	r3, #1
 8008504:	fbb2 f2f3 	udiv	r2, r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	441a      	add	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	fbb2 f3f3 	udiv	r3, r2, r3
 8008518:	b29b      	uxth	r3, r3
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800851c:	e1f2      	b.n	8008904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800851e:	f107 030c 	add.w	r3, r7, #12
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd fad8 	bl	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d044      	beq.n	80085bc <UART_SetConfig+0x1f6c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b01      	cmp	r3, #1
 8008538:	d03e      	beq.n	80085b8 <UART_SetConfig+0x1f68>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b02      	cmp	r3, #2
 8008540:	d038      	beq.n	80085b4 <UART_SetConfig+0x1f64>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b03      	cmp	r3, #3
 8008548:	d032      	beq.n	80085b0 <UART_SetConfig+0x1f60>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b04      	cmp	r3, #4
 8008550:	d02c      	beq.n	80085ac <UART_SetConfig+0x1f5c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b05      	cmp	r3, #5
 8008558:	d026      	beq.n	80085a8 <UART_SetConfig+0x1f58>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b06      	cmp	r3, #6
 8008560:	d020      	beq.n	80085a4 <UART_SetConfig+0x1f54>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b07      	cmp	r3, #7
 8008568:	d01a      	beq.n	80085a0 <UART_SetConfig+0x1f50>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b08      	cmp	r3, #8
 8008570:	d014      	beq.n	800859c <UART_SetConfig+0x1f4c>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b09      	cmp	r3, #9
 8008578:	d00e      	beq.n	8008598 <UART_SetConfig+0x1f48>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d008      	beq.n	8008594 <UART_SetConfig+0x1f44>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b0b      	cmp	r3, #11
 8008588:	d102      	bne.n	8008590 <UART_SetConfig+0x1f40>
 800858a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800858e:	e016      	b.n	80085be <UART_SetConfig+0x1f6e>
 8008590:	2301      	movs	r3, #1
 8008592:	e014      	b.n	80085be <UART_SetConfig+0x1f6e>
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	e012      	b.n	80085be <UART_SetConfig+0x1f6e>
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	e010      	b.n	80085be <UART_SetConfig+0x1f6e>
 800859c:	2320      	movs	r3, #32
 800859e:	e00e      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085a0:	2310      	movs	r3, #16
 80085a2:	e00c      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085a4:	230c      	movs	r3, #12
 80085a6:	e00a      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085a8:	230a      	movs	r3, #10
 80085aa:	e008      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085ac:	2308      	movs	r3, #8
 80085ae:	e006      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085b0:	2306      	movs	r3, #6
 80085b2:	e004      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085b4:	2304      	movs	r3, #4
 80085b6:	e002      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e000      	b.n	80085be <UART_SetConfig+0x1f6e>
 80085bc:	2301      	movs	r3, #1
 80085be:	fbb2 f2f3 	udiv	r2, r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	085b      	lsrs	r3, r3, #1
 80085c8:	441a      	add	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085d6:	e195      	b.n	8008904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d8:	4b87      	ldr	r3, [pc, #540]	; (80087f8 <UART_SetConfig+0x21a8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d05d      	beq.n	80086a0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e4:	4b84      	ldr	r3, [pc, #528]	; (80087f8 <UART_SetConfig+0x21a8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	08db      	lsrs	r3, r3, #3
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	4a83      	ldr	r2, [pc, #524]	; (80087fc <UART_SetConfig+0x21ac>)
 80085f0:	40da      	lsrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d044      	beq.n	8008684 <UART_SetConfig+0x2034>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d03e      	beq.n	8008680 <UART_SetConfig+0x2030>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b02      	cmp	r3, #2
 8008608:	d038      	beq.n	800867c <UART_SetConfig+0x202c>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b03      	cmp	r3, #3
 8008610:	d032      	beq.n	8008678 <UART_SetConfig+0x2028>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b04      	cmp	r3, #4
 8008618:	d02c      	beq.n	8008674 <UART_SetConfig+0x2024>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	2b05      	cmp	r3, #5
 8008620:	d026      	beq.n	8008670 <UART_SetConfig+0x2020>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	2b06      	cmp	r3, #6
 8008628:	d020      	beq.n	800866c <UART_SetConfig+0x201c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	2b07      	cmp	r3, #7
 8008630:	d01a      	beq.n	8008668 <UART_SetConfig+0x2018>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b08      	cmp	r3, #8
 8008638:	d014      	beq.n	8008664 <UART_SetConfig+0x2014>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2b09      	cmp	r3, #9
 8008640:	d00e      	beq.n	8008660 <UART_SetConfig+0x2010>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	2b0a      	cmp	r3, #10
 8008648:	d008      	beq.n	800865c <UART_SetConfig+0x200c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d102      	bne.n	8008658 <UART_SetConfig+0x2008>
 8008652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008656:	e016      	b.n	8008686 <UART_SetConfig+0x2036>
 8008658:	2301      	movs	r3, #1
 800865a:	e014      	b.n	8008686 <UART_SetConfig+0x2036>
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	e012      	b.n	8008686 <UART_SetConfig+0x2036>
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	e010      	b.n	8008686 <UART_SetConfig+0x2036>
 8008664:	2320      	movs	r3, #32
 8008666:	e00e      	b.n	8008686 <UART_SetConfig+0x2036>
 8008668:	2310      	movs	r3, #16
 800866a:	e00c      	b.n	8008686 <UART_SetConfig+0x2036>
 800866c:	230c      	movs	r3, #12
 800866e:	e00a      	b.n	8008686 <UART_SetConfig+0x2036>
 8008670:	230a      	movs	r3, #10
 8008672:	e008      	b.n	8008686 <UART_SetConfig+0x2036>
 8008674:	2308      	movs	r3, #8
 8008676:	e006      	b.n	8008686 <UART_SetConfig+0x2036>
 8008678:	2306      	movs	r3, #6
 800867a:	e004      	b.n	8008686 <UART_SetConfig+0x2036>
 800867c:	2304      	movs	r3, #4
 800867e:	e002      	b.n	8008686 <UART_SetConfig+0x2036>
 8008680:	2302      	movs	r3, #2
 8008682:	e000      	b.n	8008686 <UART_SetConfig+0x2036>
 8008684:	2301      	movs	r3, #1
 8008686:	fbb2 f2f3 	udiv	r2, r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	441a      	add	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	fbb2 f3f3 	udiv	r3, r2, r3
 800869a:	b29b      	uxth	r3, r3
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800869e:	e131      	b.n	8008904 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d043      	beq.n	8008730 <UART_SetConfig+0x20e0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d03d      	beq.n	800872c <UART_SetConfig+0x20dc>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d037      	beq.n	8008728 <UART_SetConfig+0x20d8>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d031      	beq.n	8008724 <UART_SetConfig+0x20d4>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d02b      	beq.n	8008720 <UART_SetConfig+0x20d0>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b05      	cmp	r3, #5
 80086ce:	d025      	beq.n	800871c <UART_SetConfig+0x20cc>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d01f      	beq.n	8008718 <UART_SetConfig+0x20c8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b07      	cmp	r3, #7
 80086de:	d019      	beq.n	8008714 <UART_SetConfig+0x20c4>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d013      	beq.n	8008710 <UART_SetConfig+0x20c0>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d00d      	beq.n	800870c <UART_SetConfig+0x20bc>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b0a      	cmp	r3, #10
 80086f6:	d007      	beq.n	8008708 <UART_SetConfig+0x20b8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b0b      	cmp	r3, #11
 80086fe:	d101      	bne.n	8008704 <UART_SetConfig+0x20b4>
 8008700:	4b3f      	ldr	r3, [pc, #252]	; (8008800 <UART_SetConfig+0x21b0>)
 8008702:	e016      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008704:	4b3d      	ldr	r3, [pc, #244]	; (80087fc <UART_SetConfig+0x21ac>)
 8008706:	e014      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008708:	4b3e      	ldr	r3, [pc, #248]	; (8008804 <UART_SetConfig+0x21b4>)
 800870a:	e012      	b.n	8008732 <UART_SetConfig+0x20e2>
 800870c:	4b3e      	ldr	r3, [pc, #248]	; (8008808 <UART_SetConfig+0x21b8>)
 800870e:	e010      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008710:	4b3e      	ldr	r3, [pc, #248]	; (800880c <UART_SetConfig+0x21bc>)
 8008712:	e00e      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008714:	4b3e      	ldr	r3, [pc, #248]	; (8008810 <UART_SetConfig+0x21c0>)
 8008716:	e00c      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008718:	4b3e      	ldr	r3, [pc, #248]	; (8008814 <UART_SetConfig+0x21c4>)
 800871a:	e00a      	b.n	8008732 <UART_SetConfig+0x20e2>
 800871c:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <UART_SetConfig+0x21c8>)
 800871e:	e008      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008720:	4b3e      	ldr	r3, [pc, #248]	; (800881c <UART_SetConfig+0x21cc>)
 8008722:	e006      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008724:	4b3e      	ldr	r3, [pc, #248]	; (8008820 <UART_SetConfig+0x21d0>)
 8008726:	e004      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008728:	4b3e      	ldr	r3, [pc, #248]	; (8008824 <UART_SetConfig+0x21d4>)
 800872a:	e002      	b.n	8008732 <UART_SetConfig+0x20e2>
 800872c:	4b3e      	ldr	r3, [pc, #248]	; (8008828 <UART_SetConfig+0x21d8>)
 800872e:	e000      	b.n	8008732 <UART_SetConfig+0x20e2>
 8008730:	4b32      	ldr	r3, [pc, #200]	; (80087fc <UART_SetConfig+0x21ac>)
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6852      	ldr	r2, [r2, #4]
 8008736:	0852      	lsrs	r2, r2, #1
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008746:	e0dd      	b.n	8008904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d046      	beq.n	80087de <UART_SetConfig+0x218e>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b01      	cmp	r3, #1
 8008756:	d040      	beq.n	80087da <UART_SetConfig+0x218a>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b02      	cmp	r3, #2
 800875e:	d03a      	beq.n	80087d6 <UART_SetConfig+0x2186>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b03      	cmp	r3, #3
 8008766:	d034      	beq.n	80087d2 <UART_SetConfig+0x2182>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b04      	cmp	r3, #4
 800876e:	d02e      	beq.n	80087ce <UART_SetConfig+0x217e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b05      	cmp	r3, #5
 8008776:	d028      	beq.n	80087ca <UART_SetConfig+0x217a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b06      	cmp	r3, #6
 800877e:	d022      	beq.n	80087c6 <UART_SetConfig+0x2176>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b07      	cmp	r3, #7
 8008786:	d01c      	beq.n	80087c2 <UART_SetConfig+0x2172>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b08      	cmp	r3, #8
 800878e:	d016      	beq.n	80087be <UART_SetConfig+0x216e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b09      	cmp	r3, #9
 8008796:	d00f      	beq.n	80087b8 <UART_SetConfig+0x2168>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b0a      	cmp	r3, #10
 800879e:	d008      	beq.n	80087b2 <UART_SetConfig+0x2162>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b0b      	cmp	r3, #11
 80087a6:	d102      	bne.n	80087ae <UART_SetConfig+0x215e>
 80087a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80087ac:	e018      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087ae:	4b18      	ldr	r3, [pc, #96]	; (8008810 <UART_SetConfig+0x21c0>)
 80087b0:	e016      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80087b6:	e013      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80087bc:	e010      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087be:	4b1b      	ldr	r3, [pc, #108]	; (800882c <UART_SetConfig+0x21dc>)
 80087c0:	e00e      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087c2:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <UART_SetConfig+0x21b0>)
 80087c4:	e00c      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <UART_SetConfig+0x21e0>)
 80087c8:	e00a      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087ca:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <UART_SetConfig+0x21e4>)
 80087cc:	e008      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087ce:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <UART_SetConfig+0x21b4>)
 80087d0:	e006      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087d2:	4b19      	ldr	r3, [pc, #100]	; (8008838 <UART_SetConfig+0x21e8>)
 80087d4:	e004      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <UART_SetConfig+0x21b8>)
 80087d8:	e002      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <UART_SetConfig+0x21bc>)
 80087dc:	e000      	b.n	80087e0 <UART_SetConfig+0x2190>
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <UART_SetConfig+0x21c0>)
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6852      	ldr	r2, [r2, #4]
 80087e4:	0852      	lsrs	r2, r2, #1
 80087e6:	441a      	add	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087f4:	e086      	b.n	8008904 <UART_SetConfig+0x22b4>
 80087f6:	bf00      	nop
 80087f8:	58024400 	.word	0x58024400
 80087fc:	03d09000 	.word	0x03d09000
 8008800:	0003d090 	.word	0x0003d090
 8008804:	0007a120 	.word	0x0007a120
 8008808:	000f4240 	.word	0x000f4240
 800880c:	001e8480 	.word	0x001e8480
 8008810:	003d0900 	.word	0x003d0900
 8008814:	00516155 	.word	0x00516155
 8008818:	0061a800 	.word	0x0061a800
 800881c:	007a1200 	.word	0x007a1200
 8008820:	00a2c2aa 	.word	0x00a2c2aa
 8008824:	00f42400 	.word	0x00f42400
 8008828:	01e84800 	.word	0x01e84800
 800882c:	0001e848 	.word	0x0001e848
 8008830:	00051615 	.word	0x00051615
 8008834:	00061a80 	.word	0x00061a80
 8008838:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d04e      	beq.n	80088e2 <UART_SetConfig+0x2292>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b01      	cmp	r3, #1
 800884a:	d047      	beq.n	80088dc <UART_SetConfig+0x228c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b02      	cmp	r3, #2
 8008852:	d040      	beq.n	80088d6 <UART_SetConfig+0x2286>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b03      	cmp	r3, #3
 800885a:	d039      	beq.n	80088d0 <UART_SetConfig+0x2280>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b04      	cmp	r3, #4
 8008862:	d032      	beq.n	80088ca <UART_SetConfig+0x227a>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b05      	cmp	r3, #5
 800886a:	d02b      	beq.n	80088c4 <UART_SetConfig+0x2274>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b06      	cmp	r3, #6
 8008872:	d024      	beq.n	80088be <UART_SetConfig+0x226e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b07      	cmp	r3, #7
 800887a:	d01d      	beq.n	80088b8 <UART_SetConfig+0x2268>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b08      	cmp	r3, #8
 8008882:	d016      	beq.n	80088b2 <UART_SetConfig+0x2262>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b09      	cmp	r3, #9
 800888a:	d00f      	beq.n	80088ac <UART_SetConfig+0x225c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b0a      	cmp	r3, #10
 8008892:	d008      	beq.n	80088a6 <UART_SetConfig+0x2256>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b0b      	cmp	r3, #11
 800889a:	d101      	bne.n	80088a0 <UART_SetConfig+0x2250>
 800889c:	2380      	movs	r3, #128	; 0x80
 800889e:	e022      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a4:	e01f      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088aa:	e01c      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b0:	e019      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b6:	e016      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088bc:	e013      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80088c2:	e010      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80088c8:	e00d      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ce:	e00a      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80088d4:	e007      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088da:	e004      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088e0:	e001      	b.n	80088e6 <UART_SetConfig+0x2296>
 80088e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6852      	ldr	r2, [r2, #4]
 80088ea:	0852      	lsrs	r2, r2, #1
 80088ec:	441a      	add	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088fa:	e003      	b.n	8008904 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d908      	bls.n	800891c <UART_SetConfig+0x22cc>
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008910:	d204      	bcs.n	800891c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	e002      	b.n	8008922 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800893e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008942:	4618      	mov	r0, r3
 8008944:	3740      	adds	r7, #64	; 0x40
 8008946:	46bd      	mov	sp, r7
 8008948:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800894c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01a      	beq.n	8008a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a4a:	d10a      	bne.n	8008a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af02      	add	r7, sp, #8
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008aa0:	f7f8 ffa4 	bl	80019ec <HAL_GetTick>
 8008aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d10e      	bne.n	8008ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f82c 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e022      	b.n	8008b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d10e      	bne.n	8008afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f816 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e00c      	b.n	8008b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b30:	e062      	b.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d05e      	beq.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b3a:	f7f8 ff57 	bl	80019ec <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d302      	bcc.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d11d      	bne.n	8008b8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 0201 	bic.w	r2, r2, #1
 8008b6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e045      	b.n	8008c18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d02e      	beq.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba8:	d126      	bne.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bb2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e00f      	b.n	8008c18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69da      	ldr	r2, [r3, #28]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4013      	ands	r3, r2
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	bf0c      	ite	eq
 8008c08:	2301      	moveq	r3, #1
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d08d      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6899      	ldr	r1, [r3, #8]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <UART_EndRxTransfer+0x44>)
 8008c44:	400b      	ands	r3, r1
 8008c46:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	effffffe 	.word	0xeffffffe

08008c68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7fd fcd6 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008caa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fd fcb2 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_UARTEx_EnableFifoMode+0x16>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e02b      	b.n	8008d72 <HAL_UARTEx_EnableFifoMode+0x6e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2224      	movs	r2, #36	; 0x24
 8008d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f88a 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e02d      	b.n	8008dee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2224      	movs	r2, #36	; 0x24
 8008d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f850 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e02d      	b.n	8008e6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2224      	movs	r2, #36	; 0x24
 8008e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f812 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b089      	sub	sp, #36	; 0x24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e7c:	4a2f      	ldr	r2, [pc, #188]	; (8008f3c <UARTEx_SetNbDataToProcess+0xc8>)
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e86:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e8a:	4a2d      	ldr	r2, [pc, #180]	; (8008f40 <UARTEx_SetNbDataToProcess+0xcc>)
 8008e8c:	f107 030c 	add.w	r3, r7, #12
 8008e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e94:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d108      	bne.n	8008eb2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008eb0:	e03d      	b.n	8008f2e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	0e5b      	lsrs	r3, r3, #25
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	0f5b      	lsrs	r3, r3, #29
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008eda:	7fbb      	ldrb	r3, [r7, #30]
 8008edc:	7f3a      	ldrb	r2, [r7, #28]
 8008ede:	f107 0120 	add.w	r1, r7, #32
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	7f3a      	ldrb	r2, [r7, #28]
 8008eee:	f107 0120 	add.w	r1, r7, #32
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008f04:	7ffb      	ldrb	r3, [r7, #31]
 8008f06:	7f7a      	ldrb	r2, [r7, #29]
 8008f08:	f107 0120 	add.w	r1, r7, #32
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008f12:	fb02 f303 	mul.w	r3, r2, r3
 8008f16:	7f7a      	ldrb	r2, [r7, #29]
 8008f18:	f107 0120 	add.w	r1, r7, #32
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f2e:	bf00      	nop
 8008f30:	3724      	adds	r7, #36	; 0x24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	0800a1dc 	.word	0x0800a1dc
 8008f40:	0800a1e4 	.word	0x0800a1e4

08008f44 <__errno>:
 8008f44:	4b01      	ldr	r3, [pc, #4]	; (8008f4c <__errno+0x8>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	24000090 	.word	0x24000090

08008f50 <__libc_init_array>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4e0d      	ldr	r6, [pc, #52]	; (8008f88 <__libc_init_array+0x38>)
 8008f54:	4c0d      	ldr	r4, [pc, #52]	; (8008f8c <__libc_init_array+0x3c>)
 8008f56:	1ba4      	subs	r4, r4, r6
 8008f58:	10a4      	asrs	r4, r4, #2
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	42a5      	cmp	r5, r4
 8008f5e:	d109      	bne.n	8008f74 <__libc_init_array+0x24>
 8008f60:	4e0b      	ldr	r6, [pc, #44]	; (8008f90 <__libc_init_array+0x40>)
 8008f62:	4c0c      	ldr	r4, [pc, #48]	; (8008f94 <__libc_init_array+0x44>)
 8008f64:	f000 ffb2 	bl	8009ecc <_init>
 8008f68:	1ba4      	subs	r4, r4, r6
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	42a5      	cmp	r5, r4
 8008f70:	d105      	bne.n	8008f7e <__libc_init_array+0x2e>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f78:	4798      	blx	r3
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	e7ee      	b.n	8008f5c <__libc_init_array+0xc>
 8008f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f82:	4798      	blx	r3
 8008f84:	3501      	adds	r5, #1
 8008f86:	e7f2      	b.n	8008f6e <__libc_init_array+0x1e>
 8008f88:	0800a4fc 	.word	0x0800a4fc
 8008f8c:	0800a4fc 	.word	0x0800a4fc
 8008f90:	0800a4fc 	.word	0x0800a4fc
 8008f94:	0800a500 	.word	0x0800a500

08008f98 <memset>:
 8008f98:	4402      	add	r2, r0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d100      	bne.n	8008fa2 <memset+0xa>
 8008fa0:	4770      	bx	lr
 8008fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa6:	e7f9      	b.n	8008f9c <memset+0x4>

08008fa8 <iprintf>:
 8008fa8:	b40f      	push	{r0, r1, r2, r3}
 8008faa:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <iprintf+0x2c>)
 8008fac:	b513      	push	{r0, r1, r4, lr}
 8008fae:	681c      	ldr	r4, [r3, #0]
 8008fb0:	b124      	cbz	r4, 8008fbc <iprintf+0x14>
 8008fb2:	69a3      	ldr	r3, [r4, #24]
 8008fb4:	b913      	cbnz	r3, 8008fbc <iprintf+0x14>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fa36 	bl	8009428 <__sinit>
 8008fbc:	ab05      	add	r3, sp, #20
 8008fbe:	9a04      	ldr	r2, [sp, #16]
 8008fc0:	68a1      	ldr	r1, [r4, #8]
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fbef 	bl	80097a8 <_vfiprintf_r>
 8008fca:	b002      	add	sp, #8
 8008fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd0:	b004      	add	sp, #16
 8008fd2:	4770      	bx	lr
 8008fd4:	24000090 	.word	0x24000090

08008fd8 <putchar>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <putchar+0x24>)
 8008fdc:	681c      	ldr	r4, [r3, #0]
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b124      	cbz	r4, 8008fec <putchar+0x14>
 8008fe2:	69a3      	ldr	r3, [r4, #24]
 8008fe4:	b913      	cbnz	r3, 8008fec <putchar+0x14>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fa1e 	bl	8009428 <__sinit>
 8008fec:	68a2      	ldr	r2, [r4, #8]
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff6:	f000 be75 	b.w	8009ce4 <_putc_r>
 8008ffa:	bf00      	nop
 8008ffc:	24000090 	.word	0x24000090

08009000 <_puts_r>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	460e      	mov	r6, r1
 8009004:	4605      	mov	r5, r0
 8009006:	b118      	cbz	r0, 8009010 <_puts_r+0x10>
 8009008:	6983      	ldr	r3, [r0, #24]
 800900a:	b90b      	cbnz	r3, 8009010 <_puts_r+0x10>
 800900c:	f000 fa0c 	bl	8009428 <__sinit>
 8009010:	69ab      	ldr	r3, [r5, #24]
 8009012:	68ac      	ldr	r4, [r5, #8]
 8009014:	b913      	cbnz	r3, 800901c <_puts_r+0x1c>
 8009016:	4628      	mov	r0, r5
 8009018:	f000 fa06 	bl	8009428 <__sinit>
 800901c:	4b23      	ldr	r3, [pc, #140]	; (80090ac <_puts_r+0xac>)
 800901e:	429c      	cmp	r4, r3
 8009020:	d117      	bne.n	8009052 <_puts_r+0x52>
 8009022:	686c      	ldr	r4, [r5, #4]
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	071b      	lsls	r3, r3, #28
 8009028:	d51d      	bpl.n	8009066 <_puts_r+0x66>
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	b1db      	cbz	r3, 8009066 <_puts_r+0x66>
 800902e:	3e01      	subs	r6, #1
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009036:	3b01      	subs	r3, #1
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	b9e9      	cbnz	r1, 8009078 <_puts_r+0x78>
 800903c:	2b00      	cmp	r3, #0
 800903e:	da2e      	bge.n	800909e <_puts_r+0x9e>
 8009040:	4622      	mov	r2, r4
 8009042:	210a      	movs	r1, #10
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f83f 	bl	80090c8 <__swbuf_r>
 800904a:	3001      	adds	r0, #1
 800904c:	d011      	beq.n	8009072 <_puts_r+0x72>
 800904e:	200a      	movs	r0, #10
 8009050:	e011      	b.n	8009076 <_puts_r+0x76>
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <_puts_r+0xb0>)
 8009054:	429c      	cmp	r4, r3
 8009056:	d101      	bne.n	800905c <_puts_r+0x5c>
 8009058:	68ac      	ldr	r4, [r5, #8]
 800905a:	e7e3      	b.n	8009024 <_puts_r+0x24>
 800905c:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <_puts_r+0xb4>)
 800905e:	429c      	cmp	r4, r3
 8009060:	bf08      	it	eq
 8009062:	68ec      	ldreq	r4, [r5, #12]
 8009064:	e7de      	b.n	8009024 <_puts_r+0x24>
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 f87f 	bl	800916c <__swsetup_r>
 800906e:	2800      	cmp	r0, #0
 8009070:	d0dd      	beq.n	800902e <_puts_r+0x2e>
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	2b00      	cmp	r3, #0
 800907a:	da04      	bge.n	8009086 <_puts_r+0x86>
 800907c:	69a2      	ldr	r2, [r4, #24]
 800907e:	429a      	cmp	r2, r3
 8009080:	dc06      	bgt.n	8009090 <_puts_r+0x90>
 8009082:	290a      	cmp	r1, #10
 8009084:	d004      	beq.n	8009090 <_puts_r+0x90>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	6022      	str	r2, [r4, #0]
 800908c:	7019      	strb	r1, [r3, #0]
 800908e:	e7cf      	b.n	8009030 <_puts_r+0x30>
 8009090:	4622      	mov	r2, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f818 	bl	80090c8 <__swbuf_r>
 8009098:	3001      	adds	r0, #1
 800909a:	d1c9      	bne.n	8009030 <_puts_r+0x30>
 800909c:	e7e9      	b.n	8009072 <_puts_r+0x72>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	200a      	movs	r0, #10
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	7018      	strb	r0, [r3, #0]
 80090a8:	e7e5      	b.n	8009076 <_puts_r+0x76>
 80090aa:	bf00      	nop
 80090ac:	0800a480 	.word	0x0800a480
 80090b0:	0800a4a0 	.word	0x0800a4a0
 80090b4:	0800a460 	.word	0x0800a460

080090b8 <puts>:
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <puts+0xc>)
 80090ba:	4601      	mov	r1, r0
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	f7ff bf9f 	b.w	8009000 <_puts_r>
 80090c2:	bf00      	nop
 80090c4:	24000090 	.word	0x24000090

080090c8 <__swbuf_r>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	460e      	mov	r6, r1
 80090cc:	4614      	mov	r4, r2
 80090ce:	4605      	mov	r5, r0
 80090d0:	b118      	cbz	r0, 80090da <__swbuf_r+0x12>
 80090d2:	6983      	ldr	r3, [r0, #24]
 80090d4:	b90b      	cbnz	r3, 80090da <__swbuf_r+0x12>
 80090d6:	f000 f9a7 	bl	8009428 <__sinit>
 80090da:	4b21      	ldr	r3, [pc, #132]	; (8009160 <__swbuf_r+0x98>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	d12a      	bne.n	8009136 <__swbuf_r+0x6e>
 80090e0:	686c      	ldr	r4, [r5, #4]
 80090e2:	69a3      	ldr	r3, [r4, #24]
 80090e4:	60a3      	str	r3, [r4, #8]
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	071a      	lsls	r2, r3, #28
 80090ea:	d52e      	bpl.n	800914a <__swbuf_r+0x82>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	b363      	cbz	r3, 800914a <__swbuf_r+0x82>
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	6820      	ldr	r0, [r4, #0]
 80090f4:	1ac0      	subs	r0, r0, r3
 80090f6:	6963      	ldr	r3, [r4, #20]
 80090f8:	b2f6      	uxtb	r6, r6
 80090fa:	4283      	cmp	r3, r0
 80090fc:	4637      	mov	r7, r6
 80090fe:	dc04      	bgt.n	800910a <__swbuf_r+0x42>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f926 	bl	8009354 <_fflush_r>
 8009108:	bb28      	cbnz	r0, 8009156 <__swbuf_r+0x8e>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	701e      	strb	r6, [r3, #0]
 8009118:	6963      	ldr	r3, [r4, #20]
 800911a:	3001      	adds	r0, #1
 800911c:	4283      	cmp	r3, r0
 800911e:	d004      	beq.n	800912a <__swbuf_r+0x62>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	07db      	lsls	r3, r3, #31
 8009124:	d519      	bpl.n	800915a <__swbuf_r+0x92>
 8009126:	2e0a      	cmp	r6, #10
 8009128:	d117      	bne.n	800915a <__swbuf_r+0x92>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f911 	bl	8009354 <_fflush_r>
 8009132:	b190      	cbz	r0, 800915a <__swbuf_r+0x92>
 8009134:	e00f      	b.n	8009156 <__swbuf_r+0x8e>
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <__swbuf_r+0x9c>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d101      	bne.n	8009140 <__swbuf_r+0x78>
 800913c:	68ac      	ldr	r4, [r5, #8]
 800913e:	e7d0      	b.n	80090e2 <__swbuf_r+0x1a>
 8009140:	4b09      	ldr	r3, [pc, #36]	; (8009168 <__swbuf_r+0xa0>)
 8009142:	429c      	cmp	r4, r3
 8009144:	bf08      	it	eq
 8009146:	68ec      	ldreq	r4, [r5, #12]
 8009148:	e7cb      	b.n	80090e2 <__swbuf_r+0x1a>
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f80d 	bl	800916c <__swsetup_r>
 8009152:	2800      	cmp	r0, #0
 8009154:	d0cc      	beq.n	80090f0 <__swbuf_r+0x28>
 8009156:	f04f 37ff 	mov.w	r7, #4294967295
 800915a:	4638      	mov	r0, r7
 800915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915e:	bf00      	nop
 8009160:	0800a480 	.word	0x0800a480
 8009164:	0800a4a0 	.word	0x0800a4a0
 8009168:	0800a460 	.word	0x0800a460

0800916c <__swsetup_r>:
 800916c:	4b32      	ldr	r3, [pc, #200]	; (8009238 <__swsetup_r+0xcc>)
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	4606      	mov	r6, r0
 8009174:	460c      	mov	r4, r1
 8009176:	b125      	cbz	r5, 8009182 <__swsetup_r+0x16>
 8009178:	69ab      	ldr	r3, [r5, #24]
 800917a:	b913      	cbnz	r3, 8009182 <__swsetup_r+0x16>
 800917c:	4628      	mov	r0, r5
 800917e:	f000 f953 	bl	8009428 <__sinit>
 8009182:	4b2e      	ldr	r3, [pc, #184]	; (800923c <__swsetup_r+0xd0>)
 8009184:	429c      	cmp	r4, r3
 8009186:	d10f      	bne.n	80091a8 <__swsetup_r+0x3c>
 8009188:	686c      	ldr	r4, [r5, #4]
 800918a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918e:	b29a      	uxth	r2, r3
 8009190:	0715      	lsls	r5, r2, #28
 8009192:	d42c      	bmi.n	80091ee <__swsetup_r+0x82>
 8009194:	06d0      	lsls	r0, r2, #27
 8009196:	d411      	bmi.n	80091bc <__swsetup_r+0x50>
 8009198:	2209      	movs	r2, #9
 800919a:	6032      	str	r2, [r6, #0]
 800919c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295
 80091a6:	e03e      	b.n	8009226 <__swsetup_r+0xba>
 80091a8:	4b25      	ldr	r3, [pc, #148]	; (8009240 <__swsetup_r+0xd4>)
 80091aa:	429c      	cmp	r4, r3
 80091ac:	d101      	bne.n	80091b2 <__swsetup_r+0x46>
 80091ae:	68ac      	ldr	r4, [r5, #8]
 80091b0:	e7eb      	b.n	800918a <__swsetup_r+0x1e>
 80091b2:	4b24      	ldr	r3, [pc, #144]	; (8009244 <__swsetup_r+0xd8>)
 80091b4:	429c      	cmp	r4, r3
 80091b6:	bf08      	it	eq
 80091b8:	68ec      	ldreq	r4, [r5, #12]
 80091ba:	e7e6      	b.n	800918a <__swsetup_r+0x1e>
 80091bc:	0751      	lsls	r1, r2, #29
 80091be:	d512      	bpl.n	80091e6 <__swsetup_r+0x7a>
 80091c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c2:	b141      	cbz	r1, 80091d6 <__swsetup_r+0x6a>
 80091c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d002      	beq.n	80091d2 <__swsetup_r+0x66>
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 fa19 	bl	8009604 <_free_r>
 80091d2:	2300      	movs	r3, #0
 80091d4:	6363      	str	r3, [r4, #52]	; 0x34
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	2300      	movs	r3, #0
 80091e0:	6063      	str	r3, [r4, #4]
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f043 0308 	orr.w	r3, r3, #8
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	b94b      	cbnz	r3, 8009206 <__swsetup_r+0x9a>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091fc:	d003      	beq.n	8009206 <__swsetup_r+0x9a>
 80091fe:	4621      	mov	r1, r4
 8009200:	4630      	mov	r0, r6
 8009202:	f000 f9bf 	bl	8009584 <__smakebuf_r>
 8009206:	89a2      	ldrh	r2, [r4, #12]
 8009208:	f012 0301 	ands.w	r3, r2, #1
 800920c:	d00c      	beq.n	8009228 <__swsetup_r+0xbc>
 800920e:	2300      	movs	r3, #0
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	6963      	ldr	r3, [r4, #20]
 8009214:	425b      	negs	r3, r3
 8009216:	61a3      	str	r3, [r4, #24]
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b953      	cbnz	r3, 8009232 <__swsetup_r+0xc6>
 800921c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009220:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009224:	d1ba      	bne.n	800919c <__swsetup_r+0x30>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	0792      	lsls	r2, r2, #30
 800922a:	bf58      	it	pl
 800922c:	6963      	ldrpl	r3, [r4, #20]
 800922e:	60a3      	str	r3, [r4, #8]
 8009230:	e7f2      	b.n	8009218 <__swsetup_r+0xac>
 8009232:	2000      	movs	r0, #0
 8009234:	e7f7      	b.n	8009226 <__swsetup_r+0xba>
 8009236:	bf00      	nop
 8009238:	24000090 	.word	0x24000090
 800923c:	0800a480 	.word	0x0800a480
 8009240:	0800a4a0 	.word	0x0800a4a0
 8009244:	0800a460 	.word	0x0800a460

08009248 <__sflush_r>:
 8009248:	898a      	ldrh	r2, [r1, #12]
 800924a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	4605      	mov	r5, r0
 8009250:	0710      	lsls	r0, r2, #28
 8009252:	460c      	mov	r4, r1
 8009254:	d458      	bmi.n	8009308 <__sflush_r+0xc0>
 8009256:	684b      	ldr	r3, [r1, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc05      	bgt.n	8009268 <__sflush_r+0x20>
 800925c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	dc02      	bgt.n	8009268 <__sflush_r+0x20>
 8009262:	2000      	movs	r0, #0
 8009264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926a:	2e00      	cmp	r6, #0
 800926c:	d0f9      	beq.n	8009262 <__sflush_r+0x1a>
 800926e:	2300      	movs	r3, #0
 8009270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009274:	682f      	ldr	r7, [r5, #0]
 8009276:	6a21      	ldr	r1, [r4, #32]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	d032      	beq.n	80092e2 <__sflush_r+0x9a>
 800927c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	075a      	lsls	r2, r3, #29
 8009282:	d505      	bpl.n	8009290 <__sflush_r+0x48>
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	1ac0      	subs	r0, r0, r3
 8009288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800928a:	b10b      	cbz	r3, 8009290 <__sflush_r+0x48>
 800928c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800928e:	1ac0      	subs	r0, r0, r3
 8009290:	2300      	movs	r3, #0
 8009292:	4602      	mov	r2, r0
 8009294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009296:	6a21      	ldr	r1, [r4, #32]
 8009298:	4628      	mov	r0, r5
 800929a:	47b0      	blx	r6
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	d106      	bne.n	80092b0 <__sflush_r+0x68>
 80092a2:	6829      	ldr	r1, [r5, #0]
 80092a4:	291d      	cmp	r1, #29
 80092a6:	d848      	bhi.n	800933a <__sflush_r+0xf2>
 80092a8:	4a29      	ldr	r2, [pc, #164]	; (8009350 <__sflush_r+0x108>)
 80092aa:	40ca      	lsrs	r2, r1
 80092ac:	07d6      	lsls	r6, r2, #31
 80092ae:	d544      	bpl.n	800933a <__sflush_r+0xf2>
 80092b0:	2200      	movs	r2, #0
 80092b2:	6062      	str	r2, [r4, #4]
 80092b4:	04d9      	lsls	r1, r3, #19
 80092b6:	6922      	ldr	r2, [r4, #16]
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	d504      	bpl.n	80092c6 <__sflush_r+0x7e>
 80092bc:	1c42      	adds	r2, r0, #1
 80092be:	d101      	bne.n	80092c4 <__sflush_r+0x7c>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b903      	cbnz	r3, 80092c6 <__sflush_r+0x7e>
 80092c4:	6560      	str	r0, [r4, #84]	; 0x54
 80092c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c8:	602f      	str	r7, [r5, #0]
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d0c9      	beq.n	8009262 <__sflush_r+0x1a>
 80092ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d002      	beq.n	80092dc <__sflush_r+0x94>
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 f994 	bl	8009604 <_free_r>
 80092dc:	2000      	movs	r0, #0
 80092de:	6360      	str	r0, [r4, #52]	; 0x34
 80092e0:	e7c0      	b.n	8009264 <__sflush_r+0x1c>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	1c41      	adds	r1, r0, #1
 80092ea:	d1c8      	bne.n	800927e <__sflush_r+0x36>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0c5      	beq.n	800927e <__sflush_r+0x36>
 80092f2:	2b1d      	cmp	r3, #29
 80092f4:	d001      	beq.n	80092fa <__sflush_r+0xb2>
 80092f6:	2b16      	cmp	r3, #22
 80092f8:	d101      	bne.n	80092fe <__sflush_r+0xb6>
 80092fa:	602f      	str	r7, [r5, #0]
 80092fc:	e7b1      	b.n	8009262 <__sflush_r+0x1a>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7ad      	b.n	8009264 <__sflush_r+0x1c>
 8009308:	690f      	ldr	r7, [r1, #16]
 800930a:	2f00      	cmp	r7, #0
 800930c:	d0a9      	beq.n	8009262 <__sflush_r+0x1a>
 800930e:	0793      	lsls	r3, r2, #30
 8009310:	680e      	ldr	r6, [r1, #0]
 8009312:	bf08      	it	eq
 8009314:	694b      	ldreq	r3, [r1, #20]
 8009316:	600f      	str	r7, [r1, #0]
 8009318:	bf18      	it	ne
 800931a:	2300      	movne	r3, #0
 800931c:	eba6 0807 	sub.w	r8, r6, r7
 8009320:	608b      	str	r3, [r1, #8]
 8009322:	f1b8 0f00 	cmp.w	r8, #0
 8009326:	dd9c      	ble.n	8009262 <__sflush_r+0x1a>
 8009328:	4643      	mov	r3, r8
 800932a:	463a      	mov	r2, r7
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009330:	4628      	mov	r0, r5
 8009332:	47b0      	blx	r6
 8009334:	2800      	cmp	r0, #0
 8009336:	dc06      	bgt.n	8009346 <__sflush_r+0xfe>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	e78e      	b.n	8009264 <__sflush_r+0x1c>
 8009346:	4407      	add	r7, r0
 8009348:	eba8 0800 	sub.w	r8, r8, r0
 800934c:	e7e9      	b.n	8009322 <__sflush_r+0xda>
 800934e:	bf00      	nop
 8009350:	20400001 	.word	0x20400001

08009354 <_fflush_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	4605      	mov	r5, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b1db      	cbz	r3, 8009396 <_fflush_r+0x42>
 800935e:	b118      	cbz	r0, 8009368 <_fflush_r+0x14>
 8009360:	6983      	ldr	r3, [r0, #24]
 8009362:	b90b      	cbnz	r3, 8009368 <_fflush_r+0x14>
 8009364:	f000 f860 	bl	8009428 <__sinit>
 8009368:	4b0c      	ldr	r3, [pc, #48]	; (800939c <_fflush_r+0x48>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d109      	bne.n	8009382 <_fflush_r+0x2e>
 800936e:	686c      	ldr	r4, [r5, #4]
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	b17b      	cbz	r3, 8009396 <_fflush_r+0x42>
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800937e:	f7ff bf63 	b.w	8009248 <__sflush_r>
 8009382:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <_fflush_r+0x4c>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d101      	bne.n	800938c <_fflush_r+0x38>
 8009388:	68ac      	ldr	r4, [r5, #8]
 800938a:	e7f1      	b.n	8009370 <_fflush_r+0x1c>
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <_fflush_r+0x50>)
 800938e:	429c      	cmp	r4, r3
 8009390:	bf08      	it	eq
 8009392:	68ec      	ldreq	r4, [r5, #12]
 8009394:	e7ec      	b.n	8009370 <_fflush_r+0x1c>
 8009396:	2000      	movs	r0, #0
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	bf00      	nop
 800939c:	0800a480 	.word	0x0800a480
 80093a0:	0800a4a0 	.word	0x0800a4a0
 80093a4:	0800a460 	.word	0x0800a460

080093a8 <std>:
 80093a8:	2300      	movs	r3, #0
 80093aa:	b510      	push	{r4, lr}
 80093ac:	4604      	mov	r4, r0
 80093ae:	e9c0 3300 	strd	r3, r3, [r0]
 80093b2:	6083      	str	r3, [r0, #8]
 80093b4:	8181      	strh	r1, [r0, #12]
 80093b6:	6643      	str	r3, [r0, #100]	; 0x64
 80093b8:	81c2      	strh	r2, [r0, #14]
 80093ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093be:	6183      	str	r3, [r0, #24]
 80093c0:	4619      	mov	r1, r3
 80093c2:	2208      	movs	r2, #8
 80093c4:	305c      	adds	r0, #92	; 0x5c
 80093c6:	f7ff fde7 	bl	8008f98 <memset>
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <std+0x38>)
 80093cc:	6263      	str	r3, [r4, #36]	; 0x24
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <std+0x3c>)
 80093d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <std+0x40>)
 80093d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093d6:	4b05      	ldr	r3, [pc, #20]	; (80093ec <std+0x44>)
 80093d8:	6224      	str	r4, [r4, #32]
 80093da:	6323      	str	r3, [r4, #48]	; 0x30
 80093dc:	bd10      	pop	{r4, pc}
 80093de:	bf00      	nop
 80093e0:	08009d71 	.word	0x08009d71
 80093e4:	08009d93 	.word	0x08009d93
 80093e8:	08009dcb 	.word	0x08009dcb
 80093ec:	08009def 	.word	0x08009def

080093f0 <_cleanup_r>:
 80093f0:	4901      	ldr	r1, [pc, #4]	; (80093f8 <_cleanup_r+0x8>)
 80093f2:	f000 b885 	b.w	8009500 <_fwalk_reent>
 80093f6:	bf00      	nop
 80093f8:	08009355 	.word	0x08009355

080093fc <__sfmoreglue>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	1e4a      	subs	r2, r1, #1
 8009400:	2568      	movs	r5, #104	; 0x68
 8009402:	4355      	muls	r5, r2
 8009404:	460e      	mov	r6, r1
 8009406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800940a:	f000 f949 	bl	80096a0 <_malloc_r>
 800940e:	4604      	mov	r4, r0
 8009410:	b140      	cbz	r0, 8009424 <__sfmoreglue+0x28>
 8009412:	2100      	movs	r1, #0
 8009414:	e9c0 1600 	strd	r1, r6, [r0]
 8009418:	300c      	adds	r0, #12
 800941a:	60a0      	str	r0, [r4, #8]
 800941c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009420:	f7ff fdba 	bl	8008f98 <memset>
 8009424:	4620      	mov	r0, r4
 8009426:	bd70      	pop	{r4, r5, r6, pc}

08009428 <__sinit>:
 8009428:	6983      	ldr	r3, [r0, #24]
 800942a:	b510      	push	{r4, lr}
 800942c:	4604      	mov	r4, r0
 800942e:	bb33      	cbnz	r3, 800947e <__sinit+0x56>
 8009430:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009434:	6503      	str	r3, [r0, #80]	; 0x50
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <__sinit+0x58>)
 8009438:	4a12      	ldr	r2, [pc, #72]	; (8009484 <__sinit+0x5c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6282      	str	r2, [r0, #40]	; 0x28
 800943e:	4298      	cmp	r0, r3
 8009440:	bf04      	itt	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	6183      	streq	r3, [r0, #24]
 8009446:	f000 f81f 	bl	8009488 <__sfp>
 800944a:	6060      	str	r0, [r4, #4]
 800944c:	4620      	mov	r0, r4
 800944e:	f000 f81b 	bl	8009488 <__sfp>
 8009452:	60a0      	str	r0, [r4, #8]
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f817 	bl	8009488 <__sfp>
 800945a:	2200      	movs	r2, #0
 800945c:	60e0      	str	r0, [r4, #12]
 800945e:	2104      	movs	r1, #4
 8009460:	6860      	ldr	r0, [r4, #4]
 8009462:	f7ff ffa1 	bl	80093a8 <std>
 8009466:	2201      	movs	r2, #1
 8009468:	2109      	movs	r1, #9
 800946a:	68a0      	ldr	r0, [r4, #8]
 800946c:	f7ff ff9c 	bl	80093a8 <std>
 8009470:	2202      	movs	r2, #2
 8009472:	2112      	movs	r1, #18
 8009474:	68e0      	ldr	r0, [r4, #12]
 8009476:	f7ff ff97 	bl	80093a8 <std>
 800947a:	2301      	movs	r3, #1
 800947c:	61a3      	str	r3, [r4, #24]
 800947e:	bd10      	pop	{r4, pc}
 8009480:	0800a45c 	.word	0x0800a45c
 8009484:	080093f1 	.word	0x080093f1

08009488 <__sfp>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	4b1b      	ldr	r3, [pc, #108]	; (80094f8 <__sfp+0x70>)
 800948c:	681e      	ldr	r6, [r3, #0]
 800948e:	69b3      	ldr	r3, [r6, #24]
 8009490:	4607      	mov	r7, r0
 8009492:	b913      	cbnz	r3, 800949a <__sfp+0x12>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ffc7 	bl	8009428 <__sinit>
 800949a:	3648      	adds	r6, #72	; 0x48
 800949c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	d503      	bpl.n	80094ac <__sfp+0x24>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	b133      	cbz	r3, 80094b6 <__sfp+0x2e>
 80094a8:	6836      	ldr	r6, [r6, #0]
 80094aa:	e7f7      	b.n	800949c <__sfp+0x14>
 80094ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b0:	b16d      	cbz	r5, 80094ce <__sfp+0x46>
 80094b2:	3468      	adds	r4, #104	; 0x68
 80094b4:	e7f4      	b.n	80094a0 <__sfp+0x18>
 80094b6:	2104      	movs	r1, #4
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7ff ff9f 	bl	80093fc <__sfmoreglue>
 80094be:	6030      	str	r0, [r6, #0]
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d1f1      	bne.n	80094a8 <__sfp+0x20>
 80094c4:	230c      	movs	r3, #12
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	4604      	mov	r4, r0
 80094ca:	4620      	mov	r0, r4
 80094cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <__sfp+0x74>)
 80094d0:	6665      	str	r5, [r4, #100]	; 0x64
 80094d2:	e9c4 5500 	strd	r5, r5, [r4]
 80094d6:	60a5      	str	r5, [r4, #8]
 80094d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80094dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80094e0:	2208      	movs	r2, #8
 80094e2:	4629      	mov	r1, r5
 80094e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094e8:	f7ff fd56 	bl	8008f98 <memset>
 80094ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094f4:	e7e9      	b.n	80094ca <__sfp+0x42>
 80094f6:	bf00      	nop
 80094f8:	0800a45c 	.word	0x0800a45c
 80094fc:	ffff0001 	.word	0xffff0001

08009500 <_fwalk_reent>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800950c:	2600      	movs	r6, #0
 800950e:	b914      	cbnz	r4, 8009516 <_fwalk_reent+0x16>
 8009510:	4630      	mov	r0, r6
 8009512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009516:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800951a:	3f01      	subs	r7, #1
 800951c:	d501      	bpl.n	8009522 <_fwalk_reent+0x22>
 800951e:	6824      	ldr	r4, [r4, #0]
 8009520:	e7f5      	b.n	800950e <_fwalk_reent+0xe>
 8009522:	89ab      	ldrh	r3, [r5, #12]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d907      	bls.n	8009538 <_fwalk_reent+0x38>
 8009528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800952c:	3301      	adds	r3, #1
 800952e:	d003      	beq.n	8009538 <_fwalk_reent+0x38>
 8009530:	4629      	mov	r1, r5
 8009532:	4640      	mov	r0, r8
 8009534:	47c8      	blx	r9
 8009536:	4306      	orrs	r6, r0
 8009538:	3568      	adds	r5, #104	; 0x68
 800953a:	e7ee      	b.n	800951a <_fwalk_reent+0x1a>

0800953c <__swhatbuf_r>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	460e      	mov	r6, r1
 8009540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009544:	2900      	cmp	r1, #0
 8009546:	b096      	sub	sp, #88	; 0x58
 8009548:	4614      	mov	r4, r2
 800954a:	461d      	mov	r5, r3
 800954c:	da07      	bge.n	800955e <__swhatbuf_r+0x22>
 800954e:	2300      	movs	r3, #0
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	89b3      	ldrh	r3, [r6, #12]
 8009554:	061a      	lsls	r2, r3, #24
 8009556:	d410      	bmi.n	800957a <__swhatbuf_r+0x3e>
 8009558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955c:	e00e      	b.n	800957c <__swhatbuf_r+0x40>
 800955e:	466a      	mov	r2, sp
 8009560:	f000 fc6c 	bl	8009e3c <_fstat_r>
 8009564:	2800      	cmp	r0, #0
 8009566:	dbf2      	blt.n	800954e <__swhatbuf_r+0x12>
 8009568:	9a01      	ldr	r2, [sp, #4]
 800956a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800956e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009572:	425a      	negs	r2, r3
 8009574:	415a      	adcs	r2, r3
 8009576:	602a      	str	r2, [r5, #0]
 8009578:	e7ee      	b.n	8009558 <__swhatbuf_r+0x1c>
 800957a:	2340      	movs	r3, #64	; 0x40
 800957c:	2000      	movs	r0, #0
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	b016      	add	sp, #88	; 0x58
 8009582:	bd70      	pop	{r4, r5, r6, pc}

08009584 <__smakebuf_r>:
 8009584:	898b      	ldrh	r3, [r1, #12]
 8009586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009588:	079d      	lsls	r5, r3, #30
 800958a:	4606      	mov	r6, r0
 800958c:	460c      	mov	r4, r1
 800958e:	d507      	bpl.n	80095a0 <__smakebuf_r+0x1c>
 8009590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	2301      	movs	r3, #1
 800959a:	6163      	str	r3, [r4, #20]
 800959c:	b002      	add	sp, #8
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	ab01      	add	r3, sp, #4
 80095a2:	466a      	mov	r2, sp
 80095a4:	f7ff ffca 	bl	800953c <__swhatbuf_r>
 80095a8:	9900      	ldr	r1, [sp, #0]
 80095aa:	4605      	mov	r5, r0
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 f877 	bl	80096a0 <_malloc_r>
 80095b2:	b948      	cbnz	r0, 80095c8 <__smakebuf_r+0x44>
 80095b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b8:	059a      	lsls	r2, r3, #22
 80095ba:	d4ef      	bmi.n	800959c <__smakebuf_r+0x18>
 80095bc:	f023 0303 	bic.w	r3, r3, #3
 80095c0:	f043 0302 	orr.w	r3, r3, #2
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	e7e3      	b.n	8009590 <__smakebuf_r+0xc>
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <__smakebuf_r+0x7c>)
 80095ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	6020      	str	r0, [r4, #0]
 80095d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	6163      	str	r3, [r4, #20]
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	6120      	str	r0, [r4, #16]
 80095de:	b15b      	cbz	r3, 80095f8 <__smakebuf_r+0x74>
 80095e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e4:	4630      	mov	r0, r6
 80095e6:	f000 fc3b 	bl	8009e60 <_isatty_r>
 80095ea:	b128      	cbz	r0, 80095f8 <__smakebuf_r+0x74>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	f043 0301 	orr.w	r3, r3, #1
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	431d      	orrs	r5, r3
 80095fc:	81a5      	strh	r5, [r4, #12]
 80095fe:	e7cd      	b.n	800959c <__smakebuf_r+0x18>
 8009600:	080093f1 	.word	0x080093f1

08009604 <_free_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4605      	mov	r5, r0
 8009608:	2900      	cmp	r1, #0
 800960a:	d045      	beq.n	8009698 <_free_r+0x94>
 800960c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009610:	1f0c      	subs	r4, r1, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfb8      	it	lt
 8009616:	18e4      	addlt	r4, r4, r3
 8009618:	f000 fc44 	bl	8009ea4 <__malloc_lock>
 800961c:	4a1f      	ldr	r2, [pc, #124]	; (800969c <_free_r+0x98>)
 800961e:	6813      	ldr	r3, [r2, #0]
 8009620:	4610      	mov	r0, r2
 8009622:	b933      	cbnz	r3, 8009632 <_free_r+0x2e>
 8009624:	6063      	str	r3, [r4, #4]
 8009626:	6014      	str	r4, [r2, #0]
 8009628:	4628      	mov	r0, r5
 800962a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800962e:	f000 bc3a 	b.w	8009ea6 <__malloc_unlock>
 8009632:	42a3      	cmp	r3, r4
 8009634:	d90c      	bls.n	8009650 <_free_r+0x4c>
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	1862      	adds	r2, r4, r1
 800963a:	4293      	cmp	r3, r2
 800963c:	bf04      	itt	eq
 800963e:	681a      	ldreq	r2, [r3, #0]
 8009640:	685b      	ldreq	r3, [r3, #4]
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	bf04      	itt	eq
 8009646:	1852      	addeq	r2, r2, r1
 8009648:	6022      	streq	r2, [r4, #0]
 800964a:	6004      	str	r4, [r0, #0]
 800964c:	e7ec      	b.n	8009628 <_free_r+0x24>
 800964e:	4613      	mov	r3, r2
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	b10a      	cbz	r2, 8009658 <_free_r+0x54>
 8009654:	42a2      	cmp	r2, r4
 8009656:	d9fa      	bls.n	800964e <_free_r+0x4a>
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	1858      	adds	r0, r3, r1
 800965c:	42a0      	cmp	r0, r4
 800965e:	d10b      	bne.n	8009678 <_free_r+0x74>
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	4401      	add	r1, r0
 8009664:	1858      	adds	r0, r3, r1
 8009666:	4282      	cmp	r2, r0
 8009668:	6019      	str	r1, [r3, #0]
 800966a:	d1dd      	bne.n	8009628 <_free_r+0x24>
 800966c:	6810      	ldr	r0, [r2, #0]
 800966e:	6852      	ldr	r2, [r2, #4]
 8009670:	605a      	str	r2, [r3, #4]
 8009672:	4401      	add	r1, r0
 8009674:	6019      	str	r1, [r3, #0]
 8009676:	e7d7      	b.n	8009628 <_free_r+0x24>
 8009678:	d902      	bls.n	8009680 <_free_r+0x7c>
 800967a:	230c      	movs	r3, #12
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	e7d3      	b.n	8009628 <_free_r+0x24>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	1821      	adds	r1, r4, r0
 8009684:	428a      	cmp	r2, r1
 8009686:	bf04      	itt	eq
 8009688:	6811      	ldreq	r1, [r2, #0]
 800968a:	6852      	ldreq	r2, [r2, #4]
 800968c:	6062      	str	r2, [r4, #4]
 800968e:	bf04      	itt	eq
 8009690:	1809      	addeq	r1, r1, r0
 8009692:	6021      	streq	r1, [r4, #0]
 8009694:	605c      	str	r4, [r3, #4]
 8009696:	e7c7      	b.n	8009628 <_free_r+0x24>
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	24000114 	.word	0x24000114

080096a0 <_malloc_r>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	1ccd      	adds	r5, r1, #3
 80096a4:	f025 0503 	bic.w	r5, r5, #3
 80096a8:	3508      	adds	r5, #8
 80096aa:	2d0c      	cmp	r5, #12
 80096ac:	bf38      	it	cc
 80096ae:	250c      	movcc	r5, #12
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	4606      	mov	r6, r0
 80096b4:	db01      	blt.n	80096ba <_malloc_r+0x1a>
 80096b6:	42a9      	cmp	r1, r5
 80096b8:	d903      	bls.n	80096c2 <_malloc_r+0x22>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	2000      	movs	r0, #0
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	f000 fbef 	bl	8009ea4 <__malloc_lock>
 80096c6:	4a21      	ldr	r2, [pc, #132]	; (800974c <_malloc_r+0xac>)
 80096c8:	6814      	ldr	r4, [r2, #0]
 80096ca:	4621      	mov	r1, r4
 80096cc:	b991      	cbnz	r1, 80096f4 <_malloc_r+0x54>
 80096ce:	4c20      	ldr	r4, [pc, #128]	; (8009750 <_malloc_r+0xb0>)
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	b91b      	cbnz	r3, 80096dc <_malloc_r+0x3c>
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 fb3b 	bl	8009d50 <_sbrk_r>
 80096da:	6020      	str	r0, [r4, #0]
 80096dc:	4629      	mov	r1, r5
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 fb36 	bl	8009d50 <_sbrk_r>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d124      	bne.n	8009732 <_malloc_r+0x92>
 80096e8:	230c      	movs	r3, #12
 80096ea:	6033      	str	r3, [r6, #0]
 80096ec:	4630      	mov	r0, r6
 80096ee:	f000 fbda 	bl	8009ea6 <__malloc_unlock>
 80096f2:	e7e4      	b.n	80096be <_malloc_r+0x1e>
 80096f4:	680b      	ldr	r3, [r1, #0]
 80096f6:	1b5b      	subs	r3, r3, r5
 80096f8:	d418      	bmi.n	800972c <_malloc_r+0x8c>
 80096fa:	2b0b      	cmp	r3, #11
 80096fc:	d90f      	bls.n	800971e <_malloc_r+0x7e>
 80096fe:	600b      	str	r3, [r1, #0]
 8009700:	50cd      	str	r5, [r1, r3]
 8009702:	18cc      	adds	r4, r1, r3
 8009704:	4630      	mov	r0, r6
 8009706:	f000 fbce 	bl	8009ea6 <__malloc_unlock>
 800970a:	f104 000b 	add.w	r0, r4, #11
 800970e:	1d23      	adds	r3, r4, #4
 8009710:	f020 0007 	bic.w	r0, r0, #7
 8009714:	1ac3      	subs	r3, r0, r3
 8009716:	d0d3      	beq.n	80096c0 <_malloc_r+0x20>
 8009718:	425a      	negs	r2, r3
 800971a:	50e2      	str	r2, [r4, r3]
 800971c:	e7d0      	b.n	80096c0 <_malloc_r+0x20>
 800971e:	428c      	cmp	r4, r1
 8009720:	684b      	ldr	r3, [r1, #4]
 8009722:	bf16      	itet	ne
 8009724:	6063      	strne	r3, [r4, #4]
 8009726:	6013      	streq	r3, [r2, #0]
 8009728:	460c      	movne	r4, r1
 800972a:	e7eb      	b.n	8009704 <_malloc_r+0x64>
 800972c:	460c      	mov	r4, r1
 800972e:	6849      	ldr	r1, [r1, #4]
 8009730:	e7cc      	b.n	80096cc <_malloc_r+0x2c>
 8009732:	1cc4      	adds	r4, r0, #3
 8009734:	f024 0403 	bic.w	r4, r4, #3
 8009738:	42a0      	cmp	r0, r4
 800973a:	d005      	beq.n	8009748 <_malloc_r+0xa8>
 800973c:	1a21      	subs	r1, r4, r0
 800973e:	4630      	mov	r0, r6
 8009740:	f000 fb06 	bl	8009d50 <_sbrk_r>
 8009744:	3001      	adds	r0, #1
 8009746:	d0cf      	beq.n	80096e8 <_malloc_r+0x48>
 8009748:	6025      	str	r5, [r4, #0]
 800974a:	e7db      	b.n	8009704 <_malloc_r+0x64>
 800974c:	24000114 	.word	0x24000114
 8009750:	24000118 	.word	0x24000118

08009754 <__sfputc_r>:
 8009754:	6893      	ldr	r3, [r2, #8]
 8009756:	3b01      	subs	r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	b410      	push	{r4}
 800975c:	6093      	str	r3, [r2, #8]
 800975e:	da08      	bge.n	8009772 <__sfputc_r+0x1e>
 8009760:	6994      	ldr	r4, [r2, #24]
 8009762:	42a3      	cmp	r3, r4
 8009764:	db01      	blt.n	800976a <__sfputc_r+0x16>
 8009766:	290a      	cmp	r1, #10
 8009768:	d103      	bne.n	8009772 <__sfputc_r+0x1e>
 800976a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976e:	f7ff bcab 	b.w	80090c8 <__swbuf_r>
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	1c58      	adds	r0, r3, #1
 8009776:	6010      	str	r0, [r2, #0]
 8009778:	7019      	strb	r1, [r3, #0]
 800977a:	4608      	mov	r0, r1
 800977c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009780:	4770      	bx	lr

08009782 <__sfputs_r>:
 8009782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	4614      	mov	r4, r2
 800978a:	18d5      	adds	r5, r2, r3
 800978c:	42ac      	cmp	r4, r5
 800978e:	d101      	bne.n	8009794 <__sfputs_r+0x12>
 8009790:	2000      	movs	r0, #0
 8009792:	e007      	b.n	80097a4 <__sfputs_r+0x22>
 8009794:	463a      	mov	r2, r7
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	4630      	mov	r0, r6
 800979c:	f7ff ffda 	bl	8009754 <__sfputc_r>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d1f3      	bne.n	800978c <__sfputs_r+0xa>
 80097a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097a8 <_vfiprintf_r>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	460c      	mov	r4, r1
 80097ae:	b09d      	sub	sp, #116	; 0x74
 80097b0:	4617      	mov	r7, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	4606      	mov	r6, r0
 80097b6:	b118      	cbz	r0, 80097c0 <_vfiprintf_r+0x18>
 80097b8:	6983      	ldr	r3, [r0, #24]
 80097ba:	b90b      	cbnz	r3, 80097c0 <_vfiprintf_r+0x18>
 80097bc:	f7ff fe34 	bl	8009428 <__sinit>
 80097c0:	4b7c      	ldr	r3, [pc, #496]	; (80099b4 <_vfiprintf_r+0x20c>)
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d158      	bne.n	8009878 <_vfiprintf_r+0xd0>
 80097c6:	6874      	ldr	r4, [r6, #4]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	0718      	lsls	r0, r3, #28
 80097cc:	d55e      	bpl.n	800988c <_vfiprintf_r+0xe4>
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d05b      	beq.n	800988c <_vfiprintf_r+0xe4>
 80097d4:	2300      	movs	r3, #0
 80097d6:	9309      	str	r3, [sp, #36]	; 0x24
 80097d8:	2320      	movs	r3, #32
 80097da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097de:	2330      	movs	r3, #48	; 0x30
 80097e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e4:	9503      	str	r5, [sp, #12]
 80097e6:	f04f 0b01 	mov.w	fp, #1
 80097ea:	46b8      	mov	r8, r7
 80097ec:	4645      	mov	r5, r8
 80097ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097f2:	b10b      	cbz	r3, 80097f8 <_vfiprintf_r+0x50>
 80097f4:	2b25      	cmp	r3, #37	; 0x25
 80097f6:	d154      	bne.n	80098a2 <_vfiprintf_r+0xfa>
 80097f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80097fc:	d00b      	beq.n	8009816 <_vfiprintf_r+0x6e>
 80097fe:	4653      	mov	r3, sl
 8009800:	463a      	mov	r2, r7
 8009802:	4621      	mov	r1, r4
 8009804:	4630      	mov	r0, r6
 8009806:	f7ff ffbc 	bl	8009782 <__sfputs_r>
 800980a:	3001      	adds	r0, #1
 800980c:	f000 80c2 	beq.w	8009994 <_vfiprintf_r+0x1ec>
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	4453      	add	r3, sl
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	f898 3000 	ldrb.w	r3, [r8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80ba 	beq.w	8009994 <_vfiprintf_r+0x1ec>
 8009820:	2300      	movs	r3, #0
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009832:	931a      	str	r3, [sp, #104]	; 0x68
 8009834:	46a8      	mov	r8, r5
 8009836:	2205      	movs	r2, #5
 8009838:	f818 1b01 	ldrb.w	r1, [r8], #1
 800983c:	485e      	ldr	r0, [pc, #376]	; (80099b8 <_vfiprintf_r+0x210>)
 800983e:	f7f6 fd4f 	bl	80002e0 <memchr>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	bb78      	cbnz	r0, 80098a6 <_vfiprintf_r+0xfe>
 8009846:	06d9      	lsls	r1, r3, #27
 8009848:	bf44      	itt	mi
 800984a:	2220      	movmi	r2, #32
 800984c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009850:	071a      	lsls	r2, r3, #28
 8009852:	bf44      	itt	mi
 8009854:	222b      	movmi	r2, #43	; 0x2b
 8009856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800985a:	782a      	ldrb	r2, [r5, #0]
 800985c:	2a2a      	cmp	r2, #42	; 0x2a
 800985e:	d02a      	beq.n	80098b6 <_vfiprintf_r+0x10e>
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	46a8      	mov	r8, r5
 8009864:	2000      	movs	r0, #0
 8009866:	250a      	movs	r5, #10
 8009868:	4641      	mov	r1, r8
 800986a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986e:	3b30      	subs	r3, #48	; 0x30
 8009870:	2b09      	cmp	r3, #9
 8009872:	d969      	bls.n	8009948 <_vfiprintf_r+0x1a0>
 8009874:	b360      	cbz	r0, 80098d0 <_vfiprintf_r+0x128>
 8009876:	e024      	b.n	80098c2 <_vfiprintf_r+0x11a>
 8009878:	4b50      	ldr	r3, [pc, #320]	; (80099bc <_vfiprintf_r+0x214>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d101      	bne.n	8009882 <_vfiprintf_r+0xda>
 800987e:	68b4      	ldr	r4, [r6, #8]
 8009880:	e7a2      	b.n	80097c8 <_vfiprintf_r+0x20>
 8009882:	4b4f      	ldr	r3, [pc, #316]	; (80099c0 <_vfiprintf_r+0x218>)
 8009884:	429c      	cmp	r4, r3
 8009886:	bf08      	it	eq
 8009888:	68f4      	ldreq	r4, [r6, #12]
 800988a:	e79d      	b.n	80097c8 <_vfiprintf_r+0x20>
 800988c:	4621      	mov	r1, r4
 800988e:	4630      	mov	r0, r6
 8009890:	f7ff fc6c 	bl	800916c <__swsetup_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	d09d      	beq.n	80097d4 <_vfiprintf_r+0x2c>
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	b01d      	add	sp, #116	; 0x74
 800989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a2:	46a8      	mov	r8, r5
 80098a4:	e7a2      	b.n	80097ec <_vfiprintf_r+0x44>
 80098a6:	4a44      	ldr	r2, [pc, #272]	; (80099b8 <_vfiprintf_r+0x210>)
 80098a8:	1a80      	subs	r0, r0, r2
 80098aa:	fa0b f000 	lsl.w	r0, fp, r0
 80098ae:	4318      	orrs	r0, r3
 80098b0:	9004      	str	r0, [sp, #16]
 80098b2:	4645      	mov	r5, r8
 80098b4:	e7be      	b.n	8009834 <_vfiprintf_r+0x8c>
 80098b6:	9a03      	ldr	r2, [sp, #12]
 80098b8:	1d11      	adds	r1, r2, #4
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	2a00      	cmp	r2, #0
 80098c0:	db01      	blt.n	80098c6 <_vfiprintf_r+0x11e>
 80098c2:	9207      	str	r2, [sp, #28]
 80098c4:	e004      	b.n	80098d0 <_vfiprintf_r+0x128>
 80098c6:	4252      	negs	r2, r2
 80098c8:	f043 0302 	orr.w	r3, r3, #2
 80098cc:	9207      	str	r2, [sp, #28]
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	f898 3000 	ldrb.w	r3, [r8]
 80098d4:	2b2e      	cmp	r3, #46	; 0x2e
 80098d6:	d10e      	bne.n	80098f6 <_vfiprintf_r+0x14e>
 80098d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80098dc:	2b2a      	cmp	r3, #42	; 0x2a
 80098de:	d138      	bne.n	8009952 <_vfiprintf_r+0x1aa>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	1d1a      	adds	r2, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9203      	str	r2, [sp, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfb8      	it	lt
 80098ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80098f0:	f108 0802 	add.w	r8, r8, #2
 80098f4:	9305      	str	r3, [sp, #20]
 80098f6:	4d33      	ldr	r5, [pc, #204]	; (80099c4 <_vfiprintf_r+0x21c>)
 80098f8:	f898 1000 	ldrb.w	r1, [r8]
 80098fc:	2203      	movs	r2, #3
 80098fe:	4628      	mov	r0, r5
 8009900:	f7f6 fcee 	bl	80002e0 <memchr>
 8009904:	b140      	cbz	r0, 8009918 <_vfiprintf_r+0x170>
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	1b40      	subs	r0, r0, r5
 800990a:	fa03 f000 	lsl.w	r0, r3, r0
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	4303      	orrs	r3, r0
 8009912:	f108 0801 	add.w	r8, r8, #1
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	f898 1000 	ldrb.w	r1, [r8]
 800991c:	482a      	ldr	r0, [pc, #168]	; (80099c8 <_vfiprintf_r+0x220>)
 800991e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009922:	2206      	movs	r2, #6
 8009924:	f108 0701 	add.w	r7, r8, #1
 8009928:	f7f6 fcda 	bl	80002e0 <memchr>
 800992c:	2800      	cmp	r0, #0
 800992e:	d037      	beq.n	80099a0 <_vfiprintf_r+0x1f8>
 8009930:	4b26      	ldr	r3, [pc, #152]	; (80099cc <_vfiprintf_r+0x224>)
 8009932:	bb1b      	cbnz	r3, 800997c <_vfiprintf_r+0x1d4>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	3307      	adds	r3, #7
 8009938:	f023 0307 	bic.w	r3, r3, #7
 800993c:	3308      	adds	r3, #8
 800993e:	9303      	str	r3, [sp, #12]
 8009940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009942:	444b      	add	r3, r9
 8009944:	9309      	str	r3, [sp, #36]	; 0x24
 8009946:	e750      	b.n	80097ea <_vfiprintf_r+0x42>
 8009948:	fb05 3202 	mla	r2, r5, r2, r3
 800994c:	2001      	movs	r0, #1
 800994e:	4688      	mov	r8, r1
 8009950:	e78a      	b.n	8009868 <_vfiprintf_r+0xc0>
 8009952:	2300      	movs	r3, #0
 8009954:	f108 0801 	add.w	r8, r8, #1
 8009958:	9305      	str	r3, [sp, #20]
 800995a:	4619      	mov	r1, r3
 800995c:	250a      	movs	r5, #10
 800995e:	4640      	mov	r0, r8
 8009960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009964:	3a30      	subs	r2, #48	; 0x30
 8009966:	2a09      	cmp	r2, #9
 8009968:	d903      	bls.n	8009972 <_vfiprintf_r+0x1ca>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0c3      	beq.n	80098f6 <_vfiprintf_r+0x14e>
 800996e:	9105      	str	r1, [sp, #20]
 8009970:	e7c1      	b.n	80098f6 <_vfiprintf_r+0x14e>
 8009972:	fb05 2101 	mla	r1, r5, r1, r2
 8009976:	2301      	movs	r3, #1
 8009978:	4680      	mov	r8, r0
 800997a:	e7f0      	b.n	800995e <_vfiprintf_r+0x1b6>
 800997c:	ab03      	add	r3, sp, #12
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4622      	mov	r2, r4
 8009982:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <_vfiprintf_r+0x228>)
 8009984:	a904      	add	r1, sp, #16
 8009986:	4630      	mov	r0, r6
 8009988:	f3af 8000 	nop.w
 800998c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009990:	4681      	mov	r9, r0
 8009992:	d1d5      	bne.n	8009940 <_vfiprintf_r+0x198>
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	065b      	lsls	r3, r3, #25
 8009998:	f53f af7e 	bmi.w	8009898 <_vfiprintf_r+0xf0>
 800999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800999e:	e77d      	b.n	800989c <_vfiprintf_r+0xf4>
 80099a0:	ab03      	add	r3, sp, #12
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	4622      	mov	r2, r4
 80099a6:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <_vfiprintf_r+0x228>)
 80099a8:	a904      	add	r1, sp, #16
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f888 	bl	8009ac0 <_printf_i>
 80099b0:	e7ec      	b.n	800998c <_vfiprintf_r+0x1e4>
 80099b2:	bf00      	nop
 80099b4:	0800a480 	.word	0x0800a480
 80099b8:	0800a4c0 	.word	0x0800a4c0
 80099bc:	0800a4a0 	.word	0x0800a4a0
 80099c0:	0800a460 	.word	0x0800a460
 80099c4:	0800a4c6 	.word	0x0800a4c6
 80099c8:	0800a4ca 	.word	0x0800a4ca
 80099cc:	00000000 	.word	0x00000000
 80099d0:	08009783 	.word	0x08009783

080099d4 <_printf_common>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	4691      	mov	r9, r2
 80099da:	461f      	mov	r7, r3
 80099dc:	688a      	ldr	r2, [r1, #8]
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	bfb8      	it	lt
 80099e8:	4613      	movlt	r3, r2
 80099ea:	f8c9 3000 	str.w	r3, [r9]
 80099ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f2:	4606      	mov	r6, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	b112      	cbz	r2, 80099fe <_printf_common+0x2a>
 80099f8:	3301      	adds	r3, #1
 80099fa:	f8c9 3000 	str.w	r3, [r9]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	0699      	lsls	r1, r3, #26
 8009a02:	bf42      	ittt	mi
 8009a04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009a08:	3302      	addmi	r3, #2
 8009a0a:	f8c9 3000 	strmi.w	r3, [r9]
 8009a0e:	6825      	ldr	r5, [r4, #0]
 8009a10:	f015 0506 	ands.w	r5, r5, #6
 8009a14:	d107      	bne.n	8009a26 <_printf_common+0x52>
 8009a16:	f104 0a19 	add.w	sl, r4, #25
 8009a1a:	68e3      	ldr	r3, [r4, #12]
 8009a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	42ab      	cmp	r3, r5
 8009a24:	dc28      	bgt.n	8009a78 <_printf_common+0xa4>
 8009a26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	3300      	adds	r3, #0
 8009a2e:	bf18      	it	ne
 8009a30:	2301      	movne	r3, #1
 8009a32:	0692      	lsls	r2, r2, #26
 8009a34:	d42d      	bmi.n	8009a92 <_printf_common+0xbe>
 8009a36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	47c0      	blx	r8
 8009a40:	3001      	adds	r0, #1
 8009a42:	d020      	beq.n	8009a86 <_printf_common+0xb2>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	68e5      	ldr	r5, [r4, #12]
 8009a48:	f8d9 2000 	ldr.w	r2, [r9]
 8009a4c:	f003 0306 	and.w	r3, r3, #6
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	bf08      	it	eq
 8009a54:	1aad      	subeq	r5, r5, r2
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	6922      	ldr	r2, [r4, #16]
 8009a5a:	bf0c      	ite	eq
 8009a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a60:	2500      	movne	r5, #0
 8009a62:	4293      	cmp	r3, r2
 8009a64:	bfc4      	itt	gt
 8009a66:	1a9b      	subgt	r3, r3, r2
 8009a68:	18ed      	addgt	r5, r5, r3
 8009a6a:	f04f 0900 	mov.w	r9, #0
 8009a6e:	341a      	adds	r4, #26
 8009a70:	454d      	cmp	r5, r9
 8009a72:	d11a      	bne.n	8009aaa <_printf_common+0xd6>
 8009a74:	2000      	movs	r0, #0
 8009a76:	e008      	b.n	8009a8a <_printf_common+0xb6>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d103      	bne.n	8009a8e <_printf_common+0xba>
 8009a86:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	3501      	adds	r5, #1
 8009a90:	e7c3      	b.n	8009a1a <_printf_common+0x46>
 8009a92:	18e1      	adds	r1, r4, r3
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	2030      	movs	r0, #48	; 0x30
 8009a98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a9c:	4422      	add	r2, r4
 8009a9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009aa6:	3302      	adds	r3, #2
 8009aa8:	e7c5      	b.n	8009a36 <_printf_common+0x62>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4622      	mov	r2, r4
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	47c0      	blx	r8
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d0e6      	beq.n	8009a86 <_printf_common+0xb2>
 8009ab8:	f109 0901 	add.w	r9, r9, #1
 8009abc:	e7d8      	b.n	8009a70 <_printf_common+0x9c>
	...

08009ac0 <_printf_i>:
 8009ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ac8:	460c      	mov	r4, r1
 8009aca:	7e09      	ldrb	r1, [r1, #24]
 8009acc:	b085      	sub	sp, #20
 8009ace:	296e      	cmp	r1, #110	; 0x6e
 8009ad0:	4617      	mov	r7, r2
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	4698      	mov	r8, r3
 8009ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ad8:	f000 80b3 	beq.w	8009c42 <_printf_i+0x182>
 8009adc:	d822      	bhi.n	8009b24 <_printf_i+0x64>
 8009ade:	2963      	cmp	r1, #99	; 0x63
 8009ae0:	d036      	beq.n	8009b50 <_printf_i+0x90>
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x3a>
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	f000 80b9 	beq.w	8009c5c <_printf_i+0x19c>
 8009aea:	2958      	cmp	r1, #88	; 0x58
 8009aec:	f000 8083 	beq.w	8009bf6 <_printf_i+0x136>
 8009af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009af4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009af8:	e032      	b.n	8009b60 <_printf_i+0xa0>
 8009afa:	2964      	cmp	r1, #100	; 0x64
 8009afc:	d001      	beq.n	8009b02 <_printf_i+0x42>
 8009afe:	2969      	cmp	r1, #105	; 0x69
 8009b00:	d1f6      	bne.n	8009af0 <_printf_i+0x30>
 8009b02:	6820      	ldr	r0, [r4, #0]
 8009b04:	6813      	ldr	r3, [r2, #0]
 8009b06:	0605      	lsls	r5, r0, #24
 8009b08:	f103 0104 	add.w	r1, r3, #4
 8009b0c:	d52a      	bpl.n	8009b64 <_printf_i+0xa4>
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6011      	str	r1, [r2, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da03      	bge.n	8009b1e <_printf_i+0x5e>
 8009b16:	222d      	movs	r2, #45	; 0x2d
 8009b18:	425b      	negs	r3, r3
 8009b1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009b1e:	486f      	ldr	r0, [pc, #444]	; (8009cdc <_printf_i+0x21c>)
 8009b20:	220a      	movs	r2, #10
 8009b22:	e039      	b.n	8009b98 <_printf_i+0xd8>
 8009b24:	2973      	cmp	r1, #115	; 0x73
 8009b26:	f000 809d 	beq.w	8009c64 <_printf_i+0x1a4>
 8009b2a:	d808      	bhi.n	8009b3e <_printf_i+0x7e>
 8009b2c:	296f      	cmp	r1, #111	; 0x6f
 8009b2e:	d020      	beq.n	8009b72 <_printf_i+0xb2>
 8009b30:	2970      	cmp	r1, #112	; 0x70
 8009b32:	d1dd      	bne.n	8009af0 <_printf_i+0x30>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	f043 0320 	orr.w	r3, r3, #32
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	e003      	b.n	8009b46 <_printf_i+0x86>
 8009b3e:	2975      	cmp	r1, #117	; 0x75
 8009b40:	d017      	beq.n	8009b72 <_printf_i+0xb2>
 8009b42:	2978      	cmp	r1, #120	; 0x78
 8009b44:	d1d4      	bne.n	8009af0 <_printf_i+0x30>
 8009b46:	2378      	movs	r3, #120	; 0x78
 8009b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b4c:	4864      	ldr	r0, [pc, #400]	; (8009ce0 <_printf_i+0x220>)
 8009b4e:	e055      	b.n	8009bfc <_printf_i+0x13c>
 8009b50:	6813      	ldr	r3, [r2, #0]
 8009b52:	1d19      	adds	r1, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6011      	str	r1, [r2, #0]
 8009b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b60:	2301      	movs	r3, #1
 8009b62:	e08c      	b.n	8009c7e <_printf_i+0x1be>
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6011      	str	r1, [r2, #0]
 8009b68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b6c:	bf18      	it	ne
 8009b6e:	b21b      	sxthne	r3, r3
 8009b70:	e7cf      	b.n	8009b12 <_printf_i+0x52>
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	6825      	ldr	r5, [r4, #0]
 8009b76:	1d18      	adds	r0, r3, #4
 8009b78:	6010      	str	r0, [r2, #0]
 8009b7a:	0628      	lsls	r0, r5, #24
 8009b7c:	d501      	bpl.n	8009b82 <_printf_i+0xc2>
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	e002      	b.n	8009b88 <_printf_i+0xc8>
 8009b82:	0668      	lsls	r0, r5, #25
 8009b84:	d5fb      	bpl.n	8009b7e <_printf_i+0xbe>
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	4854      	ldr	r0, [pc, #336]	; (8009cdc <_printf_i+0x21c>)
 8009b8a:	296f      	cmp	r1, #111	; 0x6f
 8009b8c:	bf14      	ite	ne
 8009b8e:	220a      	movne	r2, #10
 8009b90:	2208      	moveq	r2, #8
 8009b92:	2100      	movs	r1, #0
 8009b94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b98:	6865      	ldr	r5, [r4, #4]
 8009b9a:	60a5      	str	r5, [r4, #8]
 8009b9c:	2d00      	cmp	r5, #0
 8009b9e:	f2c0 8095 	blt.w	8009ccc <_printf_i+0x20c>
 8009ba2:	6821      	ldr	r1, [r4, #0]
 8009ba4:	f021 0104 	bic.w	r1, r1, #4
 8009ba8:	6021      	str	r1, [r4, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d13d      	bne.n	8009c2a <_printf_i+0x16a>
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	f040 808e 	bne.w	8009cd0 <_printf_i+0x210>
 8009bb4:	4665      	mov	r5, ip
 8009bb6:	2a08      	cmp	r2, #8
 8009bb8:	d10b      	bne.n	8009bd2 <_printf_i+0x112>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	07db      	lsls	r3, r3, #31
 8009bbe:	d508      	bpl.n	8009bd2 <_printf_i+0x112>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	6862      	ldr	r2, [r4, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	bfde      	ittt	le
 8009bc8:	2330      	movle	r3, #48	; 0x30
 8009bca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bd2:	ebac 0305 	sub.w	r3, ip, r5
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	f8cd 8000 	str.w	r8, [sp]
 8009bdc:	463b      	mov	r3, r7
 8009bde:	aa03      	add	r2, sp, #12
 8009be0:	4621      	mov	r1, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7ff fef6 	bl	80099d4 <_printf_common>
 8009be8:	3001      	adds	r0, #1
 8009bea:	d14d      	bne.n	8009c88 <_printf_i+0x1c8>
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	b005      	add	sp, #20
 8009bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bf6:	4839      	ldr	r0, [pc, #228]	; (8009cdc <_printf_i+0x21c>)
 8009bf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	6821      	ldr	r1, [r4, #0]
 8009c00:	1d1d      	adds	r5, r3, #4
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6015      	str	r5, [r2, #0]
 8009c06:	060a      	lsls	r2, r1, #24
 8009c08:	d50b      	bpl.n	8009c22 <_printf_i+0x162>
 8009c0a:	07ca      	lsls	r2, r1, #31
 8009c0c:	bf44      	itt	mi
 8009c0e:	f041 0120 	orrmi.w	r1, r1, #32
 8009c12:	6021      	strmi	r1, [r4, #0]
 8009c14:	b91b      	cbnz	r3, 8009c1e <_printf_i+0x15e>
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	f022 0220 	bic.w	r2, r2, #32
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	e7b7      	b.n	8009b92 <_printf_i+0xd2>
 8009c22:	064d      	lsls	r5, r1, #25
 8009c24:	bf48      	it	mi
 8009c26:	b29b      	uxthmi	r3, r3
 8009c28:	e7ef      	b.n	8009c0a <_printf_i+0x14a>
 8009c2a:	4665      	mov	r5, ip
 8009c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c30:	fb02 3311 	mls	r3, r2, r1, r3
 8009c34:	5cc3      	ldrb	r3, [r0, r3]
 8009c36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d1f5      	bne.n	8009c2c <_printf_i+0x16c>
 8009c40:	e7b9      	b.n	8009bb6 <_printf_i+0xf6>
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	6825      	ldr	r5, [r4, #0]
 8009c46:	6961      	ldr	r1, [r4, #20]
 8009c48:	1d18      	adds	r0, r3, #4
 8009c4a:	6010      	str	r0, [r2, #0]
 8009c4c:	0628      	lsls	r0, r5, #24
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	d501      	bpl.n	8009c56 <_printf_i+0x196>
 8009c52:	6019      	str	r1, [r3, #0]
 8009c54:	e002      	b.n	8009c5c <_printf_i+0x19c>
 8009c56:	066a      	lsls	r2, r5, #25
 8009c58:	d5fb      	bpl.n	8009c52 <_printf_i+0x192>
 8009c5a:	8019      	strh	r1, [r3, #0]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	4665      	mov	r5, ip
 8009c62:	e7b9      	b.n	8009bd8 <_printf_i+0x118>
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	1d19      	adds	r1, r3, #4
 8009c68:	6011      	str	r1, [r2, #0]
 8009c6a:	681d      	ldr	r5, [r3, #0]
 8009c6c:	6862      	ldr	r2, [r4, #4]
 8009c6e:	2100      	movs	r1, #0
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7f6 fb35 	bl	80002e0 <memchr>
 8009c76:	b108      	cbz	r0, 8009c7c <_printf_i+0x1bc>
 8009c78:	1b40      	subs	r0, r0, r5
 8009c7a:	6060      	str	r0, [r4, #4]
 8009c7c:	6863      	ldr	r3, [r4, #4]
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	2300      	movs	r3, #0
 8009c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c86:	e7a7      	b.n	8009bd8 <_printf_i+0x118>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4630      	mov	r0, r6
 8009c90:	47c0      	blx	r8
 8009c92:	3001      	adds	r0, #1
 8009c94:	d0aa      	beq.n	8009bec <_printf_i+0x12c>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	079b      	lsls	r3, r3, #30
 8009c9a:	d413      	bmi.n	8009cc4 <_printf_i+0x204>
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	4298      	cmp	r0, r3
 8009ca2:	bfb8      	it	lt
 8009ca4:	4618      	movlt	r0, r3
 8009ca6:	e7a3      	b.n	8009bf0 <_printf_i+0x130>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	464a      	mov	r2, r9
 8009cac:	4639      	mov	r1, r7
 8009cae:	4630      	mov	r0, r6
 8009cb0:	47c0      	blx	r8
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d09a      	beq.n	8009bec <_printf_i+0x12c>
 8009cb6:	3501      	adds	r5, #1
 8009cb8:	68e3      	ldr	r3, [r4, #12]
 8009cba:	9a03      	ldr	r2, [sp, #12]
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	42ab      	cmp	r3, r5
 8009cc0:	dcf2      	bgt.n	8009ca8 <_printf_i+0x1e8>
 8009cc2:	e7eb      	b.n	8009c9c <_printf_i+0x1dc>
 8009cc4:	2500      	movs	r5, #0
 8009cc6:	f104 0919 	add.w	r9, r4, #25
 8009cca:	e7f5      	b.n	8009cb8 <_printf_i+0x1f8>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1ac      	bne.n	8009c2a <_printf_i+0x16a>
 8009cd0:	7803      	ldrb	r3, [r0, #0]
 8009cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cda:	e76c      	b.n	8009bb6 <_printf_i+0xf6>
 8009cdc:	0800a4d1 	.word	0x0800a4d1
 8009ce0:	0800a4e2 	.word	0x0800a4e2

08009ce4 <_putc_r>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	4614      	mov	r4, r2
 8009cea:	4606      	mov	r6, r0
 8009cec:	b118      	cbz	r0, 8009cf6 <_putc_r+0x12>
 8009cee:	6983      	ldr	r3, [r0, #24]
 8009cf0:	b90b      	cbnz	r3, 8009cf6 <_putc_r+0x12>
 8009cf2:	f7ff fb99 	bl	8009428 <__sinit>
 8009cf6:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <_putc_r+0x60>)
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	d112      	bne.n	8009d22 <_putc_r+0x3e>
 8009cfc:	6874      	ldr	r4, [r6, #4]
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	60a3      	str	r3, [r4, #8]
 8009d06:	da16      	bge.n	8009d36 <_putc_r+0x52>
 8009d08:	69a2      	ldr	r2, [r4, #24]
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	db02      	blt.n	8009d14 <_putc_r+0x30>
 8009d0e:	b2eb      	uxtb	r3, r5
 8009d10:	2b0a      	cmp	r3, #10
 8009d12:	d110      	bne.n	8009d36 <_putc_r+0x52>
 8009d14:	4622      	mov	r2, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	4630      	mov	r0, r6
 8009d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d1e:	f7ff b9d3 	b.w	80090c8 <__swbuf_r>
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <_putc_r+0x64>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d101      	bne.n	8009d2c <_putc_r+0x48>
 8009d28:	68b4      	ldr	r4, [r6, #8]
 8009d2a:	e7e8      	b.n	8009cfe <_putc_r+0x1a>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <_putc_r+0x68>)
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	bf08      	it	eq
 8009d32:	68f4      	ldreq	r4, [r6, #12]
 8009d34:	e7e3      	b.n	8009cfe <_putc_r+0x1a>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	6022      	str	r2, [r4, #0]
 8009d3c:	701d      	strb	r5, [r3, #0]
 8009d3e:	b2e8      	uxtb	r0, r5
 8009d40:	bd70      	pop	{r4, r5, r6, pc}
 8009d42:	bf00      	nop
 8009d44:	0800a480 	.word	0x0800a480
 8009d48:	0800a4a0 	.word	0x0800a4a0
 8009d4c:	0800a460 	.word	0x0800a460

08009d50 <_sbrk_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4c06      	ldr	r4, [pc, #24]	; (8009d6c <_sbrk_r+0x1c>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4605      	mov	r5, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	f7f7 fd0c 	bl	8001778 <_sbrk>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_sbrk_r+0x1a>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_sbrk_r+0x1a>
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	24010984 	.word	0x24010984

08009d70 <__sread>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	460c      	mov	r4, r1
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	f000 f896 	bl	8009ea8 <_read_r>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	bfab      	itete	ge
 8009d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d82:	89a3      	ldrhlt	r3, [r4, #12]
 8009d84:	181b      	addge	r3, r3, r0
 8009d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d8a:	bfac      	ite	ge
 8009d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d8e:	81a3      	strhlt	r3, [r4, #12]
 8009d90:	bd10      	pop	{r4, pc}

08009d92 <__swrite>:
 8009d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d96:	461f      	mov	r7, r3
 8009d98:	898b      	ldrh	r3, [r1, #12]
 8009d9a:	05db      	lsls	r3, r3, #23
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	4616      	mov	r6, r2
 8009da2:	d505      	bpl.n	8009db0 <__swrite+0x1e>
 8009da4:	2302      	movs	r3, #2
 8009da6:	2200      	movs	r2, #0
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	f000 f868 	bl	8009e80 <_lseek_r>
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc6:	f000 b817 	b.w	8009df8 <_write_r>

08009dca <__sseek>:
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	460c      	mov	r4, r1
 8009dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd2:	f000 f855 	bl	8009e80 <_lseek_r>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	bf15      	itete	ne
 8009ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009de6:	81a3      	strheq	r3, [r4, #12]
 8009de8:	bf18      	it	ne
 8009dea:	81a3      	strhne	r3, [r4, #12]
 8009dec:	bd10      	pop	{r4, pc}

08009dee <__sclose>:
 8009dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df2:	f000 b813 	b.w	8009e1c <_close_r>
	...

08009df8 <_write_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4c07      	ldr	r4, [pc, #28]	; (8009e18 <_write_r+0x20>)
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	4608      	mov	r0, r1
 8009e00:	4611      	mov	r1, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f7f7 fb2e 	bl	8001468 <_write>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_write_r+0x1e>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_write_r+0x1e>
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	24010984 	.word	0x24010984

08009e1c <_close_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4c06      	ldr	r4, [pc, #24]	; (8009e38 <_close_r+0x1c>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4605      	mov	r5, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	f7f7 fc71 	bl	800170e <_close>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_close_r+0x1a>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_close_r+0x1a>
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	24010984 	.word	0x24010984

08009e3c <_fstat_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4c07      	ldr	r4, [pc, #28]	; (8009e5c <_fstat_r+0x20>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4605      	mov	r5, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	f7f7 fc6c 	bl	8001726 <_fstat>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d102      	bne.n	8009e58 <_fstat_r+0x1c>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	b103      	cbz	r3, 8009e58 <_fstat_r+0x1c>
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	24010984 	.word	0x24010984

08009e60 <_isatty_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4c06      	ldr	r4, [pc, #24]	; (8009e7c <_isatty_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4605      	mov	r5, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	f7f7 fc6b 	bl	8001746 <_isatty>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_isatty_r+0x1a>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_isatty_r+0x1a>
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	24010984 	.word	0x24010984

08009e80 <_lseek_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4c07      	ldr	r4, [pc, #28]	; (8009ea0 <_lseek_r+0x20>)
 8009e84:	4605      	mov	r5, r0
 8009e86:	4608      	mov	r0, r1
 8009e88:	4611      	mov	r1, r2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	6022      	str	r2, [r4, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f7f7 fc64 	bl	800175c <_lseek>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_lseek_r+0x1e>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_lseek_r+0x1e>
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	24010984 	.word	0x24010984

08009ea4 <__malloc_lock>:
 8009ea4:	4770      	bx	lr

08009ea6 <__malloc_unlock>:
 8009ea6:	4770      	bx	lr

08009ea8 <_read_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4c07      	ldr	r4, [pc, #28]	; (8009ec8 <_read_r+0x20>)
 8009eac:	4605      	mov	r5, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f7 fc0c 	bl	80016d4 <_read>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_read_r+0x1e>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_read_r+0x1e>
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	24010984 	.word	0x24010984

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
